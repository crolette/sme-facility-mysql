<?xml version="1.0" encoding="UTF-8"?>
<testsuites>
  <testsuite name="CLI Arguments" tests="769" assertions="2729" errors="0" failures="23" skipped="0" time="891.217805">
    <testsuite name="Tests\Tenant\Assets\AssetContractTest" file="tests\Tenant\Assets\AssetContractTest.php" tests="6" assertions="37" errors="0" failures="0" skipped="0" time="8.403508">
      <testcase name="it can store an asset with contracts" file="tests\Tenant\Assets\AssetContractTest.php::it can store an asset with contracts" class="Tests\Tenant\Assets\AssetContractTest" classname="Tests.Tenant.Assets.AssetContractTest" assertions="6" time="2.238840"/>
      <testcase name="it can store an asset with contracts and documents" file="tests\Tenant\Assets\AssetContractTest.php::it can store an asset with contracts and documents" class="Tests\Tenant\Assets\AssetContractTest" classname="Tests.Tenant.Assets.AssetContractTest" assertions="11" time="1.478260"/>
      <testcase name="it can add an existing contract when creating an asset" file="tests\Tenant\Assets\AssetContractTest.php::it can add an existing contract when creating an asset" class="Tests\Tenant\Assets\AssetContractTest" classname="Tests.Tenant.Assets.AssetContractTest" assertions="3" time="1.267216"/>
      <testcase name="it can add multiple existing contracts when creating an asset" file="tests\Tenant\Assets\AssetContractTest.php::it can add multiple existing contracts when creating an asset" class="Tests\Tenant\Assets\AssetContractTest" classname="Tests.Tenant.Assets.AssetContractTest" assertions="4" time="1.094502"/>
      <testcase name="it can add existing contracts to an existing asset" file="tests\Tenant\Assets\AssetContractTest.php::it can add existing contracts to an existing asset" class="Tests\Tenant\Assets\AssetContractTest" classname="Tests.Tenant.Assets.AssetContractTest" assertions="5" time="1.266126"/>
      <testcase name="it can remove a contract from an asset" file="tests\Tenant\Assets\AssetContractTest.php::it can remove a contract from an asset" class="Tests\Tenant\Assets\AssetContractTest" classname="Tests.Tenant.Assets.AssetContractTest" assertions="8" time="1.058563"/>
    </testsuite>
    <testsuite name="Tests\Tenant\Assets\AssetTest" file="tests\Tenant\Assets\AssetTest.php" tests="24" assertions="145" errors="0" failures="1" skipped="0" time="24.123017">
      <testcase name="it can render the index assets page" file="tests\Tenant\Assets\AssetTest.php::it can render the index assets page" class="Tests\Tenant\Assets\AssetTest" classname="Tests.Tenant.Assets.AssetTest" assertions="12" time="1.167825">
        <failure type="PHPUnit\Framework\ExpectationFailedException">it can render the index assets pageProperty [items] does not have the expected size.
Failed asserting that actual size 13 matches expected size 4.&#13;
at vendor\laravel\framework\src\Illuminate\Testing\Fluent\Concerns\Has.php:34
at vendor\laravel\framework\src\Illuminate\Testing\Fluent\Concerns\Has.php:116
at tests\Tenant\Assets\AssetTest.php:61
at vendor\inertiajs\inertia-laravel\src\Testing\TestResponseMacros.php:25
at vendor\laravel\framework\src\Illuminate\Macroable\Traits\Macroable.php:126
at vendor\laravel\framework\src\Illuminate\Testing\TestResponse.php:1974
at tests\Tenant\Assets\AssetTest.php:58</failure>
      </testcase>
      <testcase name="it can render the create asset page" file="tests\Tenant\Assets\AssetTest.php::it can render the create asset page" class="Tests\Tenant\Assets\AssetTest" classname="Tests.Tenant.Assets.AssetTest" assertions="13" time="0.924588"/>
      <testcase name="it can create a new asset to site" file="tests\Tenant\Assets\AssetTest.php::it can create a new asset to site" class="Tests\Tenant\Assets\AssetTest" classname="Tests.Tenant.Assets.AssetTest" assertions="5" time="1.022487"/>
      <testcase name="it can create a new mobile asset" file="tests\Tenant\Assets\AssetTest.php::it can create a new mobile asset" class="Tests\Tenant\Assets\AssetTest" classname="Tests.Tenant.Assets.AssetTest" assertions="5" time="0.981833"/>
      <testcase name="it can create a new asset to building" file="tests\Tenant\Assets\AssetTest.php::it can create a new asset to building" class="Tests\Tenant\Assets\AssetTest" classname="Tests.Tenant.Assets.AssetTest" assertions="5" time="0.973693"/>
      <testcase name="it can create an asset with uploaded pictures" file="tests\Tenant\Assets\AssetTest.php::it can create an asset with uploaded pictures" class="Tests\Tenant\Assets\AssetTest" classname="Tests.Tenant.Assets.AssetTest" assertions="6" time="1.010900"/>
      <testcase name="it can add pictures to an asset" file="tests\Tenant\Assets\AssetTest.php::it can add pictures to an asset" class="Tests\Tenant\Assets\AssetTest" classname="Tests.Tenant.Assets.AssetTest" assertions="5" time="1.008777"/>
      <testcase name="it cannot create a new asset with non existing building" file="tests\Tenant\Assets\AssetTest.php::it cannot create a new asset with non existing building" class="Tests\Tenant\Assets\AssetTest" classname="Tests.Tenant.Assets.AssetTest" assertions="2" time="0.979285"/>
      <testcase name="it cannot create a new asset with unrelated asset category type" file="tests\Tenant\Assets\AssetTest.php::it cannot create a new asset with unrelated asset category type" class="Tests\Tenant\Assets\AssetTest" classname="Tests.Tenant.Assets.AssetTest" assertions="2" time="1.077129"/>
      <testcase name="it cannot create a new asset with non existing location type" file="tests\Tenant\Assets\AssetTest.php::it cannot create a new asset with non existing location type" class="Tests\Tenant\Assets\AssetTest" classname="Tests.Tenant.Assets.AssetTest" assertions="2" time="0.927503"/>
      <testcase name="it can create a new asset to floor" file="tests\Tenant\Assets\AssetTest.php::it can create a new asset to floor" class="Tests\Tenant\Assets\AssetTest" classname="Tests.Tenant.Assets.AssetTest" assertions="5" time="0.955757"/>
      <testcase name="it can create a new asset to room" file="tests\Tenant\Assets\AssetTest.php::it can create a new asset to room" class="Tests\Tenant\Assets\AssetTest" classname="Tests.Tenant.Assets.AssetTest" assertions="5" time="0.991408"/>
      <testcase name="it can show the asset page" file="tests\Tenant\Assets\AssetTest.php::it can show the asset page" class="Tests\Tenant\Assets\AssetTest" classname="Tests.Tenant.Assets.AssetTest" assertions="22" time="0.958457"/>
      <testcase name="it can render the update asset page" file="tests\Tenant\Assets\AssetTest.php::it can render the update asset page" class="Tests\Tenant\Assets\AssetTest" classname="Tests.Tenant.Assets.AssetTest" assertions="14" time="0.920094"/>
      <testcase name="it can update asset and his maintainable" file="tests\Tenant\Assets\AssetTest.php::it can update asset and his maintainable" class="Tests\Tenant\Assets\AssetTest" classname="Tests.Tenant.Assets.AssetTest" assertions="5" time="0.996244"/>
      <testcase name="it can update asset's location" file="tests\Tenant\Assets\AssetTest.php::it can update asset's location" class="Tests\Tenant\Assets\AssetTest" classname="Tests.Tenant.Assets.AssetTest" assertions="5" time="0.938938"/>
      <testcase name="it can soft delete an asset but kept in DB with his maintainable" file="tests\Tenant\Assets\AssetTest.php::it can soft delete an asset but kept in DB with his maintainable" class="Tests\Tenant\Assets\AssetTest" classname="Tests.Tenant.Assets.AssetTest" assertions="5" time="1.005853"/>
      <testcase name="it can restore a soft deleted asset" file="tests\Tenant\Assets\AssetTest.php::it can restore a soft deleted asset" class="Tests\Tenant\Assets\AssetTest" classname="Tests.Tenant.Assets.AssetTest" assertions="8" time="0.977179"/>
      <testcase name="it can force delete a soft deleted asset" file="tests\Tenant\Assets\AssetTest.php::it can force delete a soft deleted asset" class="Tests\Tenant\Assets\AssetTest" classname="Tests.Tenant.Assets.AssetTest" assertions="8" time="0.962224"/>
      <testcase name="it fails when model has more than 100 chars" file="tests\Tenant\Assets\AssetTest.php::it fails when model has more than 100 chars" class="Tests\Tenant\Assets\AssetTest" classname="Tests.Tenant.Assets.AssetTest" assertions="2" time="0.926710"/>
      <testcase name="it fails when brand has more than 100 chars" file="tests\Tenant\Assets\AssetTest.php::it fails when brand has more than 100 chars" class="Tests\Tenant\Assets\AssetTest" classname="Tests.Tenant.Assets.AssetTest" assertions="2" time="0.978368"/>
      <testcase name="it fails when serial_number has more than 50 chars" file="tests\Tenant\Assets\AssetTest.php::it fails when serial_number has more than 50 chars" class="Tests\Tenant\Assets\AssetTest" classname="Tests.Tenant.Assets.AssetTest" assertions="2" time="1.057184"/>
      <testcase name="it can attach a provider to an asset's maintainable" file="tests\Tenant\Assets\AssetTest.php::it can attach a provider to an asset's maintainable" class="Tests\Tenant\Assets\AssetTest" classname="Tests.Tenant.Assets.AssetTest" assertions="2" time="1.169690"/>
      <testcase name="it can update providers to an asset's maintainable" file="tests\Tenant\Assets\AssetTest.php::it can update providers to an asset's maintainable" class="Tests\Tenant\Assets\AssetTest" classname="Tests.Tenant.Assets.AssetTest" assertions="3" time="1.210894"/>
    </testsuite>
    <testsuite name="Tests\Tenant\Auth\AssetManagementTest" file="tests\Tenant\Auth\AssetManagementTest.php" tests="42" assertions="42" errors="0" failures="0" skipped="0" time="49.798040">
      <testsuite name="test access roles to assets index page" tests="3" assertions="3" errors="0" failures="0" skipped="0" time="3.249717">
        <testcase name="test access roles to assets index page with data set &quot;('Admin', 200)&quot;" file="tests\Tenant\Auth\AssetManagementTest.php::test access roles to assets index page with data set &quot;('Admin', 200)&quot;" class="Tests\Tenant\Auth\AssetManagementTest" classname="Tests.Tenant.Auth.AssetManagementTest" assertions="1" time="1.260777"/>
        <testcase name="test access roles to assets index page with data set &quot;('Maintenance Manager', 403)&quot;" file="tests\Tenant\Auth\AssetManagementTest.php::test access roles to assets index page with data set &quot;('Maintenance Manager', 403)&quot;" class="Tests\Tenant\Auth\AssetManagementTest" classname="Tests.Tenant.Auth.AssetManagementTest" assertions="1" time="1.036840"/>
        <testcase name="test access roles to assets index page with data set &quot;('Provider', 403)&quot;" file="tests\Tenant\Auth\AssetManagementTest.php::test access roles to assets index page with data set &quot;('Provider', 403)&quot;" class="Tests\Tenant\Auth\AssetManagementTest" classname="Tests.Tenant.Auth.AssetManagementTest" assertions="1" time="0.952100"/>
      </testsuite>
      <testsuite name="test access roles to create asset page" tests="3" assertions="3" errors="0" failures="0" skipped="0" time="3.083311">
        <testcase name="test access roles to create asset page with data set &quot;('Admin', 200)&quot;" file="tests\Tenant\Auth\AssetManagementTest.php::test access roles to create asset page with data set &quot;('Admin', 200)&quot;" class="Tests\Tenant\Auth\AssetManagementTest" classname="Tests.Tenant.Auth.AssetManagementTest" assertions="1" time="1.023713"/>
        <testcase name="test access roles to create asset page with data set &quot;('Maintenance Manager', 403)&quot;" file="tests\Tenant\Auth\AssetManagementTest.php::test access roles to create asset page with data set &quot;('Maintenance Manager', 403)&quot;" class="Tests\Tenant\Auth\AssetManagementTest" classname="Tests.Tenant.Auth.AssetManagementTest" assertions="1" time="1.117303"/>
        <testcase name="test access roles to create asset page with data set &quot;('Provider', 403)&quot;" file="tests\Tenant\Auth\AssetManagementTest.php::test access roles to create asset page with data set &quot;('Provider', 403)&quot;" class="Tests\Tenant\Auth\AssetManagementTest" classname="Tests.Tenant.Auth.AssetManagementTest" assertions="1" time="0.942296"/>
      </testsuite>
      <testsuite name="test access roles to view any asset page" tests="3" assertions="3" errors="0" failures="0" skipped="0" time="2.748623">
        <testcase name="test access roles to view any asset page with data set &quot;('Admin', 200)&quot;" file="tests\Tenant\Auth\AssetManagementTest.php::test access roles to view any asset page with data set &quot;('Admin', 200)&quot;" class="Tests\Tenant\Auth\AssetManagementTest" classname="Tests.Tenant.Auth.AssetManagementTest" assertions="1" time="0.927469"/>
        <testcase name="test access roles to view any asset page with data set &quot;('Maintenance Manager', 403)&quot;" file="tests\Tenant\Auth\AssetManagementTest.php::test access roles to view any asset page with data set &quot;('Maintenance Manager', 403)&quot;" class="Tests\Tenant\Auth\AssetManagementTest" classname="Tests.Tenant.Auth.AssetManagementTest" assertions="1" time="0.852391"/>
        <testcase name="test access roles to view any asset page with data set &quot;('Provider', 403)&quot;" file="tests\Tenant\Auth\AssetManagementTest.php::test access roles to view any asset page with data set &quot;('Provider', 403)&quot;" class="Tests\Tenant\Auth\AssetManagementTest" classname="Tests.Tenant.Auth.AssetManagementTest" assertions="1" time="0.968762"/>
      </testsuite>
      <testsuite name="test access roles to view asset with maintenance manager page" tests="3" assertions="3" errors="0" failures="0" skipped="0" time="2.909904">
        <testcase name="test access roles to view asset with maintenance manager page with data set &quot;('Admin', 200)&quot;" file="tests\Tenant\Auth\AssetManagementTest.php::test access roles to view asset with maintenance manager page with data set &quot;('Admin', 200)&quot;" class="Tests\Tenant\Auth\AssetManagementTest" classname="Tests.Tenant.Auth.AssetManagementTest" assertions="1" time="1.028977"/>
        <testcase name="test access roles to view asset with maintenance manager page with data set &quot;('Maintenance Manager', 200)&quot;" file="tests\Tenant\Auth\AssetManagementTest.php::test access roles to view asset with maintenance manager page with data set &quot;('Maintenance Manager', 200)&quot;" class="Tests\Tenant\Auth\AssetManagementTest" classname="Tests.Tenant.Auth.AssetManagementTest" assertions="1" time="0.958120"/>
        <testcase name="test access roles to view asset with maintenance manager page with data set &quot;('Provider', 403)&quot;" file="tests\Tenant\Auth\AssetManagementTest.php::test access roles to view asset with maintenance manager page with data set &quot;('Provider', 403)&quot;" class="Tests\Tenant\Auth\AssetManagementTest" classname="Tests.Tenant.Auth.AssetManagementTest" assertions="1" time="0.922807"/>
      </testsuite>
      <testsuite name="test access roles to store an asset" tests="3" assertions="3" errors="0" failures="0" skipped="0" time="3.892225">
        <testcase name="test access roles to store an asset with data set &quot;('Admin', 200)&quot;" file="tests\Tenant\Auth\AssetManagementTest.php::test access roles to store an asset with data set &quot;('Admin', 200)&quot;" class="Tests\Tenant\Auth\AssetManagementTest" classname="Tests.Tenant.Auth.AssetManagementTest" assertions="1" time="1.253540"/>
        <testcase name="test access roles to store an asset with data set &quot;('Maintenance Manager', 403)&quot;" file="tests\Tenant\Auth\AssetManagementTest.php::test access roles to store an asset with data set &quot;('Maintenance Manager', 403)&quot;" class="Tests\Tenant\Auth\AssetManagementTest" classname="Tests.Tenant.Auth.AssetManagementTest" assertions="1" time="1.325184"/>
        <testcase name="test access roles to store an asset with data set &quot;('Provider', 403)&quot;" file="tests\Tenant\Auth\AssetManagementTest.php::test access roles to store an asset with data set &quot;('Provider', 403)&quot;" class="Tests\Tenant\Auth\AssetManagementTest" classname="Tests.Tenant.Auth.AssetManagementTest" assertions="1" time="1.313501"/>
      </testsuite>
      <testsuite name="test access roles to update any asset page" tests="3" assertions="3" errors="0" failures="0" skipped="0" time="4.129297">
        <testcase name="test access roles to update any asset page with data set &quot;('Admin', 200)&quot;" file="tests\Tenant\Auth\AssetManagementTest.php::test access roles to update any asset page with data set &quot;('Admin', 200)&quot;" class="Tests\Tenant\Auth\AssetManagementTest" classname="Tests.Tenant.Auth.AssetManagementTest" assertions="1" time="1.238414"/>
        <testcase name="test access roles to update any asset page with data set &quot;('Maintenance Manager', 403)&quot;" file="tests\Tenant\Auth\AssetManagementTest.php::test access roles to update any asset page with data set &quot;('Maintenance Manager', 403)&quot;" class="Tests\Tenant\Auth\AssetManagementTest" classname="Tests.Tenant.Auth.AssetManagementTest" assertions="1" time="1.563588"/>
        <testcase name="test access roles to update any asset page with data set &quot;('Provider', 403)&quot;" file="tests\Tenant\Auth\AssetManagementTest.php::test access roles to update any asset page with data set &quot;('Provider', 403)&quot;" class="Tests\Tenant\Auth\AssetManagementTest" classname="Tests.Tenant.Auth.AssetManagementTest" assertions="1" time="1.327295"/>
      </testsuite>
      <testsuite name="test access roles to update asset with maintenance manager page" tests="3" assertions="3" errors="0" failures="0" skipped="0" time="3.898126">
        <testcase name="test access roles to update asset with maintenance manager page with data set &quot;('Admin', 200)&quot;" file="tests\Tenant\Auth\AssetManagementTest.php::test access roles to update asset with maintenance manager page with data set &quot;('Admin', 200)&quot;" class="Tests\Tenant\Auth\AssetManagementTest" classname="Tests.Tenant.Auth.AssetManagementTest" assertions="1" time="1.258775"/>
        <testcase name="test access roles to update asset with maintenance manager page with data set &quot;('Maintenance Manager', 200)&quot;" file="tests\Tenant\Auth\AssetManagementTest.php::test access roles to update asset with maintenance manager page with data set &quot;('Maintenance Manager', 200)&quot;" class="Tests\Tenant\Auth\AssetManagementTest" classname="Tests.Tenant.Auth.AssetManagementTest" assertions="1" time="1.309559"/>
        <testcase name="test access roles to update asset with maintenance manager page with data set &quot;('Provider', 403)&quot;" file="tests\Tenant\Auth\AssetManagementTest.php::test access roles to update asset with maintenance manager page with data set &quot;('Provider', 403)&quot;" class="Tests\Tenant\Auth\AssetManagementTest" classname="Tests.Tenant.Auth.AssetManagementTest" assertions="1" time="1.329792"/>
      </testsuite>
      <testsuite name="test access roles to asset page" tests="3" assertions="3" errors="0" failures="0" skipped="0" time="3.822709">
        <testcase name="test access roles to asset page with data set &quot;('Admin', 200)&quot;" file="tests\Tenant\Auth\AssetManagementTest.php::test access roles to asset page with data set &quot;('Admin', 200)&quot;" class="Tests\Tenant\Auth\AssetManagementTest" classname="Tests.Tenant.Auth.AssetManagementTest" assertions="1" time="1.164146"/>
        <testcase name="test access roles to asset page with data set &quot;('Maintenance Manager', 403)&quot;" file="tests\Tenant\Auth\AssetManagementTest.php::test access roles to asset page with data set &quot;('Maintenance Manager', 403)&quot;" class="Tests\Tenant\Auth\AssetManagementTest" classname="Tests.Tenant.Auth.AssetManagementTest" assertions="1" time="1.306085"/>
        <testcase name="test access roles to asset page with data set &quot;('Provider', 403)&quot;" file="tests\Tenant\Auth\AssetManagementTest.php::test access roles to asset page with data set &quot;('Provider', 403)&quot;" class="Tests\Tenant\Auth\AssetManagementTest" classname="Tests.Tenant.Auth.AssetManagementTest" assertions="1" time="1.352478"/>
      </testsuite>
      <testsuite name="test access roles to delete any asset" tests="3" assertions="3" errors="0" failures="0" skipped="0" time="4.134094">
        <testcase name="test access roles to delete any asset with data set &quot;('Admin', 200)&quot;" file="tests\Tenant\Auth\AssetManagementTest.php::test access roles to delete any asset with data set &quot;('Admin', 200)&quot;" class="Tests\Tenant\Auth\AssetManagementTest" classname="Tests.Tenant.Auth.AssetManagementTest" assertions="1" time="1.332102"/>
        <testcase name="test access roles to delete any asset with data set &quot;('Maintenance Manager', 403)&quot;" file="tests\Tenant\Auth\AssetManagementTest.php::test access roles to delete any asset with data set &quot;('Maintenance Manager', 403)&quot;" class="Tests\Tenant\Auth\AssetManagementTest" classname="Tests.Tenant.Auth.AssetManagementTest" assertions="1" time="1.889346"/>
        <testcase name="test access roles to delete any asset with data set &quot;('Provider', 403)&quot;" file="tests\Tenant\Auth\AssetManagementTest.php::test access roles to delete any asset with data set &quot;('Provider', 403)&quot;" class="Tests\Tenant\Auth\AssetManagementTest" classname="Tests.Tenant.Auth.AssetManagementTest" assertions="1" time="0.912647"/>
      </testsuite>
      <testsuite name="test access roles to delete asset with maintenance manager" tests="3" assertions="3" errors="0" failures="0" skipped="0" time="3.413635">
        <testcase name="test access roles to delete asset with maintenance manager with data set &quot;('Admin', 200)&quot;" file="tests\Tenant\Auth\AssetManagementTest.php::test access roles to delete asset with maintenance manager with data set &quot;('Admin', 200)&quot;" class="Tests\Tenant\Auth\AssetManagementTest" classname="Tests.Tenant.Auth.AssetManagementTest" assertions="1" time="1.123819"/>
        <testcase name="test access roles to delete asset with maintenance manager with data set &quot;('Maintenance Manager', 200)&quot;" file="tests\Tenant\Auth\AssetManagementTest.php::test access roles to delete asset with maintenance manager with data set &quot;('Maintenance Manager', 200)&quot;" class="Tests\Tenant\Auth\AssetManagementTest" classname="Tests.Tenant.Auth.AssetManagementTest" assertions="1" time="1.175202"/>
        <testcase name="test access roles to delete asset with maintenance manager with data set &quot;('Provider', 403)&quot;" file="tests\Tenant\Auth\AssetManagementTest.php::test access roles to delete asset with maintenance manager with data set &quot;('Provider', 403)&quot;" class="Tests\Tenant\Auth\AssetManagementTest" classname="Tests.Tenant.Auth.AssetManagementTest" assertions="1" time="1.114614"/>
      </testsuite>
      <testsuite name="test access roles to restore any asset" tests="3" assertions="3" errors="0" failures="0" skipped="0" time="3.238475">
        <testcase name="test access roles to restore any asset with data set &quot;('Admin', 200)&quot;" file="tests\Tenant\Auth\AssetManagementTest.php::test access roles to restore any asset with data set &quot;('Admin', 200)&quot;" class="Tests\Tenant\Auth\AssetManagementTest" classname="Tests.Tenant.Auth.AssetManagementTest" assertions="1" time="1.106088"/>
        <testcase name="test access roles to restore any asset with data set &quot;('Maintenance Manager', 403)&quot;" file="tests\Tenant\Auth\AssetManagementTest.php::test access roles to restore any asset with data set &quot;('Maintenance Manager', 403)&quot;" class="Tests\Tenant\Auth\AssetManagementTest" classname="Tests.Tenant.Auth.AssetManagementTest" assertions="1" time="1.090429"/>
        <testcase name="test access roles to restore any asset with data set &quot;('Provider', 403)&quot;" file="tests\Tenant\Auth\AssetManagementTest.php::test access roles to restore any asset with data set &quot;('Provider', 403)&quot;" class="Tests\Tenant\Auth\AssetManagementTest" classname="Tests.Tenant.Auth.AssetManagementTest" assertions="1" time="1.041959"/>
      </testsuite>
      <testsuite name="test access roles to force delete any asset" tests="3" assertions="3" errors="0" failures="0" skipped="0" time="2.795989">
        <testcase name="test access roles to force delete any asset with data set &quot;('Admin', 200)&quot;" file="tests\Tenant\Auth\AssetManagementTest.php::test access roles to force delete any asset with data set &quot;('Admin', 200)&quot;" class="Tests\Tenant\Auth\AssetManagementTest" classname="Tests.Tenant.Auth.AssetManagementTest" assertions="1" time="0.889924"/>
        <testcase name="test access roles to force delete any asset with data set &quot;('Maintenance Manager', 403)&quot;" file="tests\Tenant\Auth\AssetManagementTest.php::test access roles to force delete any asset with data set &quot;('Maintenance Manager', 403)&quot;" class="Tests\Tenant\Auth\AssetManagementTest" classname="Tests.Tenant.Auth.AssetManagementTest" assertions="1" time="0.973904"/>
        <testcase name="test access roles to force delete any asset with data set &quot;('Provider', 403)&quot;" file="tests\Tenant\Auth\AssetManagementTest.php::test access roles to force delete any asset with data set &quot;('Provider', 403)&quot;" class="Tests\Tenant\Auth\AssetManagementTest" classname="Tests.Tenant.Auth.AssetManagementTest" assertions="1" time="0.932161"/>
      </testsuite>
      <testsuite name="cannot regenerate a QR Code if user is not maintenance manager from the asset" tests="3" assertions="3" errors="0" failures="0" skipped="0" time="4.232937">
        <testcase name="cannot regenerate a QR Code if user is not maintenance manager from the asset with data set &quot;('Admin', 200)&quot;" file="tests\Tenant\Auth\AssetManagementTest.php::cannot regenerate a QR Code if user is not maintenance manager from the asset with data set &quot;('Admin', 200)&quot;" class="Tests\Tenant\Auth\AssetManagementTest" classname="Tests.Tenant.Auth.AssetManagementTest" assertions="1" time="2.265341"/>
        <testcase name="cannot regenerate a QR Code if user is not maintenance manager from the asset with data set &quot;('Maintenance Manager', 403)&quot;" file="tests\Tenant\Auth\AssetManagementTest.php::cannot regenerate a QR Code if user is not maintenance manager from the asset with data set &quot;('Maintenance Manager', 403)&quot;" class="Tests\Tenant\Auth\AssetManagementTest" classname="Tests.Tenant.Auth.AssetManagementTest" assertions="1" time="1.012443"/>
        <testcase name="cannot regenerate a QR Code if user is not maintenance manager from the asset with data set &quot;('Provider', 403)&quot;" file="tests\Tenant\Auth\AssetManagementTest.php::cannot regenerate a QR Code if user is not maintenance manager from the asset with data set &quot;('Provider', 403)&quot;" class="Tests\Tenant\Auth\AssetManagementTest" classname="Tests.Tenant.Auth.AssetManagementTest" assertions="1" time="0.955153"/>
      </testsuite>
      <testsuite name="can regenerate a QR Code if user is not maintenance manager from the asset" tests="3" assertions="3" errors="0" failures="0" skipped="0" time="4.248995">
        <testcase name="can regenerate a QR Code if user is not maintenance manager from the asset with data set &quot;('Admin', 200)&quot;" file="tests\Tenant\Auth\AssetManagementTest.php::can regenerate a QR Code if user is not maintenance manager from the asset with data set &quot;('Admin', 200)&quot;" class="Tests\Tenant\Auth\AssetManagementTest" classname="Tests.Tenant.Auth.AssetManagementTest" assertions="1" time="1.620695"/>
        <testcase name="can regenerate a QR Code if user is not maintenance manager from the asset with data set &quot;('Maintenance Manager', 200)&quot;" file="tests\Tenant\Auth\AssetManagementTest.php::can regenerate a QR Code if user is not maintenance manager from the asset with data set &quot;('Maintenance Manager', 200)&quot;" class="Tests\Tenant\Auth\AssetManagementTest" classname="Tests.Tenant.Auth.AssetManagementTest" assertions="1" time="1.704596"/>
        <testcase name="can regenerate a QR Code if user is not maintenance manager from the asset with data set &quot;('Provider', 403)&quot;" file="tests\Tenant\Auth\AssetManagementTest.php::can regenerate a QR Code if user is not maintenance manager from the asset with data set &quot;('Provider', 403)&quot;" class="Tests\Tenant\Auth\AssetManagementTest" classname="Tests.Tenant.Auth.AssetManagementTest" assertions="1" time="0.923705"/>
      </testsuite>
    </testsuite>
    <testsuite name="Tests\Tenant\Auth\BuildingManagementTest" file="tests\Tenant\Auth\BuildingManagementTest.php" tests="36" assertions="36" errors="0" failures="0" skipped="0" time="39.971401">
      <testsuite name="test access roles to building index page" tests="3" assertions="3" errors="0" failures="0" skipped="0" time="2.819344">
        <testcase name="test access roles to building index page with data set &quot;('Admin', 200)&quot;" file="tests\Tenant\Auth\BuildingManagementTest.php::test access roles to building index page with data set &quot;('Admin', 200)&quot;" class="Tests\Tenant\Auth\BuildingManagementTest" classname="Tests.Tenant.Auth.BuildingManagementTest" assertions="1" time="0.977080"/>
        <testcase name="test access roles to building index page with data set &quot;('Maintenance Manager', 403)&quot;" file="tests\Tenant\Auth\BuildingManagementTest.php::test access roles to building index page with data set &quot;('Maintenance Manager', 403)&quot;" class="Tests\Tenant\Auth\BuildingManagementTest" classname="Tests.Tenant.Auth.BuildingManagementTest" assertions="1" time="0.928188"/>
        <testcase name="test access roles to building index page with data set &quot;('Provider', 403)&quot;" file="tests\Tenant\Auth\BuildingManagementTest.php::test access roles to building index page with data set &quot;('Provider', 403)&quot;" class="Tests\Tenant\Auth\BuildingManagementTest" classname="Tests.Tenant.Auth.BuildingManagementTest" assertions="1" time="0.914076"/>
      </testsuite>
      <testsuite name="test access roles to create building page" tests="3" assertions="3" errors="0" failures="0" skipped="0" time="2.707883">
        <testcase name="test access roles to create building page with data set &quot;('Admin', 200)&quot;" file="tests\Tenant\Auth\BuildingManagementTest.php::test access roles to create building page with data set &quot;('Admin', 200)&quot;" class="Tests\Tenant\Auth\BuildingManagementTest" classname="Tests.Tenant.Auth.BuildingManagementTest" assertions="1" time="0.980034"/>
        <testcase name="test access roles to create building page with data set &quot;('Maintenance Manager', 403)&quot;" file="tests\Tenant\Auth\BuildingManagementTest.php::test access roles to create building page with data set &quot;('Maintenance Manager', 403)&quot;" class="Tests\Tenant\Auth\BuildingManagementTest" classname="Tests.Tenant.Auth.BuildingManagementTest" assertions="1" time="0.875409"/>
        <testcase name="test access roles to create building page with data set &quot;('Provider', 403)&quot;" file="tests\Tenant\Auth\BuildingManagementTest.php::test access roles to create building page with data set &quot;('Provider', 403)&quot;" class="Tests\Tenant\Auth\BuildingManagementTest" classname="Tests.Tenant.Auth.BuildingManagementTest" assertions="1" time="0.852440"/>
      </testsuite>
      <testsuite name="test access roles to view any building page" tests="3" assertions="3" errors="0" failures="0" skipped="0" time="2.805531">
        <testcase name="test access roles to view any building page with data set &quot;('Admin', 200)&quot;" file="tests\Tenant\Auth\BuildingManagementTest.php::test access roles to view any building page with data set &quot;('Admin', 200)&quot;" class="Tests\Tenant\Auth\BuildingManagementTest" classname="Tests.Tenant.Auth.BuildingManagementTest" assertions="1" time="0.939860"/>
        <testcase name="test access roles to view any building page with data set &quot;('Maintenance Manager', 403)&quot;" file="tests\Tenant\Auth\BuildingManagementTest.php::test access roles to view any building page with data set &quot;('Maintenance Manager', 403)&quot;" class="Tests\Tenant\Auth\BuildingManagementTest" classname="Tests.Tenant.Auth.BuildingManagementTest" assertions="1" time="0.971570"/>
        <testcase name="test access roles to view any building page with data set &quot;('Provider', 403)&quot;" file="tests\Tenant\Auth\BuildingManagementTest.php::test access roles to view any building page with data set &quot;('Provider', 403)&quot;" class="Tests\Tenant\Auth\BuildingManagementTest" classname="Tests.Tenant.Auth.BuildingManagementTest" assertions="1" time="0.894101"/>
      </testsuite>
      <testsuite name="test access roles to view building with maintenance manager page" tests="3" assertions="3" errors="0" failures="0" skipped="0" time="2.843811">
        <testcase name="test access roles to view building with maintenance manager page with data set &quot;('Admin', 200)&quot;" file="tests\Tenant\Auth\BuildingManagementTest.php::test access roles to view building with maintenance manager page with data set &quot;('Admin', 200)&quot;" class="Tests\Tenant\Auth\BuildingManagementTest" classname="Tests.Tenant.Auth.BuildingManagementTest" assertions="1" time="0.977444"/>
        <testcase name="test access roles to view building with maintenance manager page with data set &quot;('Maintenance Manager', 200)&quot;" file="tests\Tenant\Auth\BuildingManagementTest.php::test access roles to view building with maintenance manager page with data set &quot;('Maintenance Manager', 200)&quot;" class="Tests\Tenant\Auth\BuildingManagementTest" classname="Tests.Tenant.Auth.BuildingManagementTest" assertions="1" time="0.965271"/>
        <testcase name="test access roles to view building with maintenance manager page with data set &quot;('Provider', 403)&quot;" file="tests\Tenant\Auth\BuildingManagementTest.php::test access roles to view building with maintenance manager page with data set &quot;('Provider', 403)&quot;" class="Tests\Tenant\Auth\BuildingManagementTest" classname="Tests.Tenant.Auth.BuildingManagementTest" assertions="1" time="0.901096"/>
      </testsuite>
      <testsuite name="test access roles to store a building" tests="3" assertions="3" errors="0" failures="0" skipped="0" time="3.033136">
        <testcase name="test access roles to store a building with data set &quot;('Admin', 200)&quot;" file="tests\Tenant\Auth\BuildingManagementTest.php::test access roles to store a building with data set &quot;('Admin', 200)&quot;" class="Tests\Tenant\Auth\BuildingManagementTest" classname="Tests.Tenant.Auth.BuildingManagementTest" assertions="1" time="0.911463"/>
        <testcase name="test access roles to store a building with data set &quot;('Maintenance Manager', 403)&quot;" file="tests\Tenant\Auth\BuildingManagementTest.php::test access roles to store a building with data set &quot;('Maintenance Manager', 403)&quot;" class="Tests\Tenant\Auth\BuildingManagementTest" classname="Tests.Tenant.Auth.BuildingManagementTest" assertions="1" time="0.985436"/>
        <testcase name="test access roles to store a building with data set &quot;('Provider', 403)&quot;" file="tests\Tenant\Auth\BuildingManagementTest.php::test access roles to store a building with data set &quot;('Provider', 403)&quot;" class="Tests\Tenant\Auth\BuildingManagementTest" classname="Tests.Tenant.Auth.BuildingManagementTest" assertions="1" time="1.136237"/>
      </testsuite>
      <testsuite name="test access roles to update any asset page" tests="3" assertions="3" errors="0" failures="0" skipped="0" time="3.849716">
        <testcase name="test access roles to update any asset page with data set &quot;('Admin', 200)&quot;" file="tests\Tenant\Auth\BuildingManagementTest.php::test access roles to update any asset page with data set &quot;('Admin', 200)&quot;" class="Tests\Tenant\Auth\BuildingManagementTest" classname="Tests.Tenant.Auth.BuildingManagementTest" assertions="1" time="1.311984"/>
        <testcase name="test access roles to update any asset page with data set &quot;('Maintenance Manager', 403)&quot;" file="tests\Tenant\Auth\BuildingManagementTest.php::test access roles to update any asset page with data set &quot;('Maintenance Manager', 403)&quot;" class="Tests\Tenant\Auth\BuildingManagementTest" classname="Tests.Tenant.Auth.BuildingManagementTest" assertions="1" time="1.189734"/>
        <testcase name="test access roles to update any asset page with data set &quot;('Provider', 403)&quot;" file="tests\Tenant\Auth\BuildingManagementTest.php::test access roles to update any asset page with data set &quot;('Provider', 403)&quot;" class="Tests\Tenant\Auth\BuildingManagementTest" classname="Tests.Tenant.Auth.BuildingManagementTest" assertions="1" time="1.347998"/>
      </testsuite>
      <testsuite name="test access roles to update building with maintenance manager page" tests="3" assertions="3" errors="0" failures="0" skipped="0" time="4.150994">
        <testcase name="test access roles to update building with maintenance manager page with data set &quot;('Admin', 200)&quot;" file="tests\Tenant\Auth\BuildingManagementTest.php::test access roles to update building with maintenance manager page with data set &quot;('Admin', 200)&quot;" class="Tests\Tenant\Auth\BuildingManagementTest" classname="Tests.Tenant.Auth.BuildingManagementTest" assertions="1" time="1.380557"/>
        <testcase name="test access roles to update building with maintenance manager page with data set &quot;('Maintenance Manager', 200)&quot;" file="tests\Tenant\Auth\BuildingManagementTest.php::test access roles to update building with maintenance manager page with data set &quot;('Maintenance Manager', 200)&quot;" class="Tests\Tenant\Auth\BuildingManagementTest" classname="Tests.Tenant.Auth.BuildingManagementTest" assertions="1" time="1.399538"/>
        <testcase name="test access roles to update building with maintenance manager page with data set &quot;('Provider', 403)&quot;" file="tests\Tenant\Auth\BuildingManagementTest.php::test access roles to update building with maintenance manager page with data set &quot;('Provider', 403)&quot;" class="Tests\Tenant\Auth\BuildingManagementTest" classname="Tests.Tenant.Auth.BuildingManagementTest" assertions="1" time="1.370899"/>
      </testsuite>
      <testsuite name="test access roles to update building with maintenance manager" tests="3" assertions="3" errors="0" failures="0" skipped="0" time="4.333405">
        <testcase name="test access roles to update building with maintenance manager with data set &quot;('Admin', 200)&quot;" file="tests\Tenant\Auth\BuildingManagementTest.php::test access roles to update building with maintenance manager with data set &quot;('Admin', 200)&quot;" class="Tests\Tenant\Auth\BuildingManagementTest" classname="Tests.Tenant.Auth.BuildingManagementTest" assertions="1" time="1.456500"/>
        <testcase name="test access roles to update building with maintenance manager with data set &quot;('Maintenance Manager', 200)&quot;" file="tests\Tenant\Auth\BuildingManagementTest.php::test access roles to update building with maintenance manager with data set &quot;('Maintenance Manager', 200)&quot;" class="Tests\Tenant\Auth\BuildingManagementTest" classname="Tests.Tenant.Auth.BuildingManagementTest" assertions="1" time="1.548168"/>
        <testcase name="test access roles to update building with maintenance manager with data set &quot;('Provider', 403)&quot;" file="tests\Tenant\Auth\BuildingManagementTest.php::test access roles to update building with maintenance manager with data set &quot;('Provider', 403)&quot;" class="Tests\Tenant\Auth\BuildingManagementTest" classname="Tests.Tenant.Auth.BuildingManagementTest" assertions="1" time="1.328737"/>
      </testsuite>
      <testsuite name="test access roles to delete any building" tests="3" assertions="3" errors="0" failures="0" skipped="0" time="2.972530">
        <testcase name="test access roles to delete any building with data set &quot;('Admin', 200)&quot;" file="tests\Tenant\Auth\BuildingManagementTest.php::test access roles to delete any building with data set &quot;('Admin', 200)&quot;" class="Tests\Tenant\Auth\BuildingManagementTest" classname="Tests.Tenant.Auth.BuildingManagementTest" assertions="1" time="1.324515"/>
        <testcase name="test access roles to delete any building with data set &quot;('Maintenance Manager', 403)&quot;" file="tests\Tenant\Auth\BuildingManagementTest.php::test access roles to delete any building with data set &quot;('Maintenance Manager', 403)&quot;" class="Tests\Tenant\Auth\BuildingManagementTest" classname="Tests.Tenant.Auth.BuildingManagementTest" assertions="1" time="0.807118"/>
        <testcase name="test access roles to delete any building with data set &quot;('Provider', 403)&quot;" file="tests\Tenant\Auth\BuildingManagementTest.php::test access roles to delete any building with data set &quot;('Provider', 403)&quot;" class="Tests\Tenant\Auth\BuildingManagementTest" classname="Tests.Tenant.Auth.BuildingManagementTest" assertions="1" time="0.840896"/>
      </testsuite>
      <testsuite name="test access roles to delete building with maintenance manager" tests="3" assertions="3" errors="0" failures="0" skipped="0" time="2.543897">
        <testcase name="test access roles to delete building with maintenance manager with data set &quot;('Admin', 200)&quot;" file="tests\Tenant\Auth\BuildingManagementTest.php::test access roles to delete building with maintenance manager with data set &quot;('Admin', 200)&quot;" class="Tests\Tenant\Auth\BuildingManagementTest" classname="Tests.Tenant.Auth.BuildingManagementTest" assertions="1" time="0.825105"/>
        <testcase name="test access roles to delete building with maintenance manager with data set &quot;('Maintenance Manager', 403)&quot;" file="tests\Tenant\Auth\BuildingManagementTest.php::test access roles to delete building with maintenance manager with data set &quot;('Maintenance Manager', 403)&quot;" class="Tests\Tenant\Auth\BuildingManagementTest" classname="Tests.Tenant.Auth.BuildingManagementTest" assertions="1" time="0.818125"/>
        <testcase name="test access roles to delete building with maintenance manager with data set &quot;('Provider', 403)&quot;" file="tests\Tenant\Auth\BuildingManagementTest.php::test access roles to delete building with maintenance manager with data set &quot;('Provider', 403)&quot;" class="Tests\Tenant\Auth\BuildingManagementTest" classname="Tests.Tenant.Auth.BuildingManagementTest" assertions="1" time="0.900667"/>
      </testsuite>
      <testsuite name="cannot regenerate a QR Code if user is not maintenance manager from the building" tests="3" assertions="3" errors="0" failures="0" skipped="0" time="3.739634">
        <testcase name="cannot regenerate a QR Code if user is not maintenance manager from the building with data set &quot;('Admin', 200)&quot;" file="tests\Tenant\Auth\BuildingManagementTest.php::cannot regenerate a QR Code if user is not maintenance manager from the building with data set &quot;('Admin', 200)&quot;" class="Tests\Tenant\Auth\BuildingManagementTest" classname="Tests.Tenant.Auth.BuildingManagementTest" assertions="1" time="1.712588"/>
        <testcase name="cannot regenerate a QR Code if user is not maintenance manager from the building with data set &quot;('Maintenance Manager', 403)&quot;" file="tests\Tenant\Auth\BuildingManagementTest.php::cannot regenerate a QR Code if user is not maintenance manager from the building with data set &quot;('Maintenance Manager', 403)&quot;" class="Tests\Tenant\Auth\BuildingManagementTest" classname="Tests.Tenant.Auth.BuildingManagementTest" assertions="1" time="1.048569"/>
        <testcase name="cannot regenerate a QR Code if user is not maintenance manager from the building with data set &quot;('Provider', 403)&quot;" file="tests\Tenant\Auth\BuildingManagementTest.php::cannot regenerate a QR Code if user is not maintenance manager from the building with data set &quot;('Provider', 403)&quot;" class="Tests\Tenant\Auth\BuildingManagementTest" classname="Tests.Tenant.Auth.BuildingManagementTest" assertions="1" time="0.978477"/>
      </testsuite>
      <testsuite name="can regenerate a QR Code if user is not maintenance manager from the building" tests="3" assertions="3" errors="0" failures="0" skipped="0" time="4.171519">
        <testcase name="can regenerate a QR Code if user is not maintenance manager from the building with data set &quot;('Admin', 200)&quot;" file="tests\Tenant\Auth\BuildingManagementTest.php::can regenerate a QR Code if user is not maintenance manager from the building with data set &quot;('Admin', 200)&quot;" class="Tests\Tenant\Auth\BuildingManagementTest" classname="Tests.Tenant.Auth.BuildingManagementTest" assertions="1" time="1.609397"/>
        <testcase name="can regenerate a QR Code if user is not maintenance manager from the building with data set &quot;('Maintenance Manager', 200)&quot;" file="tests\Tenant\Auth\BuildingManagementTest.php::can regenerate a QR Code if user is not maintenance manager from the building with data set &quot;('Maintenance Manager', 200)&quot;" class="Tests\Tenant\Auth\BuildingManagementTest" classname="Tests.Tenant.Auth.BuildingManagementTest" assertions="1" time="1.643178"/>
        <testcase name="can regenerate a QR Code if user is not maintenance manager from the building with data set &quot;('Provider', 403)&quot;" file="tests\Tenant\Auth\BuildingManagementTest.php::can regenerate a QR Code if user is not maintenance manager from the building with data set &quot;('Provider', 403)&quot;" class="Tests\Tenant\Auth\BuildingManagementTest" classname="Tests.Tenant.Auth.BuildingManagementTest" assertions="1" time="0.918944"/>
      </testsuite>
    </testsuite>
    <testsuite name="Tests\Tenant\Auth\ContractManagementTest" file="tests\Tenant\Auth\ContractManagementTest.php" tests="30" assertions="30" errors="0" failures="0" skipped="0" time="31.973934">
      <testsuite name="test access roles to contracts index page" tests="3" assertions="3" errors="0" failures="0" skipped="0" time="3.191043">
        <testcase name="test access roles to contracts index page with data set &quot;('Admin', 200)&quot;" file="tests\Tenant\Auth\ContractManagementTest.php::test access roles to contracts index page with data set &quot;('Admin', 200)&quot;" class="Tests\Tenant\Auth\ContractManagementTest" classname="Tests.Tenant.Auth.ContractManagementTest" assertions="1" time="1.139526"/>
        <testcase name="test access roles to contracts index page with data set &quot;('Maintenance Manager', 200)&quot;" file="tests\Tenant\Auth\ContractManagementTest.php::test access roles to contracts index page with data set &quot;('Maintenance Manager', 200)&quot;" class="Tests\Tenant\Auth\ContractManagementTest" classname="Tests.Tenant.Auth.ContractManagementTest" assertions="1" time="1.047462"/>
        <testcase name="test access roles to contracts index page with data set &quot;('Provider', 403)&quot;" file="tests\Tenant\Auth\ContractManagementTest.php::test access roles to contracts index page with data set &quot;('Provider', 403)&quot;" class="Tests\Tenant\Auth\ContractManagementTest" classname="Tests.Tenant.Auth.ContractManagementTest" assertions="1" time="1.004055"/>
      </testsuite>
      <testsuite name="test access roles to create contract page" tests="3" assertions="3" errors="0" failures="0" skipped="0" time="3.255412">
        <testcase name="test access roles to create contract page with data set &quot;('Admin', 200)&quot;" file="tests\Tenant\Auth\ContractManagementTest.php::test access roles to create contract page with data set &quot;('Admin', 200)&quot;" class="Tests\Tenant\Auth\ContractManagementTest" classname="Tests.Tenant.Auth.ContractManagementTest" assertions="1" time="1.184710"/>
        <testcase name="test access roles to create contract page with data set &quot;('Maintenance Manager', 200)&quot;" file="tests\Tenant\Auth\ContractManagementTest.php::test access roles to create contract page with data set &quot;('Maintenance Manager', 200)&quot;" class="Tests\Tenant\Auth\ContractManagementTest" classname="Tests.Tenant.Auth.ContractManagementTest" assertions="1" time="1.064414"/>
        <testcase name="test access roles to create contract page with data set &quot;('Provider', 403)&quot;" file="tests\Tenant\Auth\ContractManagementTest.php::test access roles to create contract page with data set &quot;('Provider', 403)&quot;" class="Tests\Tenant\Auth\ContractManagementTest" classname="Tests.Tenant.Auth.ContractManagementTest" assertions="1" time="1.006288"/>
      </testsuite>
      <testsuite name="test access roles to view any contract page" tests="3" assertions="3" errors="0" failures="0" skipped="0" time="3.264057">
        <testcase name="test access roles to view any contract page with data set &quot;('Admin', 200)&quot;" file="tests\Tenant\Auth\ContractManagementTest.php::test access roles to view any contract page with data set &quot;('Admin', 200)&quot;" class="Tests\Tenant\Auth\ContractManagementTest" classname="Tests.Tenant.Auth.ContractManagementTest" assertions="1" time="1.089151"/>
        <testcase name="test access roles to view any contract page with data set &quot;('Maintenance Manager', 200)&quot;" file="tests\Tenant\Auth\ContractManagementTest.php::test access roles to view any contract page with data set &quot;('Maintenance Manager', 200)&quot;" class="Tests\Tenant\Auth\ContractManagementTest" classname="Tests.Tenant.Auth.ContractManagementTest" assertions="1" time="1.154048"/>
        <testcase name="test access roles to view any contract page with data set &quot;('Provider', 403)&quot;" file="tests\Tenant\Auth\ContractManagementTest.php::test access roles to view any contract page with data set &quot;('Provider', 403)&quot;" class="Tests\Tenant\Auth\ContractManagementTest" classname="Tests.Tenant.Auth.ContractManagementTest" assertions="1" time="1.020858"/>
      </testsuite>
      <testsuite name="test access roles to store a contract" tests="3" assertions="3" errors="0" failures="0" skipped="0" time="3.225749">
        <testcase name="test access roles to store a contract with data set &quot;('Admin', 200)&quot;" file="tests\Tenant\Auth\ContractManagementTest.php::test access roles to store a contract with data set &quot;('Admin', 200)&quot;" class="Tests\Tenant\Auth\ContractManagementTest" classname="Tests.Tenant.Auth.ContractManagementTest" assertions="1" time="1.090776"/>
        <testcase name="test access roles to store a contract with data set &quot;('Maintenance Manager', 200)&quot;" file="tests\Tenant\Auth\ContractManagementTest.php::test access roles to store a contract with data set &quot;('Maintenance Manager', 200)&quot;" class="Tests\Tenant\Auth\ContractManagementTest" classname="Tests.Tenant.Auth.ContractManagementTest" assertions="1" time="1.113258"/>
        <testcase name="test access roles to store a contract with data set &quot;('Provider', 403)&quot;" file="tests\Tenant\Auth\ContractManagementTest.php::test access roles to store a contract with data set &quot;('Provider', 403)&quot;" class="Tests\Tenant\Auth\ContractManagementTest" classname="Tests.Tenant.Auth.ContractManagementTest" assertions="1" time="1.021715"/>
      </testsuite>
      <testsuite name="test access roles to update any contract page" tests="3" assertions="3" errors="0" failures="0" skipped="0" time="3.143006">
        <testcase name="test access roles to update any contract page with data set &quot;('Admin', 200)&quot;" file="tests\Tenant\Auth\ContractManagementTest.php::test access roles to update any contract page with data set &quot;('Admin', 200)&quot;" class="Tests\Tenant\Auth\ContractManagementTest" classname="Tests.Tenant.Auth.ContractManagementTest" assertions="1" time="1.050289"/>
        <testcase name="test access roles to update any contract page with data set &quot;('Maintenance Manager', 200)&quot;" file="tests\Tenant\Auth\ContractManagementTest.php::test access roles to update any contract page with data set &quot;('Maintenance Manager', 200)&quot;" class="Tests\Tenant\Auth\ContractManagementTest" classname="Tests.Tenant.Auth.ContractManagementTest" assertions="1" time="1.031804"/>
        <testcase name="test access roles to update any contract page with data set &quot;('Provider', 403)&quot;" file="tests\Tenant\Auth\ContractManagementTest.php::test access roles to update any contract page with data set &quot;('Provider', 403)&quot;" class="Tests\Tenant\Auth\ContractManagementTest" classname="Tests.Tenant.Auth.ContractManagementTest" assertions="1" time="1.060913"/>
      </testsuite>
      <testsuite name="test access roles to update a contract" tests="3" assertions="3" errors="0" failures="0" skipped="0" time="3.130919">
        <testcase name="test access roles to update a contract with data set &quot;('Admin', 200)&quot;" file="tests\Tenant\Auth\ContractManagementTest.php::test access roles to update a contract with data set &quot;('Admin', 200)&quot;" class="Tests\Tenant\Auth\ContractManagementTest" classname="Tests.Tenant.Auth.ContractManagementTest" assertions="1" time="1.025864"/>
        <testcase name="test access roles to update a contract with data set &quot;('Maintenance Manager', 200)&quot;" file="tests\Tenant\Auth\ContractManagementTest.php::test access roles to update a contract with data set &quot;('Maintenance Manager', 200)&quot;" class="Tests\Tenant\Auth\ContractManagementTest" classname="Tests.Tenant.Auth.ContractManagementTest" assertions="1" time="1.061159"/>
        <testcase name="test access roles to update a contract with data set &quot;('Provider', 403)&quot;" file="tests\Tenant\Auth\ContractManagementTest.php::test access roles to update a contract with data set &quot;('Provider', 403)&quot;" class="Tests\Tenant\Auth\ContractManagementTest" classname="Tests.Tenant.Auth.ContractManagementTest" assertions="1" time="1.043896"/>
      </testsuite>
      <testsuite name="test access roles to contract page" tests="3" assertions="3" errors="0" failures="0" skipped="0" time="3.100568">
        <testcase name="test access roles to contract page with data set &quot;('Admin', 200)&quot;" file="tests\Tenant\Auth\ContractManagementTest.php::test access roles to contract page with data set &quot;('Admin', 200)&quot;" class="Tests\Tenant\Auth\ContractManagementTest" classname="Tests.Tenant.Auth.ContractManagementTest" assertions="1" time="1.038487"/>
        <testcase name="test access roles to contract page with data set &quot;('Maintenance Manager', 200)&quot;" file="tests\Tenant\Auth\ContractManagementTest.php::test access roles to contract page with data set &quot;('Maintenance Manager', 200)&quot;" class="Tests\Tenant\Auth\ContractManagementTest" classname="Tests.Tenant.Auth.ContractManagementTest" assertions="1" time="1.066287"/>
        <testcase name="test access roles to contract page with data set &quot;('Provider', 403)&quot;" file="tests\Tenant\Auth\ContractManagementTest.php::test access roles to contract page with data set &quot;('Provider', 403)&quot;" class="Tests\Tenant\Auth\ContractManagementTest" classname="Tests.Tenant.Auth.ContractManagementTest" assertions="1" time="0.995794"/>
      </testsuite>
      <testsuite name="test access roles to delete any contract" tests="3" assertions="3" errors="0" failures="0" skipped="0" time="3.059787">
        <testcase name="test access roles to delete any contract with data set &quot;('Admin', 200)&quot;" file="tests\Tenant\Auth\ContractManagementTest.php::test access roles to delete any contract with data set &quot;('Admin', 200)&quot;" class="Tests\Tenant\Auth\ContractManagementTest" classname="Tests.Tenant.Auth.ContractManagementTest" assertions="1" time="1.020499"/>
        <testcase name="test access roles to delete any contract with data set &quot;('Maintenance Manager', 403)&quot;" file="tests\Tenant\Auth\ContractManagementTest.php::test access roles to delete any contract with data set &quot;('Maintenance Manager', 403)&quot;" class="Tests\Tenant\Auth\ContractManagementTest" classname="Tests.Tenant.Auth.ContractManagementTest" assertions="1" time="1.044206"/>
        <testcase name="test access roles to delete any contract with data set &quot;('Provider', 403)&quot;" file="tests\Tenant\Auth\ContractManagementTest.php::test access roles to delete any contract with data set &quot;('Provider', 403)&quot;" class="Tests\Tenant\Auth\ContractManagementTest" classname="Tests.Tenant.Auth.ContractManagementTest" assertions="1" time="0.995082"/>
      </testsuite>
      <testsuite name="test access roles to post a new document to a contract" tests="3" assertions="3" errors="0" failures="0" skipped="0" time="3.373242">
        <testcase name="test access roles to post a new document to a contract with data set &quot;('Admin', 200)&quot;" file="tests\Tenant\Auth\ContractManagementTest.php::test access roles to post a new document to a contract with data set &quot;('Admin', 200)&quot;" class="Tests\Tenant\Auth\ContractManagementTest" classname="Tests.Tenant.Auth.ContractManagementTest" assertions="1" time="1.106275"/>
        <testcase name="test access roles to post a new document to a contract with data set &quot;('Maintenance Manager', 200)&quot;" file="tests\Tenant\Auth\ContractManagementTest.php::test access roles to post a new document to a contract with data set &quot;('Maintenance Manager', 200)&quot;" class="Tests\Tenant\Auth\ContractManagementTest" classname="Tests.Tenant.Auth.ContractManagementTest" assertions="1" time="1.143768"/>
        <testcase name="test access roles to post a new document to a contract with data set &quot;('Provider', 403)&quot;" file="tests\Tenant\Auth\ContractManagementTest.php::test access roles to post a new document to a contract with data set &quot;('Provider', 403)&quot;" class="Tests\Tenant\Auth\ContractManagementTest" classname="Tests.Tenant.Auth.ContractManagementTest" assertions="1" time="1.123199"/>
      </testsuite>
      <testsuite name="test access roles to detach a document from a contract" tests="3" assertions="3" errors="0" failures="0" skipped="0" time="3.230150">
        <testcase name="test access roles to detach a document from a contract with data set &quot;('Admin', 200)&quot;" file="tests\Tenant\Auth\ContractManagementTest.php::test access roles to detach a document from a contract with data set &quot;('Admin', 200)&quot;" class="Tests\Tenant\Auth\ContractManagementTest" classname="Tests.Tenant.Auth.ContractManagementTest" assertions="1" time="1.152271"/>
        <testcase name="test access roles to detach a document from a contract with data set &quot;('Maintenance Manager', 200)&quot;" file="tests\Tenant\Auth\ContractManagementTest.php::test access roles to detach a document from a contract with data set &quot;('Maintenance Manager', 200)&quot;" class="Tests\Tenant\Auth\ContractManagementTest" classname="Tests.Tenant.Auth.ContractManagementTest" assertions="1" time="1.061934"/>
        <testcase name="test access roles to detach a document from a contract with data set &quot;('Provider', 403)&quot;" file="tests\Tenant\Auth\ContractManagementTest.php::test access roles to detach a document from a contract with data set &quot;('Provider', 403)&quot;" class="Tests\Tenant\Auth\ContractManagementTest" classname="Tests.Tenant.Auth.ContractManagementTest" assertions="1" time="1.015944"/>
      </testsuite>
    </testsuite>
    <testsuite name="Tests\Tenant\Auth\FloorManagementTest" file="tests\Tenant\Auth\FloorManagementTest.php" tests="36" assertions="36" errors="0" failures="0" skipped="0" time="38.880523">
      <testsuite name="test access roles to floor index page" tests="3" assertions="3" errors="0" failures="0" skipped="0" time="3.074160">
        <testcase name="test access roles to floor index page with data set &quot;('Admin', 200)&quot;" file="tests\Tenant\Auth\FloorManagementTest.php::test access roles to floor index page with data set &quot;('Admin', 200)&quot;" class="Tests\Tenant\Auth\FloorManagementTest" classname="Tests.Tenant.Auth.FloorManagementTest" assertions="1" time="0.975939"/>
        <testcase name="test access roles to floor index page with data set &quot;('Maintenance Manager', 403)&quot;" file="tests\Tenant\Auth\FloorManagementTest.php::test access roles to floor index page with data set &quot;('Maintenance Manager', 403)&quot;" class="Tests\Tenant\Auth\FloorManagementTest" classname="Tests.Tenant.Auth.FloorManagementTest" assertions="1" time="0.988760"/>
        <testcase name="test access roles to floor index page with data set &quot;('Provider', 403)&quot;" file="tests\Tenant\Auth\FloorManagementTest.php::test access roles to floor index page with data set &quot;('Provider', 403)&quot;" class="Tests\Tenant\Auth\FloorManagementTest" classname="Tests.Tenant.Auth.FloorManagementTest" assertions="1" time="1.109461"/>
      </testsuite>
      <testsuite name="test access roles to create floor page" tests="3" assertions="3" errors="0" failures="0" skipped="0" time="2.883891">
        <testcase name="test access roles to create floor page with data set &quot;('Admin', 200)&quot;" file="tests\Tenant\Auth\FloorManagementTest.php::test access roles to create floor page with data set &quot;('Admin', 200)&quot;" class="Tests\Tenant\Auth\FloorManagementTest" classname="Tests.Tenant.Auth.FloorManagementTest" assertions="1" time="0.972985"/>
        <testcase name="test access roles to create floor page with data set &quot;('Maintenance Manager', 403)&quot;" file="tests\Tenant\Auth\FloorManagementTest.php::test access roles to create floor page with data set &quot;('Maintenance Manager', 403)&quot;" class="Tests\Tenant\Auth\FloorManagementTest" classname="Tests.Tenant.Auth.FloorManagementTest" assertions="1" time="0.942693"/>
        <testcase name="test access roles to create floor page with data set &quot;('Provider', 403)&quot;" file="tests\Tenant\Auth\FloorManagementTest.php::test access roles to create floor page with data set &quot;('Provider', 403)&quot;" class="Tests\Tenant\Auth\FloorManagementTest" classname="Tests.Tenant.Auth.FloorManagementTest" assertions="1" time="0.968214"/>
      </testsuite>
      <testsuite name="test access roles to view any floor page" tests="3" assertions="3" errors="0" failures="0" skipped="0" time="2.961991">
        <testcase name="test access roles to view any floor page with data set &quot;('Admin', 200)&quot;" file="tests\Tenant\Auth\FloorManagementTest.php::test access roles to view any floor page with data set &quot;('Admin', 200)&quot;" class="Tests\Tenant\Auth\FloorManagementTest" classname="Tests.Tenant.Auth.FloorManagementTest" assertions="1" time="1.149605"/>
        <testcase name="test access roles to view any floor page with data set &quot;('Maintenance Manager', 403)&quot;" file="tests\Tenant\Auth\FloorManagementTest.php::test access roles to view any floor page with data set &quot;('Maintenance Manager', 403)&quot;" class="Tests\Tenant\Auth\FloorManagementTest" classname="Tests.Tenant.Auth.FloorManagementTest" assertions="1" time="0.942159"/>
        <testcase name="test access roles to view any floor page with data set &quot;('Provider', 403)&quot;" file="tests\Tenant\Auth\FloorManagementTest.php::test access roles to view any floor page with data set &quot;('Provider', 403)&quot;" class="Tests\Tenant\Auth\FloorManagementTest" classname="Tests.Tenant.Auth.FloorManagementTest" assertions="1" time="0.870226"/>
      </testsuite>
      <testsuite name="test access roles to view floor with maintenance manager page" tests="3" assertions="3" errors="0" failures="0" skipped="0" time="2.729710">
        <testcase name="test access roles to view floor with maintenance manager page with data set &quot;('Admin', 200)&quot;" file="tests\Tenant\Auth\FloorManagementTest.php::test access roles to view floor with maintenance manager page with data set &quot;('Admin', 200)&quot;" class="Tests\Tenant\Auth\FloorManagementTest" classname="Tests.Tenant.Auth.FloorManagementTest" assertions="1" time="0.927167"/>
        <testcase name="test access roles to view floor with maintenance manager page with data set &quot;('Maintenance Manager', 200)&quot;" file="tests\Tenant\Auth\FloorManagementTest.php::test access roles to view floor with maintenance manager page with data set &quot;('Maintenance Manager', 200)&quot;" class="Tests\Tenant\Auth\FloorManagementTest" classname="Tests.Tenant.Auth.FloorManagementTest" assertions="1" time="0.912800"/>
        <testcase name="test access roles to view floor with maintenance manager page with data set &quot;('Provider', 403)&quot;" file="tests\Tenant\Auth\FloorManagementTest.php::test access roles to view floor with maintenance manager page with data set &quot;('Provider', 403)&quot;" class="Tests\Tenant\Auth\FloorManagementTest" classname="Tests.Tenant.Auth.FloorManagementTest" assertions="1" time="0.889742"/>
      </testsuite>
      <testsuite name="test access roles to store a floor" tests="3" assertions="3" errors="0" failures="0" skipped="0" time="2.580805">
        <testcase name="test access roles to store a floor with data set &quot;('Admin', 200)&quot;" file="tests\Tenant\Auth\FloorManagementTest.php::test access roles to store a floor with data set &quot;('Admin', 200)&quot;" class="Tests\Tenant\Auth\FloorManagementTest" classname="Tests.Tenant.Auth.FloorManagementTest" assertions="1" time="0.858736"/>
        <testcase name="test access roles to store a floor with data set &quot;('Maintenance Manager', 403)&quot;" file="tests\Tenant\Auth\FloorManagementTest.php::test access roles to store a floor with data set &quot;('Maintenance Manager', 403)&quot;" class="Tests\Tenant\Auth\FloorManagementTest" classname="Tests.Tenant.Auth.FloorManagementTest" assertions="1" time="0.867464"/>
        <testcase name="test access roles to store a floor with data set &quot;('Provider', 403)&quot;" file="tests\Tenant\Auth\FloorManagementTest.php::test access roles to store a floor with data set &quot;('Provider', 403)&quot;" class="Tests\Tenant\Auth\FloorManagementTest" classname="Tests.Tenant.Auth.FloorManagementTest" assertions="1" time="0.854604"/>
      </testsuite>
      <testsuite name="test access roles to update any asset page" tests="3" assertions="3" errors="0" failures="0" skipped="0" time="3.550770">
        <testcase name="test access roles to update any asset page with data set &quot;('Admin', 200)&quot;" file="tests\Tenant\Auth\FloorManagementTest.php::test access roles to update any asset page with data set &quot;('Admin', 200)&quot;" class="Tests\Tenant\Auth\FloorManagementTest" classname="Tests.Tenant.Auth.FloorManagementTest" assertions="1" time="1.120394"/>
        <testcase name="test access roles to update any asset page with data set &quot;('Maintenance Manager', 403)&quot;" file="tests\Tenant\Auth\FloorManagementTest.php::test access roles to update any asset page with data set &quot;('Maintenance Manager', 403)&quot;" class="Tests\Tenant\Auth\FloorManagementTest" classname="Tests.Tenant.Auth.FloorManagementTest" assertions="1" time="1.183706"/>
        <testcase name="test access roles to update any asset page with data set &quot;('Provider', 403)&quot;" file="tests\Tenant\Auth\FloorManagementTest.php::test access roles to update any asset page with data set &quot;('Provider', 403)&quot;" class="Tests\Tenant\Auth\FloorManagementTest" classname="Tests.Tenant.Auth.FloorManagementTest" assertions="1" time="1.246671"/>
      </testsuite>
      <testsuite name="test access roles to update floor with maintenance manager page" tests="3" assertions="3" errors="0" failures="0" skipped="0" time="3.815239">
        <testcase name="test access roles to update floor with maintenance manager page with data set &quot;('Admin', 200)&quot;" file="tests\Tenant\Auth\FloorManagementTest.php::test access roles to update floor with maintenance manager page with data set &quot;('Admin', 200)&quot;" class="Tests\Tenant\Auth\FloorManagementTest" classname="Tests.Tenant.Auth.FloorManagementTest" assertions="1" time="1.315123"/>
        <testcase name="test access roles to update floor with maintenance manager page with data set &quot;('Maintenance Manager', 200)&quot;" file="tests\Tenant\Auth\FloorManagementTest.php::test access roles to update floor with maintenance manager page with data set &quot;('Maintenance Manager', 200)&quot;" class="Tests\Tenant\Auth\FloorManagementTest" classname="Tests.Tenant.Auth.FloorManagementTest" assertions="1" time="1.292361"/>
        <testcase name="test access roles to update floor with maintenance manager page with data set &quot;('Provider', 403)&quot;" file="tests\Tenant\Auth\FloorManagementTest.php::test access roles to update floor with maintenance manager page with data set &quot;('Provider', 403)&quot;" class="Tests\Tenant\Auth\FloorManagementTest" classname="Tests.Tenant.Auth.FloorManagementTest" assertions="1" time="1.207755"/>
      </testsuite>
      <testsuite name="test access roles to update floor with maintenance manager" tests="3" assertions="3" errors="0" failures="0" skipped="0" time="3.432357">
        <testcase name="test access roles to update floor with maintenance manager with data set &quot;('Admin', 200)&quot;" file="tests\Tenant\Auth\FloorManagementTest.php::test access roles to update floor with maintenance manager with data set &quot;('Admin', 200)&quot;" class="Tests\Tenant\Auth\FloorManagementTest" classname="Tests.Tenant.Auth.FloorManagementTest" assertions="1" time="1.074663"/>
        <testcase name="test access roles to update floor with maintenance manager with data set &quot;('Maintenance Manager', 200)&quot;" file="tests\Tenant\Auth\FloorManagementTest.php::test access roles to update floor with maintenance manager with data set &quot;('Maintenance Manager', 200)&quot;" class="Tests\Tenant\Auth\FloorManagementTest" classname="Tests.Tenant.Auth.FloorManagementTest" assertions="1" time="1.176123"/>
        <testcase name="test access roles to update floor with maintenance manager with data set &quot;('Provider', 403)&quot;" file="tests\Tenant\Auth\FloorManagementTest.php::test access roles to update floor with maintenance manager with data set &quot;('Provider', 403)&quot;" class="Tests\Tenant\Auth\FloorManagementTest" classname="Tests.Tenant.Auth.FloorManagementTest" assertions="1" time="1.181571"/>
      </testsuite>
      <testsuite name="test access roles to delete any floor" tests="3" assertions="3" errors="0" failures="0" skipped="0" time="2.992707">
        <testcase name="test access roles to delete any floor with data set &quot;('Admin', 200)&quot;" file="tests\Tenant\Auth\FloorManagementTest.php::test access roles to delete any floor with data set &quot;('Admin', 200)&quot;" class="Tests\Tenant\Auth\FloorManagementTest" classname="Tests.Tenant.Auth.FloorManagementTest" assertions="1" time="1.007459"/>
        <testcase name="test access roles to delete any floor with data set &quot;('Maintenance Manager', 403)&quot;" file="tests\Tenant\Auth\FloorManagementTest.php::test access roles to delete any floor with data set &quot;('Maintenance Manager', 403)&quot;" class="Tests\Tenant\Auth\FloorManagementTest" classname="Tests.Tenant.Auth.FloorManagementTest" assertions="1" time="0.892171"/>
        <testcase name="test access roles to delete any floor with data set &quot;('Provider', 403)&quot;" file="tests\Tenant\Auth\FloorManagementTest.php::test access roles to delete any floor with data set &quot;('Provider', 403)&quot;" class="Tests\Tenant\Auth\FloorManagementTest" classname="Tests.Tenant.Auth.FloorManagementTest" assertions="1" time="1.093078"/>
      </testsuite>
      <testsuite name="test access roles to delete floor with maintenance manager" tests="3" assertions="3" errors="0" failures="0" skipped="0" time="2.676880">
        <testcase name="test access roles to delete floor with maintenance manager with data set &quot;('Admin', 200)&quot;" file="tests\Tenant\Auth\FloorManagementTest.php::test access roles to delete floor with maintenance manager with data set &quot;('Admin', 200)&quot;" class="Tests\Tenant\Auth\FloorManagementTest" classname="Tests.Tenant.Auth.FloorManagementTest" assertions="1" time="0.902202"/>
        <testcase name="test access roles to delete floor with maintenance manager with data set &quot;('Maintenance Manager', 403)&quot;" file="tests\Tenant\Auth\FloorManagementTest.php::test access roles to delete floor with maintenance manager with data set &quot;('Maintenance Manager', 403)&quot;" class="Tests\Tenant\Auth\FloorManagementTest" classname="Tests.Tenant.Auth.FloorManagementTest" assertions="1" time="0.896637"/>
        <testcase name="test access roles to delete floor with maintenance manager with data set &quot;('Provider', 403)&quot;" file="tests\Tenant\Auth\FloorManagementTest.php::test access roles to delete floor with maintenance manager with data set &quot;('Provider', 403)&quot;" class="Tests\Tenant\Auth\FloorManagementTest" classname="Tests.Tenant.Auth.FloorManagementTest" assertions="1" time="0.878041"/>
      </testsuite>
      <testsuite name="cannot regenerate a QR Code if user is not maintenance manager from the floor" tests="3" assertions="3" errors="0" failures="0" skipped="0" time="3.338499">
        <testcase name="cannot regenerate a QR Code if user is not maintenance manager from the floor with data set &quot;('Admin', 200)&quot;" file="tests\Tenant\Auth\FloorManagementTest.php::cannot regenerate a QR Code if user is not maintenance manager from the floor with data set &quot;('Admin', 200)&quot;" class="Tests\Tenant\Auth\FloorManagementTest" classname="Tests.Tenant.Auth.FloorManagementTest" assertions="1" time="1.561030"/>
        <testcase name="cannot regenerate a QR Code if user is not maintenance manager from the floor with data set &quot;('Maintenance Manager', 403)&quot;" file="tests\Tenant\Auth\FloorManagementTest.php::cannot regenerate a QR Code if user is not maintenance manager from the floor with data set &quot;('Maintenance Manager', 403)&quot;" class="Tests\Tenant\Auth\FloorManagementTest" classname="Tests.Tenant.Auth.FloorManagementTest" assertions="1" time="0.851275"/>
        <testcase name="cannot regenerate a QR Code if user is not maintenance manager from the floor with data set &quot;('Provider', 403)&quot;" file="tests\Tenant\Auth\FloorManagementTest.php::cannot regenerate a QR Code if user is not maintenance manager from the floor with data set &quot;('Provider', 403)&quot;" class="Tests\Tenant\Auth\FloorManagementTest" classname="Tests.Tenant.Auth.FloorManagementTest" assertions="1" time="0.926194"/>
      </testsuite>
      <testsuite name="can regenerate a QR Code if user is not maintenance manager from the floor" tests="3" assertions="3" errors="0" failures="0" skipped="0" time="4.843515">
        <testcase name="can regenerate a QR Code if user is not maintenance manager from the floor with data set &quot;('Admin', 200)&quot;" file="tests\Tenant\Auth\FloorManagementTest.php::can regenerate a QR Code if user is not maintenance manager from the floor with data set &quot;('Admin', 200)&quot;" class="Tests\Tenant\Auth\FloorManagementTest" classname="Tests.Tenant.Auth.FloorManagementTest" assertions="1" time="1.583547"/>
        <testcase name="can regenerate a QR Code if user is not maintenance manager from the floor with data set &quot;('Maintenance Manager', 200)&quot;" file="tests\Tenant\Auth\FloorManagementTest.php::can regenerate a QR Code if user is not maintenance manager from the floor with data set &quot;('Maintenance Manager', 200)&quot;" class="Tests\Tenant\Auth\FloorManagementTest" classname="Tests.Tenant.Auth.FloorManagementTest" assertions="1" time="2.050823"/>
        <testcase name="can regenerate a QR Code if user is not maintenance manager from the floor with data set &quot;('Provider', 403)&quot;" file="tests\Tenant\Auth\FloorManagementTest.php::can regenerate a QR Code if user is not maintenance manager from the floor with data set &quot;('Provider', 403)&quot;" class="Tests\Tenant\Auth\FloorManagementTest" classname="Tests.Tenant.Auth.FloorManagementTest" assertions="1" time="1.209145"/>
      </testsuite>
    </testsuite>
    <testsuite name="Tests\Tenant\Auth\ProviderManagementTest" file="tests\Tenant\Auth\ProviderManagementTest.php" tests="30" assertions="30" errors="0" failures="0" skipped="0" time="32.296088">
      <testsuite name="test access roles to providers index page" tests="3" assertions="3" errors="0" failures="0" skipped="0" time="3.663514">
        <testcase name="test access roles to providers index page with data set &quot;('Admin', 200)&quot;" file="tests\Tenant\Auth\ProviderManagementTest.php::test access roles to providers index page with data set &quot;('Admin', 200)&quot;" class="Tests\Tenant\Auth\ProviderManagementTest" classname="Tests.Tenant.Auth.ProviderManagementTest" assertions="1" time="1.599580"/>
        <testcase name="test access roles to providers index page with data set &quot;('Maintenance Manager', 200)&quot;" file="tests\Tenant\Auth\ProviderManagementTest.php::test access roles to providers index page with data set &quot;('Maintenance Manager', 200)&quot;" class="Tests\Tenant\Auth\ProviderManagementTest" classname="Tests.Tenant.Auth.ProviderManagementTest" assertions="1" time="1.134413"/>
        <testcase name="test access roles to providers index page with data set &quot;('Provider', 403)&quot;" file="tests\Tenant\Auth\ProviderManagementTest.php::test access roles to providers index page with data set &quot;('Provider', 403)&quot;" class="Tests\Tenant\Auth\ProviderManagementTest" classname="Tests.Tenant.Auth.ProviderManagementTest" assertions="1" time="0.929521"/>
      </testsuite>
      <testsuite name="test access roles to create provider page" tests="3" assertions="3" errors="0" failures="0" skipped="0" time="2.845801">
        <testcase name="test access roles to create provider page with data set &quot;('Admin', 200)&quot;" file="tests\Tenant\Auth\ProviderManagementTest.php::test access roles to create provider page with data set &quot;('Admin', 200)&quot;" class="Tests\Tenant\Auth\ProviderManagementTest" classname="Tests.Tenant.Auth.ProviderManagementTest" assertions="1" time="0.946763"/>
        <testcase name="test access roles to create provider page with data set &quot;('Maintenance Manager', 200)&quot;" file="tests\Tenant\Auth\ProviderManagementTest.php::test access roles to create provider page with data set &quot;('Maintenance Manager', 200)&quot;" class="Tests\Tenant\Auth\ProviderManagementTest" classname="Tests.Tenant.Auth.ProviderManagementTest" assertions="1" time="0.960790"/>
        <testcase name="test access roles to create provider page with data set &quot;('Provider', 403)&quot;" file="tests\Tenant\Auth\ProviderManagementTest.php::test access roles to create provider page with data set &quot;('Provider', 403)&quot;" class="Tests\Tenant\Auth\ProviderManagementTest" classname="Tests.Tenant.Auth.ProviderManagementTest" assertions="1" time="0.938248"/>
      </testsuite>
      <testsuite name="test access roles to view any provider page" tests="3" assertions="3" errors="0" failures="0" skipped="0" time="2.932617">
        <testcase name="test access roles to view any provider page with data set &quot;('Admin', 200)&quot;" file="tests\Tenant\Auth\ProviderManagementTest.php::test access roles to view any provider page with data set &quot;('Admin', 200)&quot;" class="Tests\Tenant\Auth\ProviderManagementTest" classname="Tests.Tenant.Auth.ProviderManagementTest" assertions="1" time="0.959075"/>
        <testcase name="test access roles to view any provider page with data set &quot;('Maintenance Manager', 200)&quot;" file="tests\Tenant\Auth\ProviderManagementTest.php::test access roles to view any provider page with data set &quot;('Maintenance Manager', 200)&quot;" class="Tests\Tenant\Auth\ProviderManagementTest" classname="Tests.Tenant.Auth.ProviderManagementTest" assertions="1" time="0.992096"/>
        <testcase name="test access roles to view any provider page with data set &quot;('Provider', 403)&quot;" file="tests\Tenant\Auth\ProviderManagementTest.php::test access roles to view any provider page with data set &quot;('Provider', 403)&quot;" class="Tests\Tenant\Auth\ProviderManagementTest" classname="Tests.Tenant.Auth.ProviderManagementTest" assertions="1" time="0.981446"/>
      </testsuite>
      <testsuite name="test access roles to store a provider" tests="3" assertions="3" errors="0" failures="0" skipped="0" time="2.957455">
        <testcase name="test access roles to store a provider with data set &quot;('Admin', 200)&quot;" file="tests\Tenant\Auth\ProviderManagementTest.php::test access roles to store a provider with data set &quot;('Admin', 200)&quot;" class="Tests\Tenant\Auth\ProviderManagementTest" classname="Tests.Tenant.Auth.ProviderManagementTest" assertions="1" time="0.973350"/>
        <testcase name="test access roles to store a provider with data set &quot;('Maintenance Manager', 200)&quot;" file="tests\Tenant\Auth\ProviderManagementTest.php::test access roles to store a provider with data set &quot;('Maintenance Manager', 200)&quot;" class="Tests\Tenant\Auth\ProviderManagementTest" classname="Tests.Tenant.Auth.ProviderManagementTest" assertions="1" time="1.010520"/>
        <testcase name="test access roles to store a provider with data set &quot;('Provider', 403)&quot;" file="tests\Tenant\Auth\ProviderManagementTest.php::test access roles to store a provider with data set &quot;('Provider', 403)&quot;" class="Tests\Tenant\Auth\ProviderManagementTest" classname="Tests.Tenant.Auth.ProviderManagementTest" assertions="1" time="0.973585"/>
      </testsuite>
      <testsuite name="test access roles to update any provider page" tests="3" assertions="3" errors="0" failures="0" skipped="0" time="3.226941">
        <testcase name="test access roles to update any provider page with data set &quot;('Admin', 200)&quot;" file="tests\Tenant\Auth\ProviderManagementTest.php::test access roles to update any provider page with data set &quot;('Admin', 200)&quot;" class="Tests\Tenant\Auth\ProviderManagementTest" classname="Tests.Tenant.Auth.ProviderManagementTest" assertions="1" time="1.130324"/>
        <testcase name="test access roles to update any provider page with data set &quot;('Maintenance Manager', 200)&quot;" file="tests\Tenant\Auth\ProviderManagementTest.php::test access roles to update any provider page with data set &quot;('Maintenance Manager', 200)&quot;" class="Tests\Tenant\Auth\ProviderManagementTest" classname="Tests.Tenant.Auth.ProviderManagementTest" assertions="1" time="1.100787"/>
        <testcase name="test access roles to update any provider page with data set &quot;('Provider', 403)&quot;" file="tests\Tenant\Auth\ProviderManagementTest.php::test access roles to update any provider page with data set &quot;('Provider', 403)&quot;" class="Tests\Tenant\Auth\ProviderManagementTest" classname="Tests.Tenant.Auth.ProviderManagementTest" assertions="1" time="0.995829"/>
      </testsuite>
      <testsuite name="test access roles to update a provider" tests="3" assertions="3" errors="0" failures="0" skipped="0" time="3.126308">
        <testcase name="test access roles to update a provider with data set &quot;('Admin', 200)&quot;" file="tests\Tenant\Auth\ProviderManagementTest.php::test access roles to update a provider with data set &quot;('Admin', 200)&quot;" class="Tests\Tenant\Auth\ProviderManagementTest" classname="Tests.Tenant.Auth.ProviderManagementTest" assertions="1" time="1.014281"/>
        <testcase name="test access roles to update a provider with data set &quot;('Maintenance Manager', 200)&quot;" file="tests\Tenant\Auth\ProviderManagementTest.php::test access roles to update a provider with data set &quot;('Maintenance Manager', 200)&quot;" class="Tests\Tenant\Auth\ProviderManagementTest" classname="Tests.Tenant.Auth.ProviderManagementTest" assertions="1" time="1.053073"/>
        <testcase name="test access roles to update a provider with data set &quot;('Provider', 403)&quot;" file="tests\Tenant\Auth\ProviderManagementTest.php::test access roles to update a provider with data set &quot;('Provider', 403)&quot;" class="Tests\Tenant\Auth\ProviderManagementTest" classname="Tests.Tenant.Auth.ProviderManagementTest" assertions="1" time="1.058953"/>
      </testsuite>
      <testsuite name="test access roles to provider page" tests="3" assertions="3" errors="0" failures="0" skipped="0" time="3.217494">
        <testcase name="test access roles to provider page with data set &quot;('Admin', 200)&quot;" file="tests\Tenant\Auth\ProviderManagementTest.php::test access roles to provider page with data set &quot;('Admin', 200)&quot;" class="Tests\Tenant\Auth\ProviderManagementTest" classname="Tests.Tenant.Auth.ProviderManagementTest" assertions="1" time="1.181800"/>
        <testcase name="test access roles to provider page with data set &quot;('Maintenance Manager', 200)&quot;" file="tests\Tenant\Auth\ProviderManagementTest.php::test access roles to provider page with data set &quot;('Maintenance Manager', 200)&quot;" class="Tests\Tenant\Auth\ProviderManagementTest" classname="Tests.Tenant.Auth.ProviderManagementTest" assertions="1" time="0.996812"/>
        <testcase name="test access roles to provider page with data set &quot;('Provider', 403)&quot;" file="tests\Tenant\Auth\ProviderManagementTest.php::test access roles to provider page with data set &quot;('Provider', 403)&quot;" class="Tests\Tenant\Auth\ProviderManagementTest" classname="Tests.Tenant.Auth.ProviderManagementTest" assertions="1" time="1.038881"/>
      </testsuite>
      <testsuite name="test access roles to delete any provider" tests="3" assertions="3" errors="0" failures="0" skipped="0" time="3.390672">
        <testcase name="test access roles to delete any provider with data set &quot;('Admin', 200)&quot;" file="tests\Tenant\Auth\ProviderManagementTest.php::test access roles to delete any provider with data set &quot;('Admin', 200)&quot;" class="Tests\Tenant\Auth\ProviderManagementTest" classname="Tests.Tenant.Auth.ProviderManagementTest" assertions="1" time="1.117837"/>
        <testcase name="test access roles to delete any provider with data set &quot;('Maintenance Manager', 403)&quot;" file="tests\Tenant\Auth\ProviderManagementTest.php::test access roles to delete any provider with data set &quot;('Maintenance Manager', 403)&quot;" class="Tests\Tenant\Auth\ProviderManagementTest" classname="Tests.Tenant.Auth.ProviderManagementTest" assertions="1" time="1.266958"/>
        <testcase name="test access roles to delete any provider with data set &quot;('Provider', 403)&quot;" file="tests\Tenant\Auth\ProviderManagementTest.php::test access roles to delete any provider with data set &quot;('Provider', 403)&quot;" class="Tests\Tenant\Auth\ProviderManagementTest" classname="Tests.Tenant.Auth.ProviderManagementTest" assertions="1" time="1.005877"/>
      </testsuite>
      <testsuite name="test access roles to post a new logo to a provider" tests="3" assertions="3" errors="0" failures="0" skipped="0" time="3.390152">
        <testcase name="test access roles to post a new logo to a provider with data set &quot;('Admin', 200)&quot;" file="tests\Tenant\Auth\ProviderManagementTest.php::test access roles to post a new logo to a provider with data set &quot;('Admin', 200)&quot;" class="Tests\Tenant\Auth\ProviderManagementTest" classname="Tests.Tenant.Auth.ProviderManagementTest" assertions="1" time="1.167366"/>
        <testcase name="test access roles to post a new logo to a provider with data set &quot;('Maintenance Manager', 200)&quot;" file="tests\Tenant\Auth\ProviderManagementTest.php::test access roles to post a new logo to a provider with data set &quot;('Maintenance Manager', 200)&quot;" class="Tests\Tenant\Auth\ProviderManagementTest" classname="Tests.Tenant.Auth.ProviderManagementTest" assertions="1" time="1.105031"/>
        <testcase name="test access roles to post a new logo to a provider with data set &quot;('Provider', 403)&quot;" file="tests\Tenant\Auth\ProviderManagementTest.php::test access roles to post a new logo to a provider with data set &quot;('Provider', 403)&quot;" class="Tests\Tenant\Auth\ProviderManagementTest" classname="Tests.Tenant.Auth.ProviderManagementTest" assertions="1" time="1.117756"/>
      </testsuite>
      <testsuite name="test access roles to delete a logo of a provider" tests="3" assertions="3" errors="0" failures="0" skipped="0" time="3.545133">
        <testcase name="test access roles to delete a logo of a provider with data set &quot;('Admin', 200)&quot;" file="tests\Tenant\Auth\ProviderManagementTest.php::test access roles to delete a logo of a provider with data set &quot;('Admin', 200)&quot;" class="Tests\Tenant\Auth\ProviderManagementTest" classname="Tests.Tenant.Auth.ProviderManagementTest" assertions="1" time="1.299115"/>
        <testcase name="test access roles to delete a logo of a provider with data set &quot;('Maintenance Manager', 200)&quot;" file="tests\Tenant\Auth\ProviderManagementTest.php::test access roles to delete a logo of a provider with data set &quot;('Maintenance Manager', 200)&quot;" class="Tests\Tenant\Auth\ProviderManagementTest" classname="Tests.Tenant.Auth.ProviderManagementTest" assertions="1" time="1.219032"/>
        <testcase name="test access roles to delete a logo of a provider with data set &quot;('Provider', 403)&quot;" file="tests\Tenant\Auth\ProviderManagementTest.php::test access roles to delete a logo of a provider with data set &quot;('Provider', 403)&quot;" class="Tests\Tenant\Auth\ProviderManagementTest" classname="Tests.Tenant.Auth.ProviderManagementTest" assertions="1" time="1.026986"/>
      </testsuite>
    </testsuite>
    <testsuite name="Tests\Tenant\Auth\RoomManagementTest" file="tests\Tenant\Auth\RoomManagementTest.php" tests="36" assertions="36" errors="0" failures="0" skipped="0" time="40.374706">
      <testsuite name="test access roles to room index page" tests="3" assertions="3" errors="0" failures="0" skipped="0" time="3.029746">
        <testcase name="test access roles to room index page with data set &quot;('Admin', 200)&quot;" file="tests\Tenant\Auth\RoomManagementTest.php::test access roles to room index page with data set &quot;('Admin', 200)&quot;" class="Tests\Tenant\Auth\RoomManagementTest" classname="Tests.Tenant.Auth.RoomManagementTest" assertions="1" time="1.064399"/>
        <testcase name="test access roles to room index page with data set &quot;('Maintenance Manager', 403)&quot;" file="tests\Tenant\Auth\RoomManagementTest.php::test access roles to room index page with data set &quot;('Maintenance Manager', 403)&quot;" class="Tests\Tenant\Auth\RoomManagementTest" classname="Tests.Tenant.Auth.RoomManagementTest" assertions="1" time="0.998858"/>
        <testcase name="test access roles to room index page with data set &quot;('Provider', 403)&quot;" file="tests\Tenant\Auth\RoomManagementTest.php::test access roles to room index page with data set &quot;('Provider', 403)&quot;" class="Tests\Tenant\Auth\RoomManagementTest" classname="Tests.Tenant.Auth.RoomManagementTest" assertions="1" time="0.966490"/>
      </testsuite>
      <testsuite name="test access roles to create room page" tests="3" assertions="3" errors="0" failures="0" skipped="0" time="2.873622">
        <testcase name="test access roles to create room page with data set &quot;('Admin', 200)&quot;" file="tests\Tenant\Auth\RoomManagementTest.php::test access roles to create room page with data set &quot;('Admin', 200)&quot;" class="Tests\Tenant\Auth\RoomManagementTest" classname="Tests.Tenant.Auth.RoomManagementTest" assertions="1" time="0.953587"/>
        <testcase name="test access roles to create room page with data set &quot;('Maintenance Manager', 403)&quot;" file="tests\Tenant\Auth\RoomManagementTest.php::test access roles to create room page with data set &quot;('Maintenance Manager', 403)&quot;" class="Tests\Tenant\Auth\RoomManagementTest" classname="Tests.Tenant.Auth.RoomManagementTest" assertions="1" time="0.950820"/>
        <testcase name="test access roles to create room page with data set &quot;('Provider', 403)&quot;" file="tests\Tenant\Auth\RoomManagementTest.php::test access roles to create room page with data set &quot;('Provider', 403)&quot;" class="Tests\Tenant\Auth\RoomManagementTest" classname="Tests.Tenant.Auth.RoomManagementTest" assertions="1" time="0.969214"/>
      </testsuite>
      <testsuite name="test access roles to view any room page" tests="3" assertions="3" errors="0" failures="0" skipped="0" time="2.912691">
        <testcase name="test access roles to view any room page with data set &quot;('Admin', 200)&quot;" file="tests\Tenant\Auth\RoomManagementTest.php::test access roles to view any room page with data set &quot;('Admin', 200)&quot;" class="Tests\Tenant\Auth\RoomManagementTest" classname="Tests.Tenant.Auth.RoomManagementTest" assertions="1" time="1.001162"/>
        <testcase name="test access roles to view any room page with data set &quot;('Maintenance Manager', 403)&quot;" file="tests\Tenant\Auth\RoomManagementTest.php::test access roles to view any room page with data set &quot;('Maintenance Manager', 403)&quot;" class="Tests\Tenant\Auth\RoomManagementTest" classname="Tests.Tenant.Auth.RoomManagementTest" assertions="1" time="0.963365"/>
        <testcase name="test access roles to view any room page with data set &quot;('Provider', 403)&quot;" file="tests\Tenant\Auth\RoomManagementTest.php::test access roles to view any room page with data set &quot;('Provider', 403)&quot;" class="Tests\Tenant\Auth\RoomManagementTest" classname="Tests.Tenant.Auth.RoomManagementTest" assertions="1" time="0.948163"/>
      </testsuite>
      <testsuite name="test access roles to view room with maintenance manager page" tests="3" assertions="3" errors="0" failures="0" skipped="0" time="3.420518">
        <testcase name="test access roles to view room with maintenance manager page with data set &quot;('Admin', 200)&quot;" file="tests\Tenant\Auth\RoomManagementTest.php::test access roles to view room with maintenance manager page with data set &quot;('Admin', 200)&quot;" class="Tests\Tenant\Auth\RoomManagementTest" classname="Tests.Tenant.Auth.RoomManagementTest" assertions="1" time="1.139499"/>
        <testcase name="test access roles to view room with maintenance manager page with data set &quot;('Maintenance Manager', 200)&quot;" file="tests\Tenant\Auth\RoomManagementTest.php::test access roles to view room with maintenance manager page with data set &quot;('Maintenance Manager', 200)&quot;" class="Tests\Tenant\Auth\RoomManagementTest" classname="Tests.Tenant.Auth.RoomManagementTest" assertions="1" time="1.308601"/>
        <testcase name="test access roles to view room with maintenance manager page with data set &quot;('Provider', 403)&quot;" file="tests\Tenant\Auth\RoomManagementTest.php::test access roles to view room with maintenance manager page with data set &quot;('Provider', 403)&quot;" class="Tests\Tenant\Auth\RoomManagementTest" classname="Tests.Tenant.Auth.RoomManagementTest" assertions="1" time="0.972418"/>
      </testsuite>
      <testsuite name="test access roles to store a room" tests="3" assertions="3" errors="0" failures="0" skipped="0" time="3.419477">
        <testcase name="test access roles to store a room with data set &quot;('Admin', 200)&quot;" file="tests\Tenant\Auth\RoomManagementTest.php::test access roles to store a room with data set &quot;('Admin', 200)&quot;" class="Tests\Tenant\Auth\RoomManagementTest" classname="Tests.Tenant.Auth.RoomManagementTest" assertions="1" time="0.974638"/>
        <testcase name="test access roles to store a room with data set &quot;('Maintenance Manager', 403)&quot;" file="tests\Tenant\Auth\RoomManagementTest.php::test access roles to store a room with data set &quot;('Maintenance Manager', 403)&quot;" class="Tests\Tenant\Auth\RoomManagementTest" classname="Tests.Tenant.Auth.RoomManagementTest" assertions="1" time="1.308295"/>
        <testcase name="test access roles to store a room with data set &quot;('Provider', 403)&quot;" file="tests\Tenant\Auth\RoomManagementTest.php::test access roles to store a room with data set &quot;('Provider', 403)&quot;" class="Tests\Tenant\Auth\RoomManagementTest" classname="Tests.Tenant.Auth.RoomManagementTest" assertions="1" time="1.136544"/>
      </testsuite>
      <testsuite name="test access roles to update any asset page" tests="3" assertions="3" errors="0" failures="0" skipped="0" time="3.279522">
        <testcase name="test access roles to update any asset page with data set &quot;('Admin', 200)&quot;" file="tests\Tenant\Auth\RoomManagementTest.php::test access roles to update any asset page with data set &quot;('Admin', 200)&quot;" class="Tests\Tenant\Auth\RoomManagementTest" classname="Tests.Tenant.Auth.RoomManagementTest" assertions="1" time="1.124825"/>
        <testcase name="test access roles to update any asset page with data set &quot;('Maintenance Manager', 403)&quot;" file="tests\Tenant\Auth\RoomManagementTest.php::test access roles to update any asset page with data set &quot;('Maintenance Manager', 403)&quot;" class="Tests\Tenant\Auth\RoomManagementTest" classname="Tests.Tenant.Auth.RoomManagementTest" assertions="1" time="1.179958"/>
        <testcase name="test access roles to update any asset page with data set &quot;('Provider', 403)&quot;" file="tests\Tenant\Auth\RoomManagementTest.php::test access roles to update any asset page with data set &quot;('Provider', 403)&quot;" class="Tests\Tenant\Auth\RoomManagementTest" classname="Tests.Tenant.Auth.RoomManagementTest" assertions="1" time="0.974740"/>
      </testsuite>
      <testsuite name="test access roles to update room with maintenance manager page" tests="3" assertions="3" errors="0" failures="0" skipped="0" time="2.984727">
        <testcase name="test access roles to update room with maintenance manager page with data set &quot;('Admin', 200)&quot;" file="tests\Tenant\Auth\RoomManagementTest.php::test access roles to update room with maintenance manager page with data set &quot;('Admin', 200)&quot;" class="Tests\Tenant\Auth\RoomManagementTest" classname="Tests.Tenant.Auth.RoomManagementTest" assertions="1" time="1.006376"/>
        <testcase name="test access roles to update room with maintenance manager page with data set &quot;('Maintenance Manager', 200)&quot;" file="tests\Tenant\Auth\RoomManagementTest.php::test access roles to update room with maintenance manager page with data set &quot;('Maintenance Manager', 200)&quot;" class="Tests\Tenant\Auth\RoomManagementTest" classname="Tests.Tenant.Auth.RoomManagementTest" assertions="1" time="1.041558"/>
        <testcase name="test access roles to update room with maintenance manager page with data set &quot;('Provider', 403)&quot;" file="tests\Tenant\Auth\RoomManagementTest.php::test access roles to update room with maintenance manager page with data set &quot;('Provider', 403)&quot;" class="Tests\Tenant\Auth\RoomManagementTest" classname="Tests.Tenant.Auth.RoomManagementTest" assertions="1" time="0.936793"/>
      </testsuite>
      <testsuite name="test access roles to update room with maintenance manager" tests="3" assertions="3" errors="0" failures="0" skipped="0" time="3.068060">
        <testcase name="test access roles to update room with maintenance manager with data set &quot;('Admin', 200)&quot;" file="tests\Tenant\Auth\RoomManagementTest.php::test access roles to update room with maintenance manager with data set &quot;('Admin', 200)&quot;" class="Tests\Tenant\Auth\RoomManagementTest" classname="Tests.Tenant.Auth.RoomManagementTest" assertions="1" time="0.967877"/>
        <testcase name="test access roles to update room with maintenance manager with data set &quot;('Maintenance Manager', 200)&quot;" file="tests\Tenant\Auth\RoomManagementTest.php::test access roles to update room with maintenance manager with data set &quot;('Maintenance Manager', 200)&quot;" class="Tests\Tenant\Auth\RoomManagementTest" classname="Tests.Tenant.Auth.RoomManagementTest" assertions="1" time="1.052144"/>
        <testcase name="test access roles to update room with maintenance manager with data set &quot;('Provider', 403)&quot;" file="tests\Tenant\Auth\RoomManagementTest.php::test access roles to update room with maintenance manager with data set &quot;('Provider', 403)&quot;" class="Tests\Tenant\Auth\RoomManagementTest" classname="Tests.Tenant.Auth.RoomManagementTest" assertions="1" time="1.048039"/>
      </testsuite>
      <testsuite name="test access roles to delete any room" tests="3" assertions="3" errors="0" failures="0" skipped="0" time="3.038139">
        <testcase name="test access roles to delete any room with data set &quot;('Admin', 200)&quot;" file="tests\Tenant\Auth\RoomManagementTest.php::test access roles to delete any room with data set &quot;('Admin', 200)&quot;" class="Tests\Tenant\Auth\RoomManagementTest" classname="Tests.Tenant.Auth.RoomManagementTest" assertions="1" time="0.965697"/>
        <testcase name="test access roles to delete any room with data set &quot;('Maintenance Manager', 403)&quot;" file="tests\Tenant\Auth\RoomManagementTest.php::test access roles to delete any room with data set &quot;('Maintenance Manager', 403)&quot;" class="Tests\Tenant\Auth\RoomManagementTest" classname="Tests.Tenant.Auth.RoomManagementTest" assertions="1" time="0.987589"/>
        <testcase name="test access roles to delete any room with data set &quot;('Provider', 403)&quot;" file="tests\Tenant\Auth\RoomManagementTest.php::test access roles to delete any room with data set &quot;('Provider', 403)&quot;" class="Tests\Tenant\Auth\RoomManagementTest" classname="Tests.Tenant.Auth.RoomManagementTest" assertions="1" time="1.084852"/>
      </testsuite>
      <testsuite name="test access roles to delete room with maintenance manager" tests="3" assertions="3" errors="0" failures="0" skipped="0" time="3.720460">
        <testcase name="test access roles to delete room with maintenance manager with data set &quot;('Admin', 200)&quot;" file="tests\Tenant\Auth\RoomManagementTest.php::test access roles to delete room with maintenance manager with data set &quot;('Admin', 200)&quot;" class="Tests\Tenant\Auth\RoomManagementTest" classname="Tests.Tenant.Auth.RoomManagementTest" assertions="1" time="1.243291"/>
        <testcase name="test access roles to delete room with maintenance manager with data set &quot;('Maintenance Manager', 403)&quot;" file="tests\Tenant\Auth\RoomManagementTest.php::test access roles to delete room with maintenance manager with data set &quot;('Maintenance Manager', 403)&quot;" class="Tests\Tenant\Auth\RoomManagementTest" classname="Tests.Tenant.Auth.RoomManagementTest" assertions="1" time="1.246688"/>
        <testcase name="test access roles to delete room with maintenance manager with data set &quot;('Provider', 403)&quot;" file="tests\Tenant\Auth\RoomManagementTest.php::test access roles to delete room with maintenance manager with data set &quot;('Provider', 403)&quot;" class="Tests\Tenant\Auth\RoomManagementTest" classname="Tests.Tenant.Auth.RoomManagementTest" assertions="1" time="1.230481"/>
      </testsuite>
      <testsuite name="cannot regenerate a QR Code if user is not maintenance manager from the room" tests="3" assertions="3" errors="0" failures="0" skipped="0" time="3.974379">
        <testcase name="cannot regenerate a QR Code if user is not maintenance manager from the room with data set &quot;('Admin', 200)&quot;" file="tests\Tenant\Auth\RoomManagementTest.php::cannot regenerate a QR Code if user is not maintenance manager from the room with data set &quot;('Admin', 200)&quot;" class="Tests\Tenant\Auth\RoomManagementTest" classname="Tests.Tenant.Auth.RoomManagementTest" assertions="1" time="1.953858"/>
        <testcase name="cannot regenerate a QR Code if user is not maintenance manager from the room with data set &quot;('Maintenance Manager', 403)&quot;" file="tests\Tenant\Auth\RoomManagementTest.php::cannot regenerate a QR Code if user is not maintenance manager from the room with data set &quot;('Maintenance Manager', 403)&quot;" class="Tests\Tenant\Auth\RoomManagementTest" classname="Tests.Tenant.Auth.RoomManagementTest" assertions="1" time="1.022559"/>
        <testcase name="cannot regenerate a QR Code if user is not maintenance manager from the room with data set &quot;('Provider', 403)&quot;" file="tests\Tenant\Auth\RoomManagementTest.php::cannot regenerate a QR Code if user is not maintenance manager from the room with data set &quot;('Provider', 403)&quot;" class="Tests\Tenant\Auth\RoomManagementTest" classname="Tests.Tenant.Auth.RoomManagementTest" assertions="1" time="0.997962"/>
      </testsuite>
      <testsuite name="can regenerate a QR Code if user is not maintenance manager from the room" tests="3" assertions="3" errors="0" failures="0" skipped="0" time="4.653365">
        <testcase name="can regenerate a QR Code if user is not maintenance manager from the room with data set &quot;('Admin', 200)&quot;" file="tests\Tenant\Auth\RoomManagementTest.php::can regenerate a QR Code if user is not maintenance manager from the room with data set &quot;('Admin', 200)&quot;" class="Tests\Tenant\Auth\RoomManagementTest" classname="Tests.Tenant.Auth.RoomManagementTest" assertions="1" time="1.755214"/>
        <testcase name="can regenerate a QR Code if user is not maintenance manager from the room with data set &quot;('Maintenance Manager', 200)&quot;" file="tests\Tenant\Auth\RoomManagementTest.php::can regenerate a QR Code if user is not maintenance manager from the room with data set &quot;('Maintenance Manager', 200)&quot;" class="Tests\Tenant\Auth\RoomManagementTest" classname="Tests.Tenant.Auth.RoomManagementTest" assertions="1" time="1.872731"/>
        <testcase name="can regenerate a QR Code if user is not maintenance manager from the room with data set &quot;('Provider', 403)&quot;" file="tests\Tenant\Auth\RoomManagementTest.php::can regenerate a QR Code if user is not maintenance manager from the room with data set &quot;('Provider', 403)&quot;" class="Tests\Tenant\Auth\RoomManagementTest" classname="Tests.Tenant.Auth.RoomManagementTest" assertions="1" time="1.025420"/>
      </testsuite>
    </testsuite>
    <testsuite name="Tests\Tenant\Auth\SiteManagementTest" file="tests\Tenant\Auth\SiteManagementTest.php" tests="36" assertions="36" errors="0" failures="0" skipped="0" time="36.714359">
      <testsuite name="test access roles to sites index page" tests="3" assertions="3" errors="0" failures="0" skipped="0" time="3.286282">
        <testcase name="test access roles to sites index page with data set &quot;('Admin', 200)&quot;" file="tests\Tenant\Auth\SiteManagementTest.php::test access roles to sites index page with data set &quot;('Admin', 200)&quot;" class="Tests\Tenant\Auth\SiteManagementTest" classname="Tests.Tenant.Auth.SiteManagementTest" assertions="1" time="1.142301"/>
        <testcase name="test access roles to sites index page with data set &quot;('Maintenance Manager', 403)&quot;" file="tests\Tenant\Auth\SiteManagementTest.php::test access roles to sites index page with data set &quot;('Maintenance Manager', 403)&quot;" class="Tests\Tenant\Auth\SiteManagementTest" classname="Tests.Tenant.Auth.SiteManagementTest" assertions="1" time="1.044392"/>
        <testcase name="test access roles to sites index page with data set &quot;('Provider', 403)&quot;" file="tests\Tenant\Auth\SiteManagementTest.php::test access roles to sites index page with data set &quot;('Provider', 403)&quot;" class="Tests\Tenant\Auth\SiteManagementTest" classname="Tests.Tenant.Auth.SiteManagementTest" assertions="1" time="1.099589"/>
      </testsuite>
      <testsuite name="test access roles to create site page" tests="3" assertions="3" errors="0" failures="0" skipped="0" time="3.272704">
        <testcase name="test access roles to create site page with data set &quot;('Admin', 200)&quot;" file="tests\Tenant\Auth\SiteManagementTest.php::test access roles to create site page with data set &quot;('Admin', 200)&quot;" class="Tests\Tenant\Auth\SiteManagementTest" classname="Tests.Tenant.Auth.SiteManagementTest" assertions="1" time="1.140241"/>
        <testcase name="test access roles to create site page with data set &quot;('Maintenance Manager', 403)&quot;" file="tests\Tenant\Auth\SiteManagementTest.php::test access roles to create site page with data set &quot;('Maintenance Manager', 403)&quot;" class="Tests\Tenant\Auth\SiteManagementTest" classname="Tests.Tenant.Auth.SiteManagementTest" assertions="1" time="1.045868"/>
        <testcase name="test access roles to create site page with data set &quot;('Provider', 403)&quot;" file="tests\Tenant\Auth\SiteManagementTest.php::test access roles to create site page with data set &quot;('Provider', 403)&quot;" class="Tests\Tenant\Auth\SiteManagementTest" classname="Tests.Tenant.Auth.SiteManagementTest" assertions="1" time="1.086596"/>
      </testsuite>
      <testsuite name="test access roles to view any site page" tests="3" assertions="3" errors="0" failures="0" skipped="0" time="2.971491">
        <testcase name="test access roles to view any site page with data set &quot;('Admin', 200)&quot;" file="tests\Tenant\Auth\SiteManagementTest.php::test access roles to view any site page with data set &quot;('Admin', 200)&quot;" class="Tests\Tenant\Auth\SiteManagementTest" classname="Tests.Tenant.Auth.SiteManagementTest" assertions="1" time="1.044965"/>
        <testcase name="test access roles to view any site page with data set &quot;('Maintenance Manager', 403)&quot;" file="tests\Tenant\Auth\SiteManagementTest.php::test access roles to view any site page with data set &quot;('Maintenance Manager', 403)&quot;" class="Tests\Tenant\Auth\SiteManagementTest" classname="Tests.Tenant.Auth.SiteManagementTest" assertions="1" time="0.970601"/>
        <testcase name="test access roles to view any site page with data set &quot;('Provider', 403)&quot;" file="tests\Tenant\Auth\SiteManagementTest.php::test access roles to view any site page with data set &quot;('Provider', 403)&quot;" class="Tests\Tenant\Auth\SiteManagementTest" classname="Tests.Tenant.Auth.SiteManagementTest" assertions="1" time="0.955926"/>
      </testsuite>
      <testsuite name="test access roles to view site with maintenance manager page" tests="3" assertions="3" errors="0" failures="0" skipped="0" time="3.167583">
        <testcase name="test access roles to view site with maintenance manager page with data set &quot;('Admin', 200)&quot;" file="tests\Tenant\Auth\SiteManagementTest.php::test access roles to view site with maintenance manager page with data set &quot;('Admin', 200)&quot;" class="Tests\Tenant\Auth\SiteManagementTest" classname="Tests.Tenant.Auth.SiteManagementTest" assertions="1" time="1.134388"/>
        <testcase name="test access roles to view site with maintenance manager page with data set &quot;('Maintenance Manager', 200)&quot;" file="tests\Tenant\Auth\SiteManagementTest.php::test access roles to view site with maintenance manager page with data set &quot;('Maintenance Manager', 200)&quot;" class="Tests\Tenant\Auth\SiteManagementTest" classname="Tests.Tenant.Auth.SiteManagementTest" assertions="1" time="1.125375"/>
        <testcase name="test access roles to view site with maintenance manager page with data set &quot;('Provider', 403)&quot;" file="tests\Tenant\Auth\SiteManagementTest.php::test access roles to view site with maintenance manager page with data set &quot;('Provider', 403)&quot;" class="Tests\Tenant\Auth\SiteManagementTest" classname="Tests.Tenant.Auth.SiteManagementTest" assertions="1" time="0.907820"/>
      </testsuite>
      <testsuite name="test access roles to store a site" tests="3" assertions="3" errors="0" failures="0" skipped="0" time="2.739738">
        <testcase name="test access roles to store a site with data set &quot;('Admin', 200)&quot;" file="tests\Tenant\Auth\SiteManagementTest.php::test access roles to store a site with data set &quot;('Admin', 200)&quot;" class="Tests\Tenant\Auth\SiteManagementTest" classname="Tests.Tenant.Auth.SiteManagementTest" assertions="1" time="0.967939"/>
        <testcase name="test access roles to store a site with data set &quot;('Maintenance Manager', 403)&quot;" file="tests\Tenant\Auth\SiteManagementTest.php::test access roles to store a site with data set &quot;('Maintenance Manager', 403)&quot;" class="Tests\Tenant\Auth\SiteManagementTest" classname="Tests.Tenant.Auth.SiteManagementTest" assertions="1" time="0.903797"/>
        <testcase name="test access roles to store a site with data set &quot;('Provider', 403)&quot;" file="tests\Tenant\Auth\SiteManagementTest.php::test access roles to store a site with data set &quot;('Provider', 403)&quot;" class="Tests\Tenant\Auth\SiteManagementTest" classname="Tests.Tenant.Auth.SiteManagementTest" assertions="1" time="0.868002"/>
      </testsuite>
      <testsuite name="test access roles to update any asset page" tests="3" assertions="3" errors="0" failures="0" skipped="0" time="2.594602">
        <testcase name="test access roles to update any asset page with data set &quot;('Admin', 200)&quot;" file="tests\Tenant\Auth\SiteManagementTest.php::test access roles to update any asset page with data set &quot;('Admin', 200)&quot;" class="Tests\Tenant\Auth\SiteManagementTest" classname="Tests.Tenant.Auth.SiteManagementTest" assertions="1" time="0.906843"/>
        <testcase name="test access roles to update any asset page with data set &quot;('Maintenance Manager', 403)&quot;" file="tests\Tenant\Auth\SiteManagementTest.php::test access roles to update any asset page with data set &quot;('Maintenance Manager', 403)&quot;" class="Tests\Tenant\Auth\SiteManagementTest" classname="Tests.Tenant.Auth.SiteManagementTest" assertions="1" time="0.838236"/>
        <testcase name="test access roles to update any asset page with data set &quot;('Provider', 403)&quot;" file="tests\Tenant\Auth\SiteManagementTest.php::test access roles to update any asset page with data set &quot;('Provider', 403)&quot;" class="Tests\Tenant\Auth\SiteManagementTest" classname="Tests.Tenant.Auth.SiteManagementTest" assertions="1" time="0.849523"/>
      </testsuite>
      <testsuite name="test access roles to update site with maintenance manager page" tests="3" assertions="3" errors="0" failures="0" skipped="0" time="2.524693">
        <testcase name="test access roles to update site with maintenance manager page with data set &quot;('Admin', 200)&quot;" file="tests\Tenant\Auth\SiteManagementTest.php::test access roles to update site with maintenance manager page with data set &quot;('Admin', 200)&quot;" class="Tests\Tenant\Auth\SiteManagementTest" classname="Tests.Tenant.Auth.SiteManagementTest" assertions="1" time="0.857945"/>
        <testcase name="test access roles to update site with maintenance manager page with data set &quot;('Maintenance Manager', 200)&quot;" file="tests\Tenant\Auth\SiteManagementTest.php::test access roles to update site with maintenance manager page with data set &quot;('Maintenance Manager', 200)&quot;" class="Tests\Tenant\Auth\SiteManagementTest" classname="Tests.Tenant.Auth.SiteManagementTest" assertions="1" time="0.841754"/>
        <testcase name="test access roles to update site with maintenance manager page with data set &quot;('Provider', 403)&quot;" file="tests\Tenant\Auth\SiteManagementTest.php::test access roles to update site with maintenance manager page with data set &quot;('Provider', 403)&quot;" class="Tests\Tenant\Auth\SiteManagementTest" classname="Tests.Tenant.Auth.SiteManagementTest" assertions="1" time="0.824994"/>
      </testsuite>
      <testsuite name="test access roles to update site with maintenance manager" tests="3" assertions="3" errors="0" failures="0" skipped="0" time="2.545378">
        <testcase name="test access roles to update site with maintenance manager with data set &quot;('Admin', 200)&quot;" file="tests\Tenant\Auth\SiteManagementTest.php::test access roles to update site with maintenance manager with data set &quot;('Admin', 200)&quot;" class="Tests\Tenant\Auth\SiteManagementTest" classname="Tests.Tenant.Auth.SiteManagementTest" assertions="1" time="0.824761"/>
        <testcase name="test access roles to update site with maintenance manager with data set &quot;('Maintenance Manager', 200)&quot;" file="tests\Tenant\Auth\SiteManagementTest.php::test access roles to update site with maintenance manager with data set &quot;('Maintenance Manager', 200)&quot;" class="Tests\Tenant\Auth\SiteManagementTest" classname="Tests.Tenant.Auth.SiteManagementTest" assertions="1" time="0.884803"/>
        <testcase name="test access roles to update site with maintenance manager with data set &quot;('Provider', 403)&quot;" file="tests\Tenant\Auth\SiteManagementTest.php::test access roles to update site with maintenance manager with data set &quot;('Provider', 403)&quot;" class="Tests\Tenant\Auth\SiteManagementTest" classname="Tests.Tenant.Auth.SiteManagementTest" assertions="1" time="0.835814"/>
      </testsuite>
      <testsuite name="test access roles to delete any asset" tests="3" assertions="3" errors="0" failures="0" skipped="0" time="2.483523">
        <testcase name="test access roles to delete any asset with data set &quot;('Admin', 200)&quot;" file="tests\Tenant\Auth\SiteManagementTest.php::test access roles to delete any asset with data set &quot;('Admin', 200)&quot;" class="Tests\Tenant\Auth\SiteManagementTest" classname="Tests.Tenant.Auth.SiteManagementTest" assertions="1" time="0.846521"/>
        <testcase name="test access roles to delete any asset with data set &quot;('Maintenance Manager', 403)&quot;" file="tests\Tenant\Auth\SiteManagementTest.php::test access roles to delete any asset with data set &quot;('Maintenance Manager', 403)&quot;" class="Tests\Tenant\Auth\SiteManagementTest" classname="Tests.Tenant.Auth.SiteManagementTest" assertions="1" time="0.788398"/>
        <testcase name="test access roles to delete any asset with data set &quot;('Provider', 403)&quot;" file="tests\Tenant\Auth\SiteManagementTest.php::test access roles to delete any asset with data set &quot;('Provider', 403)&quot;" class="Tests\Tenant\Auth\SiteManagementTest" classname="Tests.Tenant.Auth.SiteManagementTest" assertions="1" time="0.848603"/>
      </testsuite>
      <testsuite name="test access roles to delete site with maintenance manager" tests="3" assertions="3" errors="0" failures="0" skipped="0" time="2.700773">
        <testcase name="test access roles to delete site with maintenance manager with data set &quot;('Admin', 200)&quot;" file="tests\Tenant\Auth\SiteManagementTest.php::test access roles to delete site with maintenance manager with data set &quot;('Admin', 200)&quot;" class="Tests\Tenant\Auth\SiteManagementTest" classname="Tests.Tenant.Auth.SiteManagementTest" assertions="1" time="0.982771"/>
        <testcase name="test access roles to delete site with maintenance manager with data set &quot;('Maintenance Manager', 403)&quot;" file="tests\Tenant\Auth\SiteManagementTest.php::test access roles to delete site with maintenance manager with data set &quot;('Maintenance Manager', 403)&quot;" class="Tests\Tenant\Auth\SiteManagementTest" classname="Tests.Tenant.Auth.SiteManagementTest" assertions="1" time="0.844001"/>
        <testcase name="test access roles to delete site with maintenance manager with data set &quot;('Provider', 403)&quot;" file="tests\Tenant\Auth\SiteManagementTest.php::test access roles to delete site with maintenance manager with data set &quot;('Provider', 403)&quot;" class="Tests\Tenant\Auth\SiteManagementTest" classname="Tests.Tenant.Auth.SiteManagementTest" assertions="1" time="0.874000"/>
      </testsuite>
      <testsuite name="cannot regenerate a QR Code if user is not maintenance manager from the site" tests="3" assertions="3" errors="0" failures="0" skipped="0" time="3.835639">
        <testcase name="cannot regenerate a QR Code if user is not maintenance manager from the site with data set &quot;('Admin', 200)&quot;" file="tests\Tenant\Auth\SiteManagementTest.php::cannot regenerate a QR Code if user is not maintenance manager from the site with data set &quot;('Admin', 200)&quot;" class="Tests\Tenant\Auth\SiteManagementTest" classname="Tests.Tenant.Auth.SiteManagementTest" assertions="1" time="1.942572"/>
        <testcase name="cannot regenerate a QR Code if user is not maintenance manager from the site with data set &quot;('Maintenance Manager', 403)&quot;" file="tests\Tenant\Auth\SiteManagementTest.php::cannot regenerate a QR Code if user is not maintenance manager from the site with data set &quot;('Maintenance Manager', 403)&quot;" class="Tests\Tenant\Auth\SiteManagementTest" classname="Tests.Tenant.Auth.SiteManagementTest" assertions="1" time="0.894176"/>
        <testcase name="cannot regenerate a QR Code if user is not maintenance manager from the site with data set &quot;('Provider', 403)&quot;" file="tests\Tenant\Auth\SiteManagementTest.php::cannot regenerate a QR Code if user is not maintenance manager from the site with data set &quot;('Provider', 403)&quot;" class="Tests\Tenant\Auth\SiteManagementTest" classname="Tests.Tenant.Auth.SiteManagementTest" assertions="1" time="0.998892"/>
      </testsuite>
      <testsuite name="can regenerate a QR Code if user is not maintenance manager from the site" tests="3" assertions="3" errors="0" failures="0" skipped="0" time="4.591952">
        <testcase name="can regenerate a QR Code if user is not maintenance manager from the site with data set &quot;('Admin', 200)&quot;" file="tests\Tenant\Auth\SiteManagementTest.php::can regenerate a QR Code if user is not maintenance manager from the site with data set &quot;('Admin', 200)&quot;" class="Tests\Tenant\Auth\SiteManagementTest" classname="Tests.Tenant.Auth.SiteManagementTest" assertions="1" time="1.851901"/>
        <testcase name="can regenerate a QR Code if user is not maintenance manager from the site with data set &quot;('Maintenance Manager', 200)&quot;" file="tests\Tenant\Auth\SiteManagementTest.php::can regenerate a QR Code if user is not maintenance manager from the site with data set &quot;('Maintenance Manager', 200)&quot;" class="Tests\Tenant\Auth\SiteManagementTest" classname="Tests.Tenant.Auth.SiteManagementTest" assertions="1" time="1.776916"/>
        <testcase name="can regenerate a QR Code if user is not maintenance manager from the site with data set &quot;('Provider', 403)&quot;" file="tests\Tenant\Auth\SiteManagementTest.php::can regenerate a QR Code if user is not maintenance manager from the site with data set &quot;('Provider', 403)&quot;" class="Tests\Tenant\Auth\SiteManagementTest" classname="Tests.Tenant.Auth.SiteManagementTest" assertions="1" time="0.963135"/>
      </testsuite>
    </testsuite>
    <testsuite name="Tests\Tenant\Auth\TicketManagementTest" file="tests\Tenant\Auth\TicketManagementTest.php" tests="42" assertions="42" errors="0" failures="0" skipped="0" time="49.045061">
      <testsuite name="test access roles to tickets index page" tests="2" assertions="2" errors="0" failures="0" skipped="0" time="2.421887">
        <testcase name="test access roles to tickets index page with data set &quot;('Admin', 200)&quot;" file="tests\Tenant\Auth\TicketManagementTest.php::test access roles to tickets index page with data set &quot;('Admin', 200)&quot;" class="Tests\Tenant\Auth\TicketManagementTest" classname="Tests.Tenant.Auth.TicketManagementTest" assertions="1" time="1.249884"/>
        <testcase name="test access roles to tickets index page with data set &quot;('Maintenance Manager', 403)&quot;" file="tests\Tenant\Auth\TicketManagementTest.php::test access roles to tickets index page with data set &quot;('Maintenance Manager', 403)&quot;" class="Tests\Tenant\Auth\TicketManagementTest" classname="Tests.Tenant.Auth.TicketManagementTest" assertions="1" time="1.172002"/>
      </testsuite>
      <testsuite name="test access roles to view tickets for an asset without maintenance manager" tests="3" assertions="3" errors="0" failures="0" skipped="0" time="3.470044">
        <testcase name="test access roles to view tickets for an asset without maintenance manager with data set &quot;('Admin', 200)&quot;" file="tests\Tenant\Auth\TicketManagementTest.php::test access roles to view tickets for an asset without maintenance manager with data set &quot;('Admin', 200)&quot;" class="Tests\Tenant\Auth\TicketManagementTest" classname="Tests.Tenant.Auth.TicketManagementTest" assertions="1" time="1.239754"/>
        <testcase name="test access roles to view tickets for an asset without maintenance manager with data set &quot;('Maintenance Manager', 403)&quot;" file="tests\Tenant\Auth\TicketManagementTest.php::test access roles to view tickets for an asset without maintenance manager with data set &quot;('Maintenance Manager', 403)&quot;" class="Tests\Tenant\Auth\TicketManagementTest" classname="Tests.Tenant.Auth.TicketManagementTest" assertions="1" time="1.114926"/>
        <testcase name="test access roles to view tickets for an asset without maintenance manager with data set &quot;('', 403)&quot;" file="tests\Tenant\Auth\TicketManagementTest.php::test access roles to view tickets for an asset without maintenance manager with data set &quot;('', 403)&quot;" class="Tests\Tenant\Auth\TicketManagementTest" classname="Tests.Tenant.Auth.TicketManagementTest" assertions="1" time="1.115364"/>
      </testsuite>
      <testsuite name="test access roles to view tickets for an asset with maintenance manager" tests="3" assertions="3" errors="0" failures="0" skipped="0" time="3.346020">
        <testcase name="test access roles to view tickets for an asset with maintenance manager with data set &quot;('Admin', 200)&quot;" file="tests\Tenant\Auth\TicketManagementTest.php::test access roles to view tickets for an asset with maintenance manager with data set &quot;('Admin', 200)&quot;" class="Tests\Tenant\Auth\TicketManagementTest" classname="Tests.Tenant.Auth.TicketManagementTest" assertions="1" time="1.187853"/>
        <testcase name="test access roles to view tickets for an asset with maintenance manager with data set &quot;('Maintenance Manager', 200)&quot;" file="tests\Tenant\Auth\TicketManagementTest.php::test access roles to view tickets for an asset with maintenance manager with data set &quot;('Maintenance Manager', 200)&quot;" class="Tests\Tenant\Auth\TicketManagementTest" classname="Tests.Tenant.Auth.TicketManagementTest" assertions="1" time="1.122974"/>
        <testcase name="test access roles to view tickets for an asset with maintenance manager with data set &quot;('', 403)&quot;" file="tests\Tenant\Auth\TicketManagementTest.php::test access roles to view tickets for an asset with maintenance manager with data set &quot;('', 403)&quot;" class="Tests\Tenant\Auth\TicketManagementTest" classname="Tests.Tenant.Auth.TicketManagementTest" assertions="1" time="1.035192"/>
      </testsuite>
      <testsuite name="test access roles to create tickets page for asset" tests="3" assertions="3" errors="0" failures="0" skipped="0" time="3.189923">
        <testcase name="test access roles to create tickets page for asset with data set &quot;('Admin', 200)&quot;" file="tests\Tenant\Auth\TicketManagementTest.php::test access roles to create tickets page for asset with data set &quot;('Admin', 200)&quot;" class="Tests\Tenant\Auth\TicketManagementTest" classname="Tests.Tenant.Auth.TicketManagementTest" assertions="1" time="1.033105"/>
        <testcase name="test access roles to create tickets page for asset with data set &quot;('Maintenance Manager', 200)&quot;" file="tests\Tenant\Auth\TicketManagementTest.php::test access roles to create tickets page for asset with data set &quot;('Maintenance Manager', 200)&quot;" class="Tests\Tenant\Auth\TicketManagementTest" classname="Tests.Tenant.Auth.TicketManagementTest" assertions="1" time="1.088423"/>
        <testcase name="test access roles to create tickets page for asset with data set &quot;('', 200)&quot;" file="tests\Tenant\Auth\TicketManagementTest.php::test access roles to create tickets page for asset with data set &quot;('', 200)&quot;" class="Tests\Tenant\Auth\TicketManagementTest" classname="Tests.Tenant.Auth.TicketManagementTest" assertions="1" time="1.068394"/>
      </testsuite>
      <testsuite name="test access roles to create tickets page for site" tests="3" assertions="3" errors="0" failures="0" skipped="0" time="3.185724">
        <testcase name="test access roles to create tickets page for site with data set &quot;('Admin', 200)&quot;" file="tests\Tenant\Auth\TicketManagementTest.php::test access roles to create tickets page for site with data set &quot;('Admin', 200)&quot;" class="Tests\Tenant\Auth\TicketManagementTest" classname="Tests.Tenant.Auth.TicketManagementTest" assertions="1" time="1.031449"/>
        <testcase name="test access roles to create tickets page for site with data set &quot;('Maintenance Manager', 200)&quot;" file="tests\Tenant\Auth\TicketManagementTest.php::test access roles to create tickets page for site with data set &quot;('Maintenance Manager', 200)&quot;" class="Tests\Tenant\Auth\TicketManagementTest" classname="Tests.Tenant.Auth.TicketManagementTest" assertions="1" time="1.027932"/>
        <testcase name="test access roles to create tickets page for site with data set &quot;('', 200)&quot;" file="tests\Tenant\Auth\TicketManagementTest.php::test access roles to create tickets page for site with data set &quot;('', 200)&quot;" class="Tests\Tenant\Auth\TicketManagementTest" classname="Tests.Tenant.Auth.TicketManagementTest" assertions="1" time="1.126343"/>
      </testsuite>
      <testsuite name="test access roles to create tickets page for building" tests="3" assertions="3" errors="0" failures="0" skipped="0" time="3.163899">
        <testcase name="test access roles to create tickets page for building with data set &quot;('Admin', 200)&quot;" file="tests\Tenant\Auth\TicketManagementTest.php::test access roles to create tickets page for building with data set &quot;('Admin', 200)&quot;" class="Tests\Tenant\Auth\TicketManagementTest" classname="Tests.Tenant.Auth.TicketManagementTest" assertions="1" time="1.006426"/>
        <testcase name="test access roles to create tickets page for building with data set &quot;('Maintenance Manager', 200)&quot;" file="tests\Tenant\Auth\TicketManagementTest.php::test access roles to create tickets page for building with data set &quot;('Maintenance Manager', 200)&quot;" class="Tests\Tenant\Auth\TicketManagementTest" classname="Tests.Tenant.Auth.TicketManagementTest" assertions="1" time="1.069652"/>
        <testcase name="test access roles to create tickets page for building with data set &quot;('', 200)&quot;" file="tests\Tenant\Auth\TicketManagementTest.php::test access roles to create tickets page for building with data set &quot;('', 200)&quot;" class="Tests\Tenant\Auth\TicketManagementTest" classname="Tests.Tenant.Auth.TicketManagementTest" assertions="1" time="1.087821"/>
      </testsuite>
      <testsuite name="test access roles to create tickets page for floor" tests="3" assertions="3" errors="0" failures="0" skipped="0" time="3.138453">
        <testcase name="test access roles to create tickets page for floor with data set &quot;('Admin', 200)&quot;" file="tests\Tenant\Auth\TicketManagementTest.php::test access roles to create tickets page for floor with data set &quot;('Admin', 200)&quot;" class="Tests\Tenant\Auth\TicketManagementTest" classname="Tests.Tenant.Auth.TicketManagementTest" assertions="1" time="1.086545"/>
        <testcase name="test access roles to create tickets page for floor with data set &quot;('Maintenance Manager', 200)&quot;" file="tests\Tenant\Auth\TicketManagementTest.php::test access roles to create tickets page for floor with data set &quot;('Maintenance Manager', 200)&quot;" class="Tests\Tenant\Auth\TicketManagementTest" classname="Tests.Tenant.Auth.TicketManagementTest" assertions="1" time="1.031990"/>
        <testcase name="test access roles to create tickets page for floor with data set &quot;('', 200)&quot;" file="tests\Tenant\Auth\TicketManagementTest.php::test access roles to create tickets page for floor with data set &quot;('', 200)&quot;" class="Tests\Tenant\Auth\TicketManagementTest" classname="Tests.Tenant.Auth.TicketManagementTest" assertions="1" time="1.019918"/>
      </testsuite>
      <testsuite name="test access roles to create tickets page for room" tests="4" assertions="4" errors="0" failures="0" skipped="0" time="4.270702">
        <testcase name="test access roles to create tickets page for room with data set &quot;('Admin', 200)&quot;" file="tests\Tenant\Auth\TicketManagementTest.php::test access roles to create tickets page for room with data set &quot;('Admin', 200)&quot;" class="Tests\Tenant\Auth\TicketManagementTest" classname="Tests.Tenant.Auth.TicketManagementTest" assertions="1" time="1.114749"/>
        <testcase name="test access roles to create tickets page for room with data set &quot;('Maintenance Manager', 200)&quot;" file="tests\Tenant\Auth\TicketManagementTest.php::test access roles to create tickets page for room with data set &quot;('Maintenance Manager', 200)&quot;" class="Tests\Tenant\Auth\TicketManagementTest" classname="Tests.Tenant.Auth.TicketManagementTest" assertions="1" time="1.049033"/>
        <testcase name="test access roles to create tickets page for room with data set &quot;('Provider', 200)&quot;" file="tests\Tenant\Auth\TicketManagementTest.php::test access roles to create tickets page for room with data set &quot;('Provider', 200)&quot;" class="Tests\Tenant\Auth\TicketManagementTest" classname="Tests.Tenant.Auth.TicketManagementTest" assertions="1" time="1.074882"/>
        <testcase name="test access roles to create tickets page for room with data set &quot;('', 200)&quot;" file="tests\Tenant\Auth\TicketManagementTest.php::test access roles to create tickets page for room with data set &quot;('', 200)&quot;" class="Tests\Tenant\Auth\TicketManagementTest" classname="Tests.Tenant.Auth.TicketManagementTest" assertions="1" time="1.032039"/>
      </testsuite>
      <testsuite name="test access roles to store a ticket" tests="3" assertions="3" errors="0" failures="0" skipped="0" time="3.607142">
        <testcase name="test access roles to store a ticket with data set &quot;('Admin', 200)&quot;" file="tests\Tenant\Auth\TicketManagementTest.php::test access roles to store a ticket with data set &quot;('Admin', 200)&quot;" class="Tests\Tenant\Auth\TicketManagementTest" classname="Tests.Tenant.Auth.TicketManagementTest" assertions="1" time="1.110264"/>
        <testcase name="test access roles to store a ticket with data set &quot;('Maintenance Manager', 200)&quot;" file="tests\Tenant\Auth\TicketManagementTest.php::test access roles to store a ticket with data set &quot;('Maintenance Manager', 200)&quot;" class="Tests\Tenant\Auth\TicketManagementTest" classname="Tests.Tenant.Auth.TicketManagementTest" assertions="1" time="1.190006"/>
        <testcase name="test access roles to store a ticket with data set &quot;('', 200)&quot;" file="tests\Tenant\Auth\TicketManagementTest.php::test access roles to store a ticket with data set &quot;('', 200)&quot;" class="Tests\Tenant\Auth\TicketManagementTest" classname="Tests.Tenant.Auth.TicketManagementTest" assertions="1" time="1.306872"/>
      </testsuite>
      <testsuite name="test access roles to update any ticket" tests="3" assertions="3" errors="0" failures="0" skipped="0" time="4.701740">
        <testcase name="test access roles to update any ticket with data set &quot;('Admin', 200)&quot;" file="tests\Tenant\Auth\TicketManagementTest.php::test access roles to update any ticket with data set &quot;('Admin', 200)&quot;" class="Tests\Tenant\Auth\TicketManagementTest" classname="Tests.Tenant.Auth.TicketManagementTest" assertions="1" time="1.391992"/>
        <testcase name="test access roles to update any ticket with data set &quot;('Maintenance Manager', 403)&quot;" file="tests\Tenant\Auth\TicketManagementTest.php::test access roles to update any ticket with data set &quot;('Maintenance Manager', 403)&quot;" class="Tests\Tenant\Auth\TicketManagementTest" classname="Tests.Tenant.Auth.TicketManagementTest" assertions="1" time="1.705211"/>
        <testcase name="test access roles to update any ticket with data set &quot;('', 403)&quot;" file="tests\Tenant\Auth\TicketManagementTest.php::test access roles to update any ticket with data set &quot;('', 403)&quot;" class="Tests\Tenant\Auth\TicketManagementTest" classname="Tests.Tenant.Auth.TicketManagementTest" assertions="1" time="1.604537"/>
      </testsuite>
      <testsuite name="test access roles to update ticket with maintenance manager" tests="3" assertions="3" errors="0" failures="0" skipped="0" time="5.033713">
        <testcase name="test access roles to update ticket with maintenance manager with data set &quot;('Admin', 200)&quot;" file="tests\Tenant\Auth\TicketManagementTest.php::test access roles to update ticket with maintenance manager with data set &quot;('Admin', 200)&quot;" class="Tests\Tenant\Auth\TicketManagementTest" classname="Tests.Tenant.Auth.TicketManagementTest" assertions="1" time="1.636043"/>
        <testcase name="test access roles to update ticket with maintenance manager with data set &quot;('Maintenance Manager', 200)&quot;" file="tests\Tenant\Auth\TicketManagementTest.php::test access roles to update ticket with maintenance manager with data set &quot;('Maintenance Manager', 200)&quot;" class="Tests\Tenant\Auth\TicketManagementTest" classname="Tests.Tenant.Auth.TicketManagementTest" assertions="1" time="1.620477"/>
        <testcase name="test access roles to update ticket with maintenance manager with data set &quot;('', 403)&quot;" file="tests\Tenant\Auth\TicketManagementTest.php::test access roles to update ticket with maintenance manager with data set &quot;('', 403)&quot;" class="Tests\Tenant\Auth\TicketManagementTest" classname="Tests.Tenant.Auth.TicketManagementTest" assertions="1" time="1.777193"/>
      </testsuite>
      <testsuite name="test access roles to update the status of any ticket" tests="3" assertions="3" errors="0" failures="0" skipped="0" time="3.014908">
        <testcase name="test access roles to update the status of any ticket with data set &quot;('Admin', 200)&quot;" file="tests\Tenant\Auth\TicketManagementTest.php::test access roles to update the status of any ticket with data set &quot;('Admin', 200)&quot;" class="Tests\Tenant\Auth\TicketManagementTest" classname="Tests.Tenant.Auth.TicketManagementTest" assertions="1" time="0.998383"/>
        <testcase name="test access roles to update the status of any ticket with data set &quot;('Maintenance Manager', 403)&quot;" file="tests\Tenant\Auth\TicketManagementTest.php::test access roles to update the status of any ticket with data set &quot;('Maintenance Manager', 403)&quot;" class="Tests\Tenant\Auth\TicketManagementTest" classname="Tests.Tenant.Auth.TicketManagementTest" assertions="1" time="1.052279"/>
        <testcase name="test access roles to update the status of any ticket with data set &quot;('', 403)&quot;" file="tests\Tenant\Auth\TicketManagementTest.php::test access roles to update the status of any ticket with data set &quot;('', 403)&quot;" class="Tests\Tenant\Auth\TicketManagementTest" classname="Tests.Tenant.Auth.TicketManagementTest" assertions="1" time="0.964246"/>
      </testsuite>
      <testsuite name="test access roles to update the status of ticket with maintenance manager" tests="3" assertions="3" errors="0" failures="0" skipped="0" time="3.192589">
        <testcase name="test access roles to update the status of ticket with maintenance manager with data set &quot;('Admin', 200)&quot;" file="tests\Tenant\Auth\TicketManagementTest.php::test access roles to update the status of ticket with maintenance manager with data set &quot;('Admin', 200)&quot;" class="Tests\Tenant\Auth\TicketManagementTest" classname="Tests.Tenant.Auth.TicketManagementTest" assertions="1" time="1.057439"/>
        <testcase name="test access roles to update the status of ticket with maintenance manager with data set &quot;('Maintenance Manager', 200)&quot;" file="tests\Tenant\Auth\TicketManagementTest.php::test access roles to update the status of ticket with maintenance manager with data set &quot;('Maintenance Manager', 200)&quot;" class="Tests\Tenant\Auth\TicketManagementTest" classname="Tests.Tenant.Auth.TicketManagementTest" assertions="1" time="1.066449"/>
        <testcase name="test access roles to update the status of ticket with maintenance manager with data set &quot;('', 403)&quot;" file="tests\Tenant\Auth\TicketManagementTest.php::test access roles to update the status of ticket with maintenance manager with data set &quot;('', 403)&quot;" class="Tests\Tenant\Auth\TicketManagementTest" classname="Tests.Tenant.Auth.TicketManagementTest" assertions="1" time="1.068701"/>
      </testsuite>
      <testsuite name="test access roles to delete any ticket" tests="3" assertions="3" errors="0" failures="0" skipped="0" time="3.308317">
        <testcase name="test access roles to delete any ticket with data set &quot;('Admin', 200)&quot;" file="tests\Tenant\Auth\TicketManagementTest.php::test access roles to delete any ticket with data set &quot;('Admin', 200)&quot;" class="Tests\Tenant\Auth\TicketManagementTest" classname="Tests.Tenant.Auth.TicketManagementTest" assertions="1" time="1.069321"/>
        <testcase name="test access roles to delete any ticket with data set &quot;('Maintenance Manager', 403)&quot;" file="tests\Tenant\Auth\TicketManagementTest.php::test access roles to delete any ticket with data set &quot;('Maintenance Manager', 403)&quot;" class="Tests\Tenant\Auth\TicketManagementTest" classname="Tests.Tenant.Auth.TicketManagementTest" assertions="1" time="1.108066"/>
        <testcase name="test access roles to delete any ticket with data set &quot;('', 403)&quot;" file="tests\Tenant\Auth\TicketManagementTest.php::test access roles to delete any ticket with data set &quot;('', 403)&quot;" class="Tests\Tenant\Auth\TicketManagementTest" classname="Tests.Tenant.Auth.TicketManagementTest" assertions="1" time="1.130930"/>
      </testsuite>
    </testsuite>
    <testsuite name="Tests\Tenant\Auth\UserManagementTest" file="tests\Tenant\Auth\UserManagementTest.php" tests="13" assertions="29" errors="0" failures="0" skipped="0" time="12.195611">
      <testsuite name="test access roles to users index" tests="2" assertions="2" errors="0" failures="0" skipped="0" time="1.794160">
        <testcase name="test access roles to users index with data set &quot;('Admin', 200)&quot;" file="tests\Tenant\Auth\UserManagementTest.php::test access roles to users index with data set &quot;('Admin', 200)&quot;" class="Tests\Tenant\Auth\UserManagementTest" classname="Tests.Tenant.Auth.UserManagementTest" assertions="1" time="0.933237"/>
        <testcase name="test access roles to users index with data set &quot;('Maintenance Manager', 403)&quot;" file="tests\Tenant\Auth\UserManagementTest.php::test access roles to users index with data set &quot;('Maintenance Manager', 403)&quot;" class="Tests\Tenant\Auth\UserManagementTest" classname="Tests.Tenant.Auth.UserManagementTest" assertions="1" time="0.860923"/>
      </testsuite>
      <testsuite name="test access roles to view own user" tests="2" assertions="2" errors="0" failures="0" skipped="0" time="1.858439">
        <testcase name="test access roles to view own user with data set &quot;('Admin', 200)&quot;" file="tests\Tenant\Auth\UserManagementTest.php::test access roles to view own user with data set &quot;('Admin', 200)&quot;" class="Tests\Tenant\Auth\UserManagementTest" classname="Tests.Tenant.Auth.UserManagementTest" assertions="1" time="0.898383"/>
        <testcase name="test access roles to view own user with data set &quot;('Maintenance Manager', 200)&quot;" file="tests\Tenant\Auth\UserManagementTest.php::test access roles to view own user with data set &quot;('Maintenance Manager', 200)&quot;" class="Tests\Tenant\Auth\UserManagementTest" classname="Tests.Tenant.Auth.UserManagementTest" assertions="1" time="0.960055"/>
      </testsuite>
      <testsuite name="test access roles to view another user" tests="2" assertions="2" errors="0" failures="0" skipped="0" time="2.053185">
        <testcase name="test access roles to view another user with data set &quot;('Admin', 200)&quot;" file="tests\Tenant\Auth\UserManagementTest.php::test access roles to view another user with data set &quot;('Admin', 200)&quot;" class="Tests\Tenant\Auth\UserManagementTest" classname="Tests.Tenant.Auth.UserManagementTest" assertions="1" time="1.051397"/>
        <testcase name="test access roles to view another user with data set &quot;('Maintenance Manager', 403)&quot;" file="tests\Tenant\Auth\UserManagementTest.php::test access roles to view another user with data set &quot;('Maintenance Manager', 403)&quot;" class="Tests\Tenant\Auth\UserManagementTest" classname="Tests.Tenant.Auth.UserManagementTest" assertions="1" time="1.001788"/>
      </testsuite>
      <testsuite name="test access roles to users create" tests="2" assertions="2" errors="0" failures="0" skipped="0" time="1.676148">
        <testcase name="test access roles to users create with data set &quot;('Admin', 200)&quot;" file="tests\Tenant\Auth\UserManagementTest.php::test access roles to users create with data set &quot;('Admin', 200)&quot;" class="Tests\Tenant\Auth\UserManagementTest" classname="Tests.Tenant.Auth.UserManagementTest" assertions="1" time="0.880953"/>
        <testcase name="test access roles to users create with data set &quot;('Maintenance Manager', 403)&quot;" file="tests\Tenant\Auth\UserManagementTest.php::test access roles to users create with data set &quot;('Maintenance Manager', 403)&quot;" class="Tests\Tenant\Auth\UserManagementTest" classname="Tests.Tenant.Auth.UserManagementTest" assertions="1" time="0.795195"/>
      </testsuite>
      <testsuite name="an admin can create a new user with a role" tests="2" assertions="10" errors="0" failures="0" skipped="0" time="2.283306">
        <testcase name="an admin can create a new user with a role with data set &quot;('Admin')&quot;" file="tests\Tenant\Auth\UserManagementTest.php::an admin can create a new user with a role with data set &quot;('Admin')&quot;" class="Tests\Tenant\Auth\UserManagementTest" classname="Tests.Tenant.Auth.UserManagementTest" assertions="5" time="1.157430"/>
        <testcase name="an admin can create a new user with a role with data set &quot;('Maintenance Manager')&quot;" file="tests\Tenant\Auth\UserManagementTest.php::an admin can create a new user with a role with data set &quot;('Maintenance Manager')&quot;" class="Tests\Tenant\Auth\UserManagementTest" classname="Tests.Tenant.Auth.UserManagementTest" assertions="5" time="1.125876"/>
      </testsuite>
      <testsuite name="an admin can update the role of a user" tests="2" assertions="10" errors="0" failures="0" skipped="0" time="1.704769">
        <testcase name="an admin can update the role of a user with data set &quot;('Admin')&quot;" file="tests\Tenant\Auth\UserManagementTest.php::an admin can update the role of a user with data set &quot;('Admin')&quot;" class="Tests\Tenant\Auth\UserManagementTest" classname="Tests.Tenant.Auth.UserManagementTest" assertions="5" time="0.879690"/>
        <testcase name="an admin can update the role of a user with data set &quot;('Maintenance Manager')&quot;" file="tests\Tenant\Auth\UserManagementTest.php::an admin can update the role of a user with data set &quot;('Maintenance Manager')&quot;" class="Tests\Tenant\Auth\UserManagementTest" classname="Tests.Tenant.Auth.UserManagementTest" assertions="5" time="0.825079"/>
      </testsuite>
      <testsuite name="another user as an admin cannot create a user" tests="1" assertions="1" errors="0" failures="0" skipped="0" time="0.825604">
        <testcase name="another user as an admin cannot create a user with data set &quot;('Maintenance Manager')&quot;" file="tests\Tenant\Auth\UserManagementTest.php::another user as an admin cannot create a user with data set &quot;('Maintenance Manager')&quot;" class="Tests\Tenant\Auth\UserManagementTest" classname="Tests.Tenant.Auth.UserManagementTest" assertions="1" time="0.825604"/>
      </testsuite>
    </testsuite>
    <testsuite name="Tests\Tenant\AuthenticationTest" file="tests\Tenant\AuthenticationTest.php" tests="4" assertions="17" errors="0" failures="0" skipped="0" time="3.588234">
      <testcase name="login screen can be rendered" file="tests\Tenant\AuthenticationTest.php::login screen can be rendered" class="Tests\Tenant\AuthenticationTest" classname="Tests.Tenant.AuthenticationTest" assertions="10" time="0.799678"/>
      <testcase name="users can authenticate using the login screen" file="tests\Tenant\AuthenticationTest.php::users can authenticate using the login screen" class="Tests\Tenant\AuthenticationTest" classname="Tests.Tenant.AuthenticationTest" assertions="3" time="0.816832"/>
      <testcase name="users can not authenticate with invalid password" file="tests\Tenant\AuthenticationTest.php::users can not authenticate with invalid password" class="Tests\Tenant\AuthenticationTest" classname="Tests.Tenant.AuthenticationTest" assertions="1" time="1.045548"/>
      <testcase name="users can logout" file="tests\Tenant\AuthenticationTest.php::users can logout" class="Tests\Tenant\AuthenticationTest" classname="Tests.Tenant.AuthenticationTest" assertions="3" time="0.926176"/>
    </testsuite>
    <testsuite name="Tests\Tenant\Company\CompanyTest" file="tests\Tenant\Company\CompanyTest.php" tests="3" assertions="11" errors="0" failures="1" skipped="0" time="3.630122">
      <testcase name="it can render the company profile page" file="tests\Tenant\Company\CompanyTest.php::it can render the company profile page" class="Tests\Tenant\Company\CompanyTest" classname="Tests.Tenant.Company.CompanyTest" assertions="2" time="1.938647">
        <failure type="PHPUnit\Framework\AssertionFailedError">it can render the company profile pageNot a valid Inertia response.&#13;
at vendor\inertiajs\inertia-laravel\src\Testing\AssertableInertia.php:77
at vendor\inertiajs\inertia-laravel\src\Testing\TestResponseMacros.php:19
at vendor\laravel\framework\src\Illuminate\Macroable\Traits\Macroable.php:126
at vendor\laravel\framework\src\Illuminate\Testing\TestResponse.php:1974
at tests\Tenant\Company\CompanyTest.php:44</failure>
      </testcase>
      <testcase name="it can upload a new logo for the company" file="tests\Tenant\Company\CompanyTest.php::it can upload a new logo for the company" class="Tests\Tenant\Company\CompanyTest" classname="Tests.Tenant.Company.CompanyTest" assertions="3" time="0.817416"/>
      <testcase name="it can delete a logo of the company" file="tests\Tenant\Company\CompanyTest.php::it can delete a logo of the company" class="Tests\Tenant\Company\CompanyTest" classname="Tests.Tenant.Company.CompanyTest" assertions="6" time="0.874059"/>
    </testsuite>
    <testsuite name="Tests\Tenant\Contracts\ContractTest" file="tests\Tenant\Contracts\ContractTest.php" tests="12" assertions="86" errors="0" failures="0" skipped="0" time="13.466046">
      <testcase name="it can factory a contract" file="tests\Tenant\Contracts\ContractTest.php::it can factory a contract" class="Tests\Tenant\Contracts\ContractTest" classname="Tests.Tenant.Contracts.ContractTest" assertions="3" time="1.019557"/>
      <testcase name="it can create a contract and attach asset and locations" file="tests\Tenant\Contracts\ContractTest.php::it can create a contract and attach asset and locations" class="Tests\Tenant\Contracts\ContractTest" classname="Tests.Tenant.Contracts.ContractTest" assertions="6" time="1.142237"/>
      <testcase name="it can store a site with contracts" file="tests\Tenant\Contracts\ContractTest.php::it can store a site with contracts" class="Tests\Tenant\Contracts\ContractTest" classname="Tests.Tenant.Contracts.ContractTest" assertions="6" time="1.199800"/>
      <testcase name="it can store a building with contracts" file="tests\Tenant\Contracts\ContractTest.php::it can store a building with contracts" class="Tests\Tenant\Contracts\ContractTest" classname="Tests.Tenant.Contracts.ContractTest" assertions="6" time="1.250386"/>
      <testcase name="it can store a floor with contracts" file="tests\Tenant\Contracts\ContractTest.php::it can store a floor with contracts" class="Tests\Tenant\Contracts\ContractTest" classname="Tests.Tenant.Contracts.ContractTest" assertions="6" time="1.244789"/>
      <testcase name="it can store a room with contracts" file="tests\Tenant\Contracts\ContractTest.php::it can store a room with contracts" class="Tests\Tenant\Contracts\ContractTest" classname="Tests.Tenant.Contracts.ContractTest" assertions="6" time="1.079432"/>
      <testcase name="it can update an existing contract" file="tests\Tenant\Contracts\ContractTest.php::it can update an existing contract" class="Tests\Tenant\Contracts\ContractTest" classname="Tests.Tenant.Contracts.ContractTest" assertions="3" time="1.173479"/>
      <testcase name="it can delete a contract" file="tests\Tenant\Contracts\ContractTest.php::it can delete a contract" class="Tests\Tenant\Contracts\ContractTest" classname="Tests.Tenant.Contracts.ContractTest" assertions="4" time="1.053416"/>
      <testcase name="it can render the index page with all contracts" file="tests\Tenant\Contracts\ContractTest.php::it can render the index page with all contracts" class="Tests\Tenant\Contracts\ContractTest" classname="Tests.Tenant.Contracts.ContractTest" assertions="15" time="1.121162"/>
      <testcase name="it can render the show contract page" file="tests\Tenant\Contracts\ContractTest.php::it can render the show contract page" class="Tests\Tenant\Contracts\ContractTest" classname="Tests.Tenant.Contracts.ContractTest" assertions="12" time="1.070849"/>
      <testcase name="it can render the create contract page" file="tests\Tenant\Contracts\ContractTest.php::it can render the create contract page" class="Tests\Tenant\Contracts\ContractTest" classname="Tests.Tenant.Contracts.ContractTest" assertions="9" time="1.042042"/>
      <testcase name="it can render the edit contract page" file="tests\Tenant\Contracts\ContractTest.php::it can render the edit contract page" class="Tests\Tenant\Contracts\ContractTest" classname="Tests.Tenant.Contracts.ContractTest" assertions="10" time="1.068898"/>
    </testsuite>
    <testsuite name="Tests\Tenant\Documents\AssetDocumentTest" file="tests\Tenant\Documents\AssetDocumentTest.php" tests="9" assertions="31" errors="0" failures="0" skipped="0" time="9.825284">
      <testcase name="it can attach existing documents to asset" file="tests\Tenant\Documents\AssetDocumentTest.php::it can attach existing documents to asset" class="Tests\Tenant\Documents\AssetDocumentTest" classname="Tests.Tenant.Documents.AssetDocumentTest" assertions="4" time="1.086115"/>
      <testcase name="it can upload several files to asset" file="tests\Tenant\Documents\AssetDocumentTest.php::it can upload several files to asset" class="Tests\Tenant\Documents\AssetDocumentTest" classname="Tests.Tenant.Documents.AssetDocumentTest" assertions="5" time="1.027317"/>
      <testcase name="it fails when upload wrong image mime (ie. webp)" file="tests\Tenant\Documents\AssetDocumentTest.php::it fails when upload wrong image mime (ie. webp)" class="Tests\Tenant\Documents\AssetDocumentTest" classname="Tests.Tenant.Documents.AssetDocumentTest" assertions="2" time="1.068215"/>
      <testcase name="it fails when upload exceeding document size : 4096kb" file="tests\Tenant\Documents\AssetDocumentTest.php::it fails when upload exceeding document size : 4096kb" class="Tests\Tenant\Documents\AssetDocumentTest" classname="Tests.Tenant.Documents.AssetDocumentTest" assertions="2" time="0.999413"/>
      <testcase name="it can delete a document from an asset" file="tests\Tenant\Documents\AssetDocumentTest.php::it can delete a document from an asset" class="Tests\Tenant\Documents\AssetDocumentTest" classname="Tests.Tenant.Documents.AssetDocumentTest" assertions="4" time="1.155093"/>
      <testcase name="it can remove/detach a document from an asset" file="tests\Tenant\Documents\AssetDocumentTest.php::it can remove/detach a document from an asset" class="Tests\Tenant\Documents\AssetDocumentTest" classname="Tests.Tenant.Documents.AssetDocumentTest" assertions="4" time="1.173577"/>
      <testcase name="it can update name and description a document from an asset " file="tests\Tenant\Documents\AssetDocumentTest.php::it can update name and description a document from an asset " class="Tests\Tenant\Documents\AssetDocumentTest" classname="Tests.Tenant.Documents.AssetDocumentTest" assertions="2" time="1.091625"/>
      <testcase name="it can upload a document to an asset" file="tests\Tenant\Documents\AssetDocumentTest.php::it can upload a document to an asset" class="Tests\Tenant\Documents\AssetDocumentTest" classname="Tests.Tenant.Documents.AssetDocumentTest" assertions="2" time="1.099073"/>
      <testcase name="it deletes the documents directory if it is empty" file="tests\Tenant\Documents\AssetDocumentTest.php::it deletes the documents directory if it is empty" class="Tests\Tenant\Documents\AssetDocumentTest" classname="Tests.Tenant.Documents.AssetDocumentTest" assertions="6" time="1.124855"/>
    </testsuite>
    <testsuite name="Tests\Tenant\Documents\BuildingDocumentTest" file="tests\Tenant\Documents\BuildingDocumentTest.php" tests="9" assertions="40" errors="0" failures="0" skipped="0" time="9.245631">
      <testcase name="it can attach existing documents to building" file="tests\Tenant\Documents\BuildingDocumentTest.php::it can attach existing documents to building" class="Tests\Tenant\Documents\BuildingDocumentTest" classname="Tests.Tenant.Documents.BuildingDocumentTest" assertions="4" time="1.037798"/>
      <testcase name="it can upload several files when creating building" file="tests\Tenant\Documents\BuildingDocumentTest.php::it can upload several files when creating building" class="Tests\Tenant\Documents\BuildingDocumentTest" classname="Tests.Tenant.Documents.BuildingDocumentTest" assertions="6" time="1.023675"/>
      <testcase name="it can upload documents to an existing building" file="tests\Tenant\Documents\BuildingDocumentTest.php::it can upload documents to an existing building" class="Tests\Tenant\Documents\BuildingDocumentTest" classname="Tests.Tenant.Documents.BuildingDocumentTest" assertions="6" time="1.207556"/>
      <testcase name="it can delete a document from a building" file="tests\Tenant\Documents\BuildingDocumentTest.php::it can delete a document from a building" class="Tests\Tenant\Documents\BuildingDocumentTest" classname="Tests.Tenant.Documents.BuildingDocumentTest" assertions="5" time="1.126254"/>
      <testcase name="it can remove/detach a document from a building" file="tests\Tenant\Documents\BuildingDocumentTest.php::it can remove/detach a document from a building" class="Tests\Tenant\Documents\BuildingDocumentTest" classname="Tests.Tenant.Documents.BuildingDocumentTest" assertions="4" time="1.139246"/>
      <testcase name="it fails when upload wrong image mime (ie. webp)" file="tests\Tenant\Documents\BuildingDocumentTest.php::it fails when upload wrong image mime (ie. webp)" class="Tests\Tenant\Documents\BuildingDocumentTest" classname="Tests.Tenant.Documents.BuildingDocumentTest" assertions="3" time="0.938634"/>
      <testcase name="it fails when upload exceeding document size : 4096kb" file="tests\Tenant\Documents\BuildingDocumentTest.php::it fails when upload exceeding document size : 4096kb" class="Tests\Tenant\Documents\BuildingDocumentTest" classname="Tests.Tenant.Documents.BuildingDocumentTest" assertions="2" time="0.887097"/>
      <testcase name="it can update name and description a document from a building " file="tests\Tenant\Documents\BuildingDocumentTest.php::it can update name and description a document from a building " class="Tests\Tenant\Documents\BuildingDocumentTest" classname="Tests.Tenant.Documents.BuildingDocumentTest" assertions="2" time="0.952928"/>
      <testcase name="it deletes the documents directory if it is empty" file="tests\Tenant\Documents\BuildingDocumentTest.php::it deletes the documents directory if it is empty" class="Tests\Tenant\Documents\BuildingDocumentTest" classname="Tests.Tenant.Documents.BuildingDocumentTest" assertions="8" time="0.932442"/>
    </testsuite>
    <testsuite name="Tests\Tenant\Documents\ContractDocumentTest" file="tests\Tenant\Documents\ContractDocumentTest.php" tests="4" assertions="19" errors="0" failures="0" skipped="0" time="4.420761">
      <testcase name="it can create a contract with documents" file="tests\Tenant\Documents\ContractDocumentTest.php::it can create a contract with documents" class="Tests\Tenant\Documents\ContractDocumentTest" classname="Tests.Tenant.Documents.ContractDocumentTest" assertions="8" time="1.159835"/>
      <testcase name="it can attach a document to an existing contract" file="tests\Tenant\Documents\ContractDocumentTest.php::it can attach a document to an existing contract" class="Tests\Tenant\Documents\ContractDocumentTest" classname="Tests.Tenant.Documents.ContractDocumentTest" assertions="6" time="1.147298"/>
      <testcase name="it can detach a document from an existing contract" file="tests\Tenant\Documents\ContractDocumentTest.php::it can detach a document from an existing contract" class="Tests\Tenant\Documents\ContractDocumentTest" classname="Tests.Tenant.Documents.ContractDocumentTest" assertions="3" time="1.066272"/>
      <testcase name="it can attach an existing document to an existing contract" file="tests\Tenant\Documents\ContractDocumentTest.php::it can attach an existing document to an existing contract" class="Tests\Tenant\Documents\ContractDocumentTest" classname="Tests.Tenant.Documents.ContractDocumentTest" assertions="2" time="1.047356"/>
    </testsuite>
    <testsuite name="Tests\Tenant\Documents\DocumentsTest" file="tests\Tenant\Documents\DocumentsTest.php" tests="5" assertions="18" errors="0" failures="0" skipped="0" time="5.161146">
      <testcase name="it can upload a new document (document) without attaching to a model" file="tests\Tenant\Documents\DocumentsTest.php::it can upload a new document (document) without attaching to a model" class="Tests\Tenant\Documents\DocumentsTest" classname="Tests.Tenant.Documents.DocumentsTest" assertions="4" time="0.997896"/>
      <testcase name="it can upload a new document (image) without attaching to a model" file="tests\Tenant\Documents\DocumentsTest.php::it can upload a new document (image) without attaching to a model" class="Tests\Tenant\Documents\DocumentsTest" classname="Tests.Tenant.Documents.DocumentsTest" assertions="4" time="1.000841"/>
      <testcase name="it can upload a new document (image) and compress picture" file="tests\Tenant\Documents\DocumentsTest.php::it can upload a new document (image) and compress picture" class="Tests\Tenant\Documents\DocumentsTest" classname="Tests.Tenant.Documents.DocumentsTest" assertions="5" time="0.990714"/>
      <testcase name="it increments the disk size in the company table" file="tests\Tenant\Documents\DocumentsTest.php::it increments the disk size in the company table" class="Tests\Tenant\Documents\DocumentsTest" classname="Tests.Tenant.Documents.DocumentsTest" assertions="2" time="0.959301"/>
      <testcase name="it decrements the disk size in the company table" file="tests\Tenant\Documents\DocumentsTest.php::it decrements the disk size in the company table" class="Tests\Tenant\Documents\DocumentsTest" classname="Tests.Tenant.Documents.DocumentsTest" assertions="3" time="1.212395"/>
    </testsuite>
    <testsuite name="Tests\Tenant\Documents\FloorDocumentTest" file="tests\Tenant\Documents\FloorDocumentTest.php" tests="9" assertions="40" errors="0" failures="0" skipped="0" time="11.237067">
      <testcase name="it can attach existing documents to room" file="tests\Tenant\Documents\FloorDocumentTest.php::it can attach existing documents to room" class="Tests\Tenant\Documents\FloorDocumentTest" classname="Tests.Tenant.Documents.FloorDocumentTest" assertions="4" time="1.183021"/>
      <testcase name="it can upload several files to floor" file="tests\Tenant\Documents\FloorDocumentTest.php::it can upload several files to floor" class="Tests\Tenant\Documents\FloorDocumentTest" classname="Tests.Tenant.Documents.FloorDocumentTest" assertions="6" time="1.318737"/>
      <testcase name="it can upload documents to an existing floor" file="tests\Tenant\Documents\FloorDocumentTest.php::it can upload documents to an existing floor" class="Tests\Tenant\Documents\FloorDocumentTest" classname="Tests.Tenant.Documents.FloorDocumentTest" assertions="6" time="1.174927"/>
      <testcase name="it can remove/detach a document from a site" file="tests\Tenant\Documents\FloorDocumentTest.php::it can remove/detach a document from a site" class="Tests\Tenant\Documents\FloorDocumentTest" classname="Tests.Tenant.Documents.FloorDocumentTest" assertions="4" time="1.179296"/>
      <testcase name="it can delete a document from a floor" file="tests\Tenant\Documents\FloorDocumentTest.php::it can delete a document from a floor" class="Tests\Tenant\Documents\FloorDocumentTest" classname="Tests.Tenant.Documents.FloorDocumentTest" assertions="5" time="0.975795"/>
      <testcase name="it fails when upload wrong image mime (ie. webp)" file="tests\Tenant\Documents\FloorDocumentTest.php::it fails when upload wrong image mime (ie. webp)" class="Tests\Tenant\Documents\FloorDocumentTest" classname="Tests.Tenant.Documents.FloorDocumentTest" assertions="3" time="1.197228"/>
      <testcase name="it fails when upload exceeding document size : 4096kb" file="tests\Tenant\Documents\FloorDocumentTest.php::it fails when upload exceeding document size : 4096kb" class="Tests\Tenant\Documents\FloorDocumentTest" classname="Tests.Tenant.Documents.FloorDocumentTest" assertions="2" time="1.255550"/>
      <testcase name="it can update name and description a document from a floor " file="tests\Tenant\Documents\FloorDocumentTest.php::it can update name and description a document from a floor " class="Tests\Tenant\Documents\FloorDocumentTest" classname="Tests.Tenant.Documents.FloorDocumentTest" assertions="2" time="1.423480"/>
      <testcase name="it deletes the documents directory if it is empty" file="tests\Tenant\Documents\FloorDocumentTest.php::it deletes the documents directory if it is empty" class="Tests\Tenant\Documents\FloorDocumentTest" classname="Tests.Tenant.Documents.FloorDocumentTest" assertions="8" time="1.529034"/>
    </testsuite>
    <testsuite name="Tests\Tenant\Documents\LocationDocumentUploadTest" file="tests\Tenant\Documents\LocationDocumentUploadTest.php" tests="6" assertions="20" errors="0" failures="0" skipped="0" time="7.005858">
      <testcase name="it can upload several files to asset" file="tests\Tenant\Documents\LocationDocumentUploadTest.php::it can upload several files to asset" class="Tests\Tenant\Documents\LocationDocumentUploadTest" classname="Tests.Tenant.Documents.LocationDocumentUploadTest" assertions="4" time="1.338598"/>
      <testcase name="it fails when upload wrong image mime (ie. webp)" file="tests\Tenant\Documents\LocationDocumentUploadTest.php::it fails when upload wrong image mime (ie. webp)" class="Tests\Tenant\Documents\LocationDocumentUploadTest" classname="Tests.Tenant.Documents.LocationDocumentUploadTest" assertions="3" time="0.898528"/>
      <testcase name="it fails when upload exceeding document size : 4096kb" file="tests\Tenant\Documents\LocationDocumentUploadTest.php::it fails when upload exceeding document size : 4096kb" class="Tests\Tenant\Documents\LocationDocumentUploadTest" classname="Tests.Tenant.Documents.LocationDocumentUploadTest" assertions="2" time="0.951582"/>
      <testcase name="it can delete a document from an asset" file="tests\Tenant\Documents\LocationDocumentUploadTest.php::it can delete a document from an asset" class="Tests\Tenant\Documents\LocationDocumentUploadTest" classname="Tests.Tenant.Documents.LocationDocumentUploadTest" assertions="3" time="1.104773"/>
      <testcase name="it can update name and description a document from an asset " file="tests\Tenant\Documents\LocationDocumentUploadTest.php::it can update name and description a document from an asset " class="Tests\Tenant\Documents\LocationDocumentUploadTest" classname="Tests.Tenant.Documents.LocationDocumentUploadTest" assertions="2" time="1.283297"/>
      <testcase name="it deletes the documents directory if it is empty" file="tests\Tenant\Documents\LocationDocumentUploadTest.php::it deletes the documents directory if it is empty" class="Tests\Tenant\Documents\LocationDocumentUploadTest" classname="Tests.Tenant.Documents.LocationDocumentUploadTest" assertions="6" time="1.429080"/>
    </testsuite>
    <testsuite name="Tests\Tenant\Documents\RoomDocumentTest" file="tests\Tenant\Documents\RoomDocumentTest.php" tests="9" assertions="40" errors="0" failures="0" skipped="0" time="9.768500">
      <testcase name="it can attach existing documents to room" file="tests\Tenant\Documents\RoomDocumentTest.php::it can attach existing documents to room" class="Tests\Tenant\Documents\RoomDocumentTest" classname="Tests.Tenant.Documents.RoomDocumentTest" assertions="4" time="1.390704"/>
      <testcase name="it can upload several files when creating room" file="tests\Tenant\Documents\RoomDocumentTest.php::it can upload several files when creating room" class="Tests\Tenant\Documents\RoomDocumentTest" classname="Tests.Tenant.Documents.RoomDocumentTest" assertions="6" time="1.242630"/>
      <testcase name="it can upload documents to an existing room" file="tests\Tenant\Documents\RoomDocumentTest.php::it can upload documents to an existing room" class="Tests\Tenant\Documents\RoomDocumentTest" classname="Tests.Tenant.Documents.RoomDocumentTest" assertions="6" time="1.068927"/>
      <testcase name="it can remove/detach a document from a room" file="tests\Tenant\Documents\RoomDocumentTest.php::it can remove/detach a document from a room" class="Tests\Tenant\Documents\RoomDocumentTest" classname="Tests.Tenant.Documents.RoomDocumentTest" assertions="4" time="1.083967"/>
      <testcase name="it can delete a document from a room" file="tests\Tenant\Documents\RoomDocumentTest.php::it can delete a document from a room" class="Tests\Tenant\Documents\RoomDocumentTest" classname="Tests.Tenant.Documents.RoomDocumentTest" assertions="5" time="1.109008"/>
      <testcase name="it fails when upload wrong image mime (ie. webp)" file="tests\Tenant\Documents\RoomDocumentTest.php::it fails when upload wrong image mime (ie. webp)" class="Tests\Tenant\Documents\RoomDocumentTest" classname="Tests.Tenant.Documents.RoomDocumentTest" assertions="3" time="1.014429"/>
      <testcase name="it fails when upload exceeding document size : 4096kb" file="tests\Tenant\Documents\RoomDocumentTest.php::it fails when upload exceeding document size : 4096kb" class="Tests\Tenant\Documents\RoomDocumentTest" classname="Tests.Tenant.Documents.RoomDocumentTest" assertions="2" time="0.931251"/>
      <testcase name="it can update name and description a document from a room " file="tests\Tenant\Documents\RoomDocumentTest.php::it can update name and description a document from a room " class="Tests\Tenant\Documents\RoomDocumentTest" classname="Tests.Tenant.Documents.RoomDocumentTest" assertions="2" time="0.881167"/>
      <testcase name="it deletes the documents directory if it is empty" file="tests\Tenant\Documents\RoomDocumentTest.php::it deletes the documents directory if it is empty" class="Tests\Tenant\Documents\RoomDocumentTest" classname="Tests.Tenant.Documents.RoomDocumentTest" assertions="8" time="1.046416"/>
    </testsuite>
    <testsuite name="Tests\Tenant\Documents\SiteDocumentTest" file="tests\Tenant\Documents\SiteDocumentTest.php" tests="9" assertions="37" errors="0" failures="0" skipped="0" time="8.461990">
      <testcase name="it can attach existing documents to floor" file="tests\Tenant\Documents\SiteDocumentTest.php::it can attach existing documents to floor" class="Tests\Tenant\Documents\SiteDocumentTest" classname="Tests.Tenant.Documents.SiteDocumentTest" assertions="4" time="1.247329"/>
      <testcase name="it can upload several files when site is created" file="tests\Tenant\Documents\SiteDocumentTest.php::it can upload several files when site is created" class="Tests\Tenant\Documents\SiteDocumentTest" classname="Tests.Tenant.Documents.SiteDocumentTest" assertions="5" time="1.015285"/>
      <testcase name="it can upload documents to an existing site" file="tests\Tenant\Documents\SiteDocumentTest.php::it can upload documents to an existing site" class="Tests\Tenant\Documents\SiteDocumentTest" classname="Tests.Tenant.Documents.SiteDocumentTest" assertions="6" time="0.870005"/>
      <testcase name="it can delete a document from a site" file="tests\Tenant\Documents\SiteDocumentTest.php::it can delete a document from a site" class="Tests\Tenant\Documents\SiteDocumentTest" classname="Tests.Tenant.Documents.SiteDocumentTest" assertions="5" time="0.940866"/>
      <testcase name="it can remove/detach a document from a site" file="tests\Tenant\Documents\SiteDocumentTest.php::it can remove/detach a document from a site" class="Tests\Tenant\Documents\SiteDocumentTest" classname="Tests.Tenant.Documents.SiteDocumentTest" assertions="4" time="0.929547"/>
      <testcase name="it fails when upload wrong image mime (ie. webp)" file="tests\Tenant\Documents\SiteDocumentTest.php::it fails when upload wrong image mime (ie. webp)" class="Tests\Tenant\Documents\SiteDocumentTest" classname="Tests.Tenant.Documents.SiteDocumentTest" assertions="3" time="0.868277"/>
      <testcase name="it fails when upload exceeding document size : 4096kb" file="tests\Tenant\Documents\SiteDocumentTest.php::it fails when upload exceeding document size : 4096kb" class="Tests\Tenant\Documents\SiteDocumentTest" classname="Tests.Tenant.Documents.SiteDocumentTest" assertions="2" time="0.771305"/>
      <testcase name="it can update name and description a document from a site " file="tests\Tenant\Documents\SiteDocumentTest.php::it can update name and description a document from a site " class="Tests\Tenant\Documents\SiteDocumentTest" classname="Tests.Tenant.Documents.SiteDocumentTest" assertions="2" time="0.941541"/>
      <testcase name="it deletes the documents directory if it is empty" file="tests\Tenant\Documents\SiteDocumentTest.php::it deletes the documents directory if it is empty" class="Tests\Tenant\Documents\SiteDocumentTest" classname="Tests.Tenant.Documents.SiteDocumentTest" assertions="6" time="0.877836"/>
    </testsuite>
    <testsuite name="Tests\Tenant\Imports\AssetImportTest" file="tests\Tenant\Imports\AssetImportTest.php" tests="3" assertions="18" errors="0" failures="0" skipped="0" time="38.013666">
      <testcase name="it can import and create new assets" file="tests\Tenant\Imports\AssetImportTest.php::it can import and create new assets" class="Tests\Tenant\Imports\AssetImportTest" classname="Tests.Tenant.Imports.AssetImportTest" assertions="10" time="13.498324"/>
      <testcase name="it can import and create new asset with maintenance" file="tests\Tenant\Imports\AssetImportTest.php::it can import and create new asset with maintenance" class="Tests\Tenant\Imports\AssetImportTest" classname="Tests.Tenant.Imports.AssetImportTest" assertions="5" time="12.772251"/>
      <testcase name="it can import and create new asset with depreciable" file="tests\Tenant\Imports\AssetImportTest.php::it can import and create new asset with depreciable" class="Tests\Tenant\Imports\AssetImportTest" classname="Tests.Tenant.Imports.AssetImportTest" assertions="3" time="11.743091"/>
    </testsuite>
    <testsuite name="Tests\Tenant\Interventions\APIInterventionTest" file="tests\Tenant\Interventions\APIInterventionTest.php" tests="8" assertions="22" errors="0" failures="0" skipped="0" time="8.957248">
      <testcase name="it can get an intervention" file="tests\Tenant\Interventions\APIInterventionTest.php::it can get an intervention" class="Tests\Tenant\Interventions\APIInterventionTest" classname="Tests.Tenant.Interventions.APIInterventionTest" assertions="2" time="1.019496"/>
      <testcase name="it can retrieve providers linked to an intervention (asset) to select to which one to send" file="tests\Tenant\Interventions\APIInterventionTest.php::it can retrieve providers linked to an intervention (asset) to select to which one to send" class="Tests\Tenant\Interventions\APIInterventionTest" classname="Tests.Tenant.Interventions.APIInterventionTest" assertions="3" time="1.144779"/>
      <testcase name="it can get an intervention with ticket" file="tests\Tenant\Interventions\APIInterventionTest.php::it can get an intervention with ticket" class="Tests\Tenant\Interventions\APIInterventionTest" classname="Tests.Tenant.Interventions.APIInterventionTest" assertions="2" time="1.053786"/>
      <testcase name="it can get all interventions for an ASSET" file="tests\Tenant\Interventions\APIInterventionTest.php::it can get all interventions for an ASSET" class="Tests\Tenant\Interventions\APIInterventionTest" classname="Tests.Tenant.Interventions.APIInterventionTest" assertions="3" time="1.107161"/>
      <testcase name="it can get all interventions for a SITE" file="tests\Tenant\Interventions\APIInterventionTest.php::it can get all interventions for a SITE" class="Tests\Tenant\Interventions\APIInterventionTest" classname="Tests.Tenant.Interventions.APIInterventionTest" assertions="3" time="1.139116"/>
      <testcase name="it can get all interventions for a BUILDING" file="tests\Tenant\Interventions\APIInterventionTest.php::it can get all interventions for a BUILDING" class="Tests\Tenant\Interventions\APIInterventionTest" classname="Tests.Tenant.Interventions.APIInterventionTest" assertions="3" time="1.166953"/>
      <testcase name="it can get all interventions for a FLOOR" file="tests\Tenant\Interventions\APIInterventionTest.php::it can get all interventions for a FLOOR" class="Tests\Tenant\Interventions\APIInterventionTest" classname="Tests.Tenant.Interventions.APIInterventionTest" assertions="3" time="1.119485"/>
      <testcase name="it can get all interventions for a ROOM" file="tests\Tenant\Interventions\APIInterventionTest.php::it can get all interventions for a ROOM" class="Tests\Tenant\Interventions\APIInterventionTest" classname="Tests.Tenant.Interventions.APIInterventionTest" assertions="3" time="1.206471"/>
    </testsuite>
    <testsuite name="Tests\Tenant\Interventions\InterventionActionTest" file="tests\Tenant\Interventions\InterventionActionTest.php" tests="7" assertions="29" errors="0" failures="0" skipped="0" time="7.617462">
      <testcase name="it can create a new action to an intervention" file="tests\Tenant\Interventions\InterventionActionTest.php::it can create a new action to an intervention" class="Tests\Tenant\Interventions\InterventionActionTest" classname="Tests.Tenant.Interventions.InterventionActionTest" assertions="4" time="1.124685"/>
      <testcase name="it can update an intervention action" file="tests\Tenant\Interventions\InterventionActionTest.php::it can update an intervention action" class="Tests\Tenant\Interventions\InterventionActionTest" classname="Tests.Tenant.Interventions.InterventionActionTest" assertions="6" time="1.024854"/>
      <testcase name="it can delete an intervention action" file="tests\Tenant\Interventions\InterventionActionTest.php::it can delete an intervention action" class="Tests\Tenant\Interventions\InterventionActionTest" classname="Tests.Tenant.Interventions.InterventionActionTest" assertions="5" time="1.141761"/>
      <testcase name="it sums intervention costs of intervention when action with intervention_costs is added" file="tests\Tenant\Interventions\InterventionActionTest.php::it sums intervention costs of intervention when action with intervention_costs is added" class="Tests\Tenant\Interventions\InterventionActionTest" classname="Tests.Tenant.Interventions.InterventionActionTest" assertions="3" time="1.082406"/>
      <testcase name="it updates intervention costs of intervention when action with intervention_costs is updated" file="tests\Tenant\Interventions\InterventionActionTest.php::it updates intervention costs of intervention when action with intervention_costs is updated" class="Tests\Tenant\Interventions\InterventionActionTest" classname="Tests.Tenant.Interventions.InterventionActionTest" assertions="2" time="1.020184"/>
      <testcase name="it updates intervention costs of intervention when action with intervention_costs is deleted" file="tests\Tenant\Interventions\InterventionActionTest.php::it updates intervention costs of intervention when action with intervention_costs is deleted" class="Tests\Tenant\Interventions\InterventionActionTest" classname="Tests.Tenant.Interventions.InterventionActionTest" assertions="3" time="1.085745"/>
      <testcase name="it can upload pictures for an intervention action" file="tests\Tenant\Interventions\InterventionActionTest.php::it can upload pictures for an intervention action" class="Tests\Tenant\Interventions\InterventionActionTest" classname="Tests.Tenant.Interventions.InterventionActionTest" assertions="6" time="1.137829"/>
    </testsuite>
    <testsuite name="Tests\Tenant\Interventions\InterventionProviderTest" file="tests\Tenant\Interventions\InterventionProviderTest.php" tests="6" assertions="32" errors="0" failures="0" skipped="0" time="7.088847">
      <testcase name="it can send an intervention to a provider" file="tests\Tenant\Interventions\InterventionProviderTest.php::it can send an intervention to a provider" class="Tests\Tenant\Interventions\InterventionProviderTest" classname="Tests.Tenant.Interventions.InterventionProviderTest" assertions="2" time="1.087392"/>
      <testcase name="it a provider can access to the intervention page" file="tests\Tenant\Interventions\InterventionProviderTest.php::it a provider can access to the intervention page" class="Tests\Tenant\Interventions\InterventionProviderTest" classname="Tests.Tenant.Interventions.InterventionProviderTest" assertions="18" time="1.254263"/>
      <testcase name="it can post an action as external provider" file="tests\Tenant\Interventions\InterventionProviderTest.php::it can post an action as external provider" class="Tests\Tenant\Interventions\InterventionProviderTest" classname="Tests.Tenant.Interventions.InterventionProviderTest" assertions="2" time="1.160760"/>
      <testcase name="it sends an email to the admin when a provider encoded a new action" file="tests\Tenant\Interventions\InterventionProviderTest.php::it sends an email to the admin when a provider encoded a new action" class="Tests\Tenant\Interventions\InterventionProviderTest" classname="Tests.Tenant.Interventions.InterventionProviderTest" assertions="2" time="1.115317"/>
      <testcase name="it sends an email to the maintenance manager when a provider encoded a new action" file="tests\Tenant\Interventions\InterventionProviderTest.php::it sends an email to the maintenance manager when a provider encoded a new action" class="Tests\Tenant\Interventions\InterventionProviderTest" classname="Tests.Tenant.Interventions.InterventionProviderTest" assertions="2" time="1.186242"/>
      <testcase name="it can upload pictures for an intervention action" file="tests\Tenant\Interventions\InterventionProviderTest.php::it can upload pictures for an intervention action" class="Tests\Tenant\Interventions\InterventionProviderTest" classname="Tests.Tenant.Interventions.InterventionProviderTest" assertions="6" time="1.284872"/>
    </testsuite>
    <testsuite name="Tests\Tenant\Interventions\InterventionTest" file="tests\Tenant\Interventions\InterventionTest.php" tests="11" assertions="53" errors="0" failures="0" skipped="0" time="13.331731">
      <testcase name="it can factory intervention" file="tests\Tenant\Interventions\InterventionTest.php::it can factory intervention" class="Tests\Tenant\Interventions\InterventionTest" classname="Tests.Tenant.Interventions.InterventionTest" assertions="2" time="1.160860"/>
      <testcase name="it shows an intervention page" file="tests\Tenant\Interventions\InterventionTest.php::it shows an intervention page" class="Tests\Tenant\Interventions\InterventionTest" classname="Tests.Tenant.Interventions.InterventionTest" assertions="15" time="1.248098"/>
      <testcase name="it can create a new intervention for a TICKET" file="tests\Tenant\Interventions\InterventionTest.php::it can create a new intervention for a TICKET" class="Tests\Tenant\Interventions\InterventionTest" classname="Tests.Tenant.Interventions.InterventionTest" assertions="4" time="1.147836"/>
      <testcase name="it can create a new intervention for an ASSET" file="tests\Tenant\Interventions\InterventionTest.php::it can create a new intervention for an ASSET" class="Tests\Tenant\Interventions\InterventionTest" classname="Tests.Tenant.Interventions.InterventionTest" assertions="4" time="1.109436"/>
      <testcase name="it can create a new intervention for a SITE" file="tests\Tenant\Interventions\InterventionTest.php::it can create a new intervention for a SITE" class="Tests\Tenant\Interventions\InterventionTest" classname="Tests.Tenant.Interventions.InterventionTest" assertions="4" time="1.223164"/>
      <testcase name="it can create a new intervention for a BUILDING" file="tests\Tenant\Interventions\InterventionTest.php::it can create a new intervention for a BUILDING" class="Tests\Tenant\Interventions\InterventionTest" classname="Tests.Tenant.Interventions.InterventionTest" assertions="4" time="1.269134"/>
      <testcase name="it can create a new intervention for a FLOOR" file="tests\Tenant\Interventions\InterventionTest.php::it can create a new intervention for a FLOOR" class="Tests\Tenant\Interventions\InterventionTest" classname="Tests.Tenant.Interventions.InterventionTest" assertions="4" time="1.270679"/>
      <testcase name="it can create a new intervention for a ROOM" file="tests\Tenant\Interventions\InterventionTest.php::it can create a new intervention for a ROOM" class="Tests\Tenant\Interventions\InterventionTest" classname="Tests.Tenant.Interventions.InterventionTest" assertions="4" time="1.205896"/>
      <testcase name="it can update an existing intervention" file="tests\Tenant\Interventions\InterventionTest.php::it can update an existing intervention" class="Tests\Tenant\Interventions\InterventionTest" classname="Tests.Tenant.Interventions.InterventionTest" assertions="3" time="1.313531"/>
      <testcase name="it can delete an intervention" file="tests\Tenant\Interventions\InterventionTest.php::it can delete an intervention" class="Tests\Tenant\Interventions\InterventionTest" classname="Tests.Tenant.Interventions.InterventionTest" assertions="3" time="1.267620"/>
      <testcase name="it can upload pictures when creating an intervention" file="tests\Tenant\Interventions\InterventionTest.php::it can upload pictures when creating an intervention" class="Tests\Tenant\Interventions\InterventionTest" classname="Tests.Tenant.Interventions.InterventionTest" assertions="6" time="1.115477"/>
    </testsuite>
    <testsuite name="Tests\Tenant\Locations\Buildings\BuildingPictureTest" file="tests\Tenant\Locations\Buildings\BuildingPictureTest.php" tests="5" assertions="31" errors="0" failures="0" skipped="0" time="4.912672">
      <testcase name="it can add pictures to a building" file="tests\Tenant\Locations\Buildings\BuildingPictureTest.php::it can add pictures to a building" class="Tests\Tenant\Locations\Buildings\BuildingPictureTest" classname="Tests.Tenant.Locations.Buildings.BuildingPictureTest" assertions="5" time="1.010310"/>
      <testcase name="it can retrieve all pictures from a building" file="tests\Tenant\Locations\Buildings\BuildingPictureTest.php::it can retrieve all pictures from a building" class="Tests\Tenant\Locations\Buildings\BuildingPictureTest" classname="Tests.Tenant.Locations.Buildings.BuildingPictureTest" assertions="2" time="0.901135"/>
      <testcase name="it can delete a picture from a building" file="tests\Tenant\Locations\Buildings\BuildingPictureTest.php::it can delete a picture from a building" class="Tests\Tenant\Locations\Buildings\BuildingPictureTest" classname="Tests.Tenant.Locations.Buildings.BuildingPictureTest" assertions="9" time="1.013632"/>
      <testcase name="it does not delete picture directory if directory is not empty" file="tests\Tenant\Locations\Buildings\BuildingPictureTest.php::it does not delete picture directory if directory is not empty" class="Tests\Tenant\Locations\Buildings\BuildingPictureTest" classname="Tests.Tenant.Locations.Buildings.BuildingPictureTest" assertions="8" time="1.006141"/>
      <testcase name="it deletes picture directory if directory is empty" file="tests\Tenant\Locations\Buildings\BuildingPictureTest.php::it deletes picture directory if directory is empty" class="Tests\Tenant\Locations\Buildings\BuildingPictureTest" classname="Tests.Tenant.Locations.Buildings.BuildingPictureTest" assertions="7" time="0.981454"/>
    </testsuite>
    <testsuite name="Tests\Tenant\Locations\Buildings\BuildingTest" file="tests\Tenant\Locations\Buildings\BuildingTest.php" tests="18" assertions="132" errors="0" failures="1" skipped="0" time="17.440711">
      <testcase name="it can render the index buildings page" file="tests\Tenant\Locations\Buildings\BuildingTest.php::it can render the index buildings page" class="Tests\Tenant\Locations\Buildings\BuildingTest" classname="Tests.Tenant.Locations.Buildings.BuildingTest" assertions="12" time="1.117755">
        <failure type="PHPUnit\Framework\ExpectationFailedException">it can render the index buildings pageProperty [items] does not have the expected size.
Failed asserting that actual size 13 matches expected size 3.&#13;
at vendor\laravel\framework\src\Illuminate\Testing\Fluent\Concerns\Has.php:34
at vendor\laravel\framework\src\Illuminate\Testing\Fluent\Concerns\Has.php:116
at tests\Tenant\Locations\Buildings\BuildingTest.php:39
at vendor\inertiajs\inertia-laravel\src\Testing\TestResponseMacros.php:25
at vendor\laravel\framework\src\Illuminate\Macroable\Traits\Macroable.php:126
at vendor\laravel\framework\src\Illuminate\Testing\TestResponse.php:1974
at tests\Tenant\Locations\Buildings\BuildingTest.php:36</failure>
      </testcase>
      <testcase name="it can render the create building page" file="tests\Tenant\Locations\Buildings\BuildingTest.php::it can render the create building page" class="Tests\Tenant\Locations\Buildings\BuildingTest" classname="Tests.Tenant.Locations.Buildings.BuildingTest" assertions="13" time="1.082896"/>
      <testcase name="it can create a new building with minimal information" file="tests\Tenant\Locations\Buildings\BuildingTest.php::it can create a new building with minimal information" class="Tests\Tenant\Locations\Buildings\BuildingTest" classname="Tests.Tenant.Locations.Buildings.BuildingTest" assertions="6" time="0.978749"/>
      <testcase name="it can create a new building" file="tests\Tenant\Locations\Buildings\BuildingTest.php::it can create a new building" class="Tests\Tenant\Locations\Buildings\BuildingTest" classname="Tests.Tenant.Locations.Buildings.BuildingTest" assertions="6" time="0.900826"/>
      <testcase name="it can create a new outdoor zone" file="tests\Tenant\Locations\Buildings\BuildingTest.php::it can create a new outdoor zone" class="Tests\Tenant\Locations\Buildings\BuildingTest" classname="Tests.Tenant.Locations.Buildings.BuildingTest" assertions="6" time="0.967097"/>
      <testcase name="it can create a new building with other materials" file="tests\Tenant\Locations\Buildings\BuildingTest.php::it can create a new building with other materials" class="Tests\Tenant\Locations\Buildings\BuildingTest" classname="Tests.Tenant.Locations.Buildings.BuildingTest" assertions="6" time="1.070616"/>
      <testcase name="it can attach a provider to a building's maintainable" file="tests\Tenant\Locations\Buildings\BuildingTest.php::it can attach a provider to a building's maintainable" class="Tests\Tenant\Locations\Buildings\BuildingTest" classname="Tests.Tenant.Locations.Buildings.BuildingTest" assertions="3" time="0.969153"/>
      <testcase name="it can upload several files to building" file="tests\Tenant\Locations\Buildings\BuildingTest.php::it can upload several files to building" class="Tests\Tenant\Locations\Buildings\BuildingTest" classname="Tests.Tenant.Locations.Buildings.BuildingTest" assertions="5" time="0.964427"/>
      <testcase name="it can render the show building page" file="tests\Tenant\Locations\Buildings\BuildingTest.php::it can render the show building page" class="Tests\Tenant\Locations\Buildings\BuildingTest" classname="Tests.Tenant.Locations.Buildings.BuildingTest" assertions="21" time="0.899944"/>
      <testcase name="it can render the update building page" file="tests\Tenant\Locations\Buildings\BuildingTest.php::it can render the update building page" class="Tests\Tenant\Locations\Buildings\BuildingTest" classname="Tests.Tenant.Locations.Buildings.BuildingTest" assertions="18" time="0.984997"/>
      <testcase name="it can update a building" file="tests\Tenant\Locations\Buildings\BuildingTest.php::it can update a building" class="Tests\Tenant\Locations\Buildings\BuildingTest" classname="Tests.Tenant.Locations.Buildings.BuildingTest" assertions="8" time="0.917939"/>
      <testcase name="it cannot update a building type of an existing building" file="tests\Tenant\Locations\Buildings\BuildingTest.php::it cannot update a building type of an existing building" class="Tests\Tenant\Locations\Buildings\BuildingTest" classname="Tests.Tenant.Locations.Buildings.BuildingTest" assertions="2" time="0.993026"/>
      <testcase name="it can delete a building" file="tests\Tenant\Locations\Buildings\BuildingTest.php::it can delete a building" class="Tests\Tenant\Locations\Buildings\BuildingTest" classname="Tests.Tenant.Locations.Buildings.BuildingTest" assertions="8" time="0.950453"/>
      <testcase name="it cannot delete a building which has related floors" file="tests\Tenant\Locations\Buildings\BuildingTest.php::it cannot delete a building which has related floors" class="Tests\Tenant\Locations\Buildings\BuildingTest" classname="Tests.Tenant.Locations.Buildings.BuildingTest" assertions="6" time="0.869518"/>
      <testcase name="it can update name and description of a document from a building " file="tests\Tenant\Locations\Buildings\BuildingTest.php::it can update name and description of a document from a building " class="Tests\Tenant\Locations\Buildings\BuildingTest" classname="Tests.Tenant.Locations.Buildings.BuildingTest" assertions="3" time="0.941715"/>
      <testcase name="it can add pictures to a building" file="tests\Tenant\Locations\Buildings\BuildingTest.php::it can add pictures to a building" class="Tests\Tenant\Locations\Buildings\BuildingTest" classname="Tests.Tenant.Locations.Buildings.BuildingTest" assertions="4" time="0.909476"/>
      <testcase name="it can retrieve all pictures from a building" file="tests\Tenant\Locations\Buildings\BuildingTest.php::it can retrieve all pictures from a building" class="Tests\Tenant\Locations\Buildings\BuildingTest" classname="Tests.Tenant.Locations.Buildings.BuildingTest" assertions="3" time="0.892725"/>
      <testcase name="it can retrieve all assets from a building" file="tests\Tenant\Locations\Buildings\BuildingTest.php::it can retrieve all assets from a building" class="Tests\Tenant\Locations\Buildings\BuildingTest" classname="Tests.Tenant.Locations.Buildings.BuildingTest" assertions="2" time="1.029401"/>
    </testsuite>
    <testsuite name="Tests\Tenant\Locations\Floors\FloorPictureTest" file="tests\Tenant\Locations\Floors\FloorPictureTest.php" tests="5" assertions="31" errors="0" failures="0" skipped="0" time="5.086677">
      <testcase name="it can add pictures to a floor" file="tests\Tenant\Locations\Floors\FloorPictureTest.php::it can add pictures to a floor" class="Tests\Tenant\Locations\Floors\FloorPictureTest" classname="Tests.Tenant.Locations.Floors.FloorPictureTest" assertions="5" time="1.139535"/>
      <testcase name="it can retrieve all pictures from a floor" file="tests\Tenant\Locations\Floors\FloorPictureTest.php::it can retrieve all pictures from a floor" class="Tests\Tenant\Locations\Floors\FloorPictureTest" classname="Tests.Tenant.Locations.Floors.FloorPictureTest" assertions="2" time="0.937576"/>
      <testcase name="it can delete a picture from a floor" file="tests\Tenant\Locations\Floors\FloorPictureTest.php::it can delete a picture from a floor" class="Tests\Tenant\Locations\Floors\FloorPictureTest" classname="Tests.Tenant.Locations.Floors.FloorPictureTest" assertions="9" time="0.920743"/>
      <testcase name="it does not delete picture directory if directory is not empty" file="tests\Tenant\Locations\Floors\FloorPictureTest.php::it does not delete picture directory if directory is not empty" class="Tests\Tenant\Locations\Floors\FloorPictureTest" classname="Tests.Tenant.Locations.Floors.FloorPictureTest" assertions="8" time="1.049594"/>
      <testcase name="it deletes picture directory if directory is empty" file="tests\Tenant\Locations\Floors\FloorPictureTest.php::it deletes picture directory if directory is empty" class="Tests\Tenant\Locations\Floors\FloorPictureTest" classname="Tests.Tenant.Locations.Floors.FloorPictureTest" assertions="7" time="1.039229"/>
    </testsuite>
    <testsuite name="Tests\Tenant\Locations\Floors\FloorTest" file="tests\Tenant\Locations\Floors\FloorTest.php" tests="12" assertions="108" errors="0" failures="1" skipped="0" time="12.935605">
      <testcase name="it can render the index floors page" file="tests\Tenant\Locations\Floors\FloorTest.php::it can render the index floors page" class="Tests\Tenant\Locations\Floors\FloorTest" classname="Tests.Tenant.Locations.Floors.FloorTest" assertions="12" time="1.250971">
        <failure type="PHPUnit\Framework\ExpectationFailedException">it can render the index floors pageProperty [items] does not have the expected size.
Failed asserting that actual size 13 matches expected size 3.&#13;
at vendor\laravel\framework\src\Illuminate\Testing\Fluent\Concerns\Has.php:34
at vendor\laravel\framework\src\Illuminate\Testing\Fluent\Concerns\Has.php:116
at tests\Tenant\Locations\Floors\FloorTest.php:43
at vendor\inertiajs\inertia-laravel\src\Testing\TestResponseMacros.php:25
at vendor\laravel\framework\src\Illuminate\Macroable\Traits\Macroable.php:126
at vendor\laravel\framework\src\Illuminate\Testing\TestResponse.php:1974
at tests\Tenant\Locations\Floors\FloorTest.php:40</failure>
      </testcase>
      <testcase name="it can render the create floor page" file="tests\Tenant\Locations\Floors\FloorTest.php::it can render the create floor page" class="Tests\Tenant\Locations\Floors\FloorTest" classname="Tests.Tenant.Locations.Floors.FloorTest" assertions="14" time="1.218171"/>
      <testcase name="it can create a new floor" file="tests\Tenant\Locations\Floors\FloorTest.php::it can create a new floor" class="Tests\Tenant\Locations\Floors\FloorTest" classname="Tests.Tenant.Locations.Floors.FloorTest" assertions="8" time="1.215384"/>
      <testcase name="it can create a new floor with other materials" file="tests\Tenant\Locations\Floors\FloorTest.php::it can create a new floor with other materials" class="Tests\Tenant\Locations\Floors\FloorTest" classname="Tests.Tenant.Locations.Floors.FloorTest" assertions="8" time="1.105816"/>
      <testcase name="it can attach a provider to a floor's maintainable" file="tests\Tenant\Locations\Floors\FloorTest.php::it can attach a provider to a floor's maintainable" class="Tests\Tenant\Locations\Floors\FloorTest" classname="Tests.Tenant.Locations.Floors.FloorTest" assertions="3" time="1.145388"/>
      <testcase name="it can render the show floor page" file="tests\Tenant\Locations\Floors\FloorTest.php::it can render the show floor page" class="Tests\Tenant\Locations\Floors\FloorTest" classname="Tests.Tenant.Locations.Floors.FloorTest" assertions="21" time="1.207278"/>
      <testcase name="it can render the update floor page" file="tests\Tenant\Locations\Floors\FloorTest.php::it can render the update floor page" class="Tests\Tenant\Locations\Floors\FloorTest" classname="Tests.Tenant.Locations.Floors.FloorTest" assertions="18" time="1.081279"/>
      <testcase name="it can update a floor maintainable" file="tests\Tenant\Locations\Floors\FloorTest.php::it can update a floor maintainable" class="Tests\Tenant\Locations\Floors\FloorTest" classname="Tests.Tenant.Locations.Floors.FloorTest" assertions="9" time="1.008374"/>
      <testcase name="it fails when update of an existing floor with a non existing floor type" file="tests\Tenant\Locations\Floors\FloorTest.php::it fails when update of an existing floor with a non existing floor type" class="Tests\Tenant\Locations\Floors\FloorTest" classname="Tests.Tenant.Locations.Floors.FloorTest" assertions="2" time="0.926155"/>
      <testcase name="it cannot update a floor type of an existing floor" file="tests\Tenant\Locations\Floors\FloorTest.php::it cannot update a floor type of an existing floor" class="Tests\Tenant\Locations\Floors\FloorTest" classname="Tests.Tenant.Locations.Floors.FloorTest" assertions="2" time="0.898056"/>
      <testcase name="it can delete a floor and his maintainable" file="tests\Tenant\Locations\Floors\FloorTest.php::it can delete a floor and his maintainable" class="Tests\Tenant\Locations\Floors\FloorTest" classname="Tests.Tenant.Locations.Floors.FloorTest" assertions="9" time="0.953871"/>
      <testcase name="it can retrieve all assets from a floor" file="tests\Tenant\Locations\Floors\FloorTest.php::it can retrieve all assets from a floor" class="Tests\Tenant\Locations\Floors\FloorTest" classname="Tests.Tenant.Locations.Floors.FloorTest" assertions="2" time="0.924861"/>
    </testsuite>
    <testsuite name="Tests\Tenant\Locations\Rooms\RoomPictureTest" file="tests\Tenant\Locations\Rooms\RoomPictureTest.php" tests="5" assertions="31" errors="0" failures="0" skipped="0" time="5.087602">
      <testcase name="it can add pictures to a room" file="tests\Tenant\Locations\Rooms\RoomPictureTest.php::it can add pictures to a room" class="Tests\Tenant\Locations\Rooms\RoomPictureTest" classname="Tests.Tenant.Locations.Rooms.RoomPictureTest" assertions="5" time="1.042894"/>
      <testcase name="it can retrieve all pictures from a room" file="tests\Tenant\Locations\Rooms\RoomPictureTest.php::it can retrieve all pictures from a room" class="Tests\Tenant\Locations\Rooms\RoomPictureTest" classname="Tests.Tenant.Locations.Rooms.RoomPictureTest" assertions="2" time="0.887215"/>
      <testcase name="it can delete a picture from a floor" file="tests\Tenant\Locations\Rooms\RoomPictureTest.php::it can delete a picture from a floor" class="Tests\Tenant\Locations\Rooms\RoomPictureTest" classname="Tests.Tenant.Locations.Rooms.RoomPictureTest" assertions="9" time="1.067722"/>
      <testcase name="it does not delete picture directory if directory is not empty" file="tests\Tenant\Locations\Rooms\RoomPictureTest.php::it does not delete picture directory if directory is not empty" class="Tests\Tenant\Locations\Rooms\RoomPictureTest" classname="Tests.Tenant.Locations.Rooms.RoomPictureTest" assertions="8" time="1.068313"/>
      <testcase name="it deletes picture directory if directory is empty" file="tests\Tenant\Locations\Rooms\RoomPictureTest.php::it deletes picture directory if directory is empty" class="Tests\Tenant\Locations\Rooms\RoomPictureTest" classname="Tests.Tenant.Locations.Rooms.RoomPictureTest" assertions="7" time="1.021459"/>
    </testsuite>
    <testsuite name="Tests\Tenant\Locations\Rooms\RoomTest" file="tests\Tenant\Locations\Rooms\RoomTest.php" tests="17" assertions="137" errors="0" failures="1" skipped="0" time="21.431845">
      <testcase name="it can render the index rooms page" file="tests\Tenant\Locations\Rooms\RoomTest.php::it can render the index rooms page" class="Tests\Tenant\Locations\Rooms\RoomTest" classname="Tests.Tenant.Locations.Rooms.RoomTest" assertions="12" time="1.031415">
        <failure type="PHPUnit\Framework\ExpectationFailedException">it can render the index rooms pageProperty [items] does not have the expected size.
Failed asserting that actual size 13 matches expected size 2.&#13;
at vendor\laravel\framework\src\Illuminate\Testing\Fluent\Concerns\Has.php:34
at vendor\laravel\framework\src\Illuminate\Testing\Fluent\Concerns\Has.php:116
at tests\Tenant\Locations\Rooms\RoomTest.php:57
at vendor\inertiajs\inertia-laravel\src\Testing\TestResponseMacros.php:25
at vendor\laravel\framework\src\Illuminate\Macroable\Traits\Macroable.php:126
at vendor\laravel\framework\src\Illuminate\Testing\TestResponse.php:1974
at tests\Tenant\Locations\Rooms\RoomTest.php:54</failure>
      </testcase>
      <testcase name="it can render the create room page" file="tests\Tenant\Locations\Rooms\RoomTest.php::it can render the create room page" class="Tests\Tenant\Locations\Rooms\RoomTest" classname="Tests.Tenant.Locations.Rooms.RoomTest" assertions="15" time="1.102401"/>
      <testcase name="it can create a new room" file="tests\Tenant\Locations\Rooms\RoomTest.php::it can create a new room" class="Tests\Tenant\Locations\Rooms\RoomTest" classname="Tests.Tenant.Locations.Rooms.RoomTest" assertions="6" time="1.070591"/>
      <testcase name="it can create a new room with other materials" file="tests\Tenant\Locations\Rooms\RoomTest.php::it can create a new room with other materials" class="Tests\Tenant\Locations\Rooms\RoomTest" classname="Tests.Tenant.Locations.Rooms.RoomTest" assertions="8" time="1.046840"/>
      <testcase name="it can attach a provider to a building's maintainable" file="tests\Tenant\Locations\Rooms\RoomTest.php::it can attach a provider to a building's maintainable" class="Tests\Tenant\Locations\Rooms\RoomTest" classname="Tests.Tenant.Locations.Rooms.RoomTest" assertions="3" time="1.382500"/>
      <testcase name="it can upload several files to site" file="tests\Tenant\Locations\Rooms\RoomTest.php::it can upload several files to site" class="Tests\Tenant\Locations\Rooms\RoomTest" classname="Tests.Tenant.Locations.Rooms.RoomTest" assertions="5" time="1.642851"/>
      <testcase name="it can render the show room page" file="tests\Tenant\Locations\Rooms\RoomTest.php::it can render the show room page" class="Tests\Tenant\Locations\Rooms\RoomTest" classname="Tests.Tenant.Locations.Rooms.RoomTest" assertions="21" time="1.469812"/>
      <testcase name="it can render the update room page" file="tests\Tenant\Locations\Rooms\RoomTest.php::it can render the update room page" class="Tests\Tenant\Locations\Rooms\RoomTest" classname="Tests.Tenant.Locations.Rooms.RoomTest" assertions="18" time="1.493953"/>
      <testcase name="it can update a room maintainable" file="tests\Tenant\Locations\Rooms\RoomTest.php::it can update a room maintainable" class="Tests\Tenant\Locations\Rooms\RoomTest" classname="Tests.Tenant.Locations.Rooms.RoomTest" assertions="7" time="1.419236"/>
      <testcase name="it cannot update a room type of an existing room" file="tests\Tenant\Locations\Rooms\RoomTest.php::it cannot update a room type of an existing room" class="Tests\Tenant\Locations\Rooms\RoomTest" classname="Tests.Tenant.Locations.Rooms.RoomTest" assertions="2" time="1.388656"/>
      <testcase name="it can delete a room and his maintainable" file="tests\Tenant\Locations\Rooms\RoomTest.php::it can delete a room and his maintainable" class="Tests\Tenant\Locations\Rooms\RoomTest" classname="Tests.Tenant.Locations.Rooms.RoomTest" assertions="10" time="1.645828"/>
      <testcase name="it can update name and description of a document from a site " file="tests\Tenant\Locations\Rooms\RoomTest.php::it can update name and description of a document from a site " class="Tests\Tenant\Locations\Rooms\RoomTest" classname="Tests.Tenant.Locations.Rooms.RoomTest" assertions="4" time="1.172788"/>
      <testcase name="it can upload a document to an existing room" file="tests\Tenant\Locations\Rooms\RoomTest.php::it can upload a document to an existing room" class="Tests\Tenant\Locations\Rooms\RoomTest" classname="Tests.Tenant.Locations.Rooms.RoomTest" assertions="6" time="0.944532"/>
      <testcase name="it can add pictures to a room" file="tests\Tenant\Locations\Rooms\RoomTest.php::it can add pictures to a room" class="Tests\Tenant\Locations\Rooms\RoomTest" classname="Tests.Tenant.Locations.Rooms.RoomTest" assertions="5" time="0.905750"/>
      <testcase name="it can retrieve all pictures from a room" file="tests\Tenant\Locations\Rooms\RoomTest.php::it can retrieve all pictures from a room" class="Tests\Tenant\Locations\Rooms\RoomTest" classname="Tests.Tenant.Locations.Rooms.RoomTest" assertions="4" time="0.924033"/>
      <testcase name="it can retrieve all assets from a room" file="tests\Tenant\Locations\Rooms\RoomTest.php::it can retrieve all assets from a room" class="Tests\Tenant\Locations\Rooms\RoomTest" classname="Tests.Tenant.Locations.Rooms.RoomTest" assertions="3" time="0.990156"/>
      <testcase name="it can change location type of a room and related assets" file="tests\Tenant\Locations\Rooms\RoomTest.php::it can change location type of a room and related assets" class="Tests\Tenant\Locations\Rooms\RoomTest" classname="Tests.Tenant.Locations.Rooms.RoomTest" assertions="8" time="1.800501"/>
    </testsuite>
    <testsuite name="Tests\Tenant\Locations\Sites\SitePictureTest" file="tests\Tenant\Locations\Sites\SitePictureTest.php" tests="5" assertions="31" errors="0" failures="0" skipped="0" time="4.973693">
      <testcase name="it can add pictures to a site" file="tests\Tenant\Locations\Sites\SitePictureTest.php::it can add pictures to a site" class="Tests\Tenant\Locations\Sites\SitePictureTest" classname="Tests.Tenant.Locations.Sites.SitePictureTest" assertions="5" time="1.018666"/>
      <testcase name="it can retrieve all pictures from a site" file="tests\Tenant\Locations\Sites\SitePictureTest.php::it can retrieve all pictures from a site" class="Tests\Tenant\Locations\Sites\SitePictureTest" classname="Tests.Tenant.Locations.Sites.SitePictureTest" assertions="2" time="0.814432"/>
      <testcase name="it can delete a picture from a site" file="tests\Tenant\Locations\Sites\SitePictureTest.php::it can delete a picture from a site" class="Tests\Tenant\Locations\Sites\SitePictureTest" classname="Tests.Tenant.Locations.Sites.SitePictureTest" assertions="9" time="0.981717"/>
      <testcase name="it deletes picture directory if directory is empty" file="tests\Tenant\Locations\Sites\SitePictureTest.php::it deletes picture directory if directory is empty" class="Tests\Tenant\Locations\Sites\SitePictureTest" classname="Tests.Tenant.Locations.Sites.SitePictureTest" assertions="7" time="1.121627"/>
      <testcase name="it does not delete picture directory if directory is not empty" file="tests\Tenant\Locations\Sites\SitePictureTest.php::it does not delete picture directory if directory is not empty" class="Tests\Tenant\Locations\Sites\SitePictureTest" classname="Tests.Tenant.Locations.Sites.SitePictureTest" assertions="8" time="1.037250"/>
    </testsuite>
    <testsuite name="Tests\Tenant\Locations\Sites\SiteTest" file="tests\Tenant\Locations\Sites\SiteTest.php" tests="13" assertions="93" errors="0" failures="1" skipped="0" time="11.625774">
      <testcase name="it can render the index sites page" file="tests\Tenant\Locations\Sites\SiteTest.php::it can render the index sites page" class="Tests\Tenant\Locations\Sites\SiteTest" classname="Tests.Tenant.Locations.Sites.SiteTest" assertions="12" time="0.976697">
        <failure type="PHPUnit\Framework\ExpectationFailedException">it can render the index sites pageProperty [items] does not have the expected size.
Failed asserting that actual size 13 matches expected size 3.&#13;
at vendor\laravel\framework\src\Illuminate\Testing\Fluent\Concerns\Has.php:34
at vendor\laravel\framework\src\Illuminate\Testing\Fluent\Concerns\Has.php:116
at tests\Tenant\Locations\Sites\SiteTest.php:41
at vendor\inertiajs\inertia-laravel\src\Testing\TestResponseMacros.php:25
at vendor\laravel\framework\src\Illuminate\Macroable\Traits\Macroable.php:126
at vendor\laravel\framework\src\Illuminate\Testing\TestResponse.php:1974
at tests\Tenant\Locations\Sites\SiteTest.php:38</failure>
      </testcase>
      <testcase name="it can render the create site page" file="tests\Tenant\Locations\Sites\SiteTest.php::it can render the create site page" class="Tests\Tenant\Locations\Sites\SiteTest" classname="Tests.Tenant.Locations.Sites.SiteTest" assertions="12" time="0.852082"/>
      <testcase name="it can create a new site" file="tests\Tenant\Locations\Sites\SiteTest.php::it can create a new site" class="Tests\Tenant\Locations\Sites\SiteTest" classname="Tests.Tenant.Locations.Sites.SiteTest" assertions="6" time="0.902292"/>
      <testcase name="it can create a new site with other matherials" file="tests\Tenant\Locations\Sites\SiteTest.php::it can create a new site with other matherials" class="Tests\Tenant\Locations\Sites\SiteTest" classname="Tests.Tenant.Locations.Sites.SiteTest" assertions="6" time="0.914460"/>
      <testcase name="it can render the show site page" file="tests\Tenant\Locations\Sites\SiteTest.php::it can render the show site page" class="Tests\Tenant\Locations\Sites\SiteTest" classname="Tests.Tenant.Locations.Sites.SiteTest" assertions="19" time="0.885020"/>
      <testcase name="it can render the update site page" file="tests\Tenant\Locations\Sites\SiteTest.php::it can render the update site page" class="Tests\Tenant\Locations\Sites\SiteTest" classname="Tests.Tenant.Locations.Sites.SiteTest" assertions="15" time="0.804530"/>
      <testcase name="it can update a site maintainable and his name and description" file="tests\Tenant\Locations\Sites\SiteTest.php::it can update a site maintainable and his name and description" class="Tests\Tenant\Locations\Sites\SiteTest" classname="Tests.Tenant.Locations.Sites.SiteTest" assertions="7" time="0.888348"/>
      <testcase name="it cannot update a site type of an existing site" file="tests\Tenant\Locations\Sites\SiteTest.php::it cannot update a site type of an existing site" class="Tests\Tenant\Locations\Sites\SiteTest" classname="Tests.Tenant.Locations.Sites.SiteTest" assertions="2" time="0.863955"/>
      <testcase name="it can delete a site" file="tests\Tenant\Locations\Sites\SiteTest.php::it can delete a site" class="Tests\Tenant\Locations\Sites\SiteTest" classname="Tests.Tenant.Locations.Sites.SiteTest" assertions="4" time="0.900971"/>
      <testcase name="it cannot delete a site which has buildings" file="tests\Tenant\Locations\Sites\SiteTest.php::it cannot delete a site which has buildings" class="Tests\Tenant\Locations\Sites\SiteTest" classname="Tests.Tenant.Locations.Sites.SiteTest" assertions="1" time="0.818812"/>
      <testcase name="it cannot delete a site which has related buildings and related floors" file="tests\Tenant\Locations\Sites\SiteTest.php::it cannot delete a site which has related buildings and related floors" class="Tests\Tenant\Locations\Sites\SiteTest" classname="Tests.Tenant.Locations.Sites.SiteTest" assertions="5" time="1.066577"/>
      <testcase name="it can retrieve all assets from a site" file="tests\Tenant\Locations\Sites\SiteTest.php::it can retrieve all assets from a site" class="Tests\Tenant\Locations\Sites\SiteTest" classname="Tests.Tenant.Locations.Sites.SiteTest" assertions="2" time="0.926553"/>
      <testcase name="it can attach a provider to a site's maintainable" file="tests\Tenant\Locations\Sites\SiteTest.php::it can attach a provider to a site's maintainable" class="Tests\Tenant\Locations\Sites\SiteTest" classname="Tests.Tenant.Locations.Sites.SiteTest" assertions="2" time="0.825480"/>
    </testsuite>
    <testsuite name="Tests\Tenant\Maintainable\MaintainableMaintenanceTest" file="tests\Tenant\Maintainable\MaintainableMaintenanceTest.php" tests="6" assertions="14" errors="0" failures="0" skipped="0" time="6.134102">
      <testcase name="it can create with need_maintenance without last_maintenance_date and calculates next_maintenance_date" file="tests\Tenant\Maintainable\MaintainableMaintenanceTest.php::it can create with need_maintenance without last_maintenance_date and calculates next_maintenance_date" class="Tests\Tenant\Maintainable\MaintainableMaintenanceTest" classname="Tests.Tenant.Maintainable.MaintainableMaintenanceTest" assertions="2" time="1.091179"/>
      <testcase name="it can create with need_maintenance with last_maintenance_date and calculates next_maintenance_date based on it" file="tests\Tenant\Maintainable\MaintainableMaintenanceTest.php::it can create with need_maintenance with last_maintenance_date and calculates next_maintenance_date based on it" class="Tests\Tenant\Maintainable\MaintainableMaintenanceTest" classname="Tests.Tenant.Maintainable.MaintainableMaintenanceTest" assertions="2" time="0.958854"/>
      <testcase name="it can create with need_maintenance with last_maintenance_date and next_maintenance_date" file="tests\Tenant\Maintainable\MaintainableMaintenanceTest.php::it can create with need_maintenance with last_maintenance_date and next_maintenance_date" class="Tests\Tenant\Maintainable\MaintainableMaintenanceTest" classname="Tests.Tenant.Maintainable.MaintainableMaintenanceTest" assertions="2" time="1.012407"/>
      <testcase name="it can update the maintenance frequency and change the next_maintenance_date accordingly" file="tests\Tenant\Maintainable\MaintainableMaintenanceTest.php::it can update the maintenance frequency and change the next_maintenance_date accordingly" class="Tests\Tenant\Maintainable\MaintainableMaintenanceTest" classname="Tests.Tenant.Maintainable.MaintainableMaintenanceTest" assertions="3" time="1.041150"/>
      <testcase name="it can update the maintenance_next_date manually" file="tests\Tenant\Maintainable\MaintainableMaintenanceTest.php::it can update the maintenance_next_date manually" class="Tests\Tenant\Maintainable\MaintainableMaintenanceTest" classname="Tests.Tenant.Maintainable.MaintainableMaintenanceTest" assertions="3" time="0.987090"/>
      <testcase name="it updates the next_maintenance_date when maintenance marked as done" file="tests\Tenant\Maintainable\MaintainableMaintenanceTest.php::it updates the next_maintenance_date when maintenance marked as done" class="Tests\Tenant\Maintainable\MaintainableMaintenanceTest" classname="Tests.Tenant.Maintainable.MaintainableMaintenanceTest" assertions="2" time="1.043422"/>
    </testsuite>
    <testsuite name="Tests\Tenant\Maintainable\MaintainableValidationRulesTest" file="tests\Tenant\Maintainable\MaintainableValidationRulesTest.php" tests="10" assertions="20" errors="0" failures="0" skipped="0" time="9.842789">
      <testcase name="it fails when name is more than 100 chars" file="tests\Tenant\Maintainable\MaintainableValidationRulesTest.php::it fails when name is more than 100 chars" class="Tests\Tenant\Maintainable\MaintainableValidationRulesTest" classname="Tests.Tenant.Maintainable.MaintainableValidationRulesTest" assertions="2" time="0.931022"/>
      <testcase name="it fails when description is more than 255 chars" file="tests\Tenant\Maintainable\MaintainableValidationRulesTest.php::it fails when description is more than 255 chars" class="Tests\Tenant\Maintainable\MaintainableValidationRulesTest" classname="Tests.Tenant.Maintainable.MaintainableValidationRulesTest" assertions="2" time="0.911828"/>
      <testcase name="it passes when end_warranty_date is filled and under_warranty is true" file="tests\Tenant\Maintainable\MaintainableValidationRulesTest.php::it passes when end_warranty_date is filled and under_warranty is true" class="Tests\Tenant\Maintainable\MaintainableValidationRulesTest" classname="Tests.Tenant.Maintainable.MaintainableValidationRulesTest" assertions="2" time="0.947769"/>
      <testcase name="it fails when end_warranty_date is missing and under_warranty is true" file="tests\Tenant\Maintainable\MaintainableValidationRulesTest.php::it fails when end_warranty_date is missing and under_warranty is true" class="Tests\Tenant\Maintainable\MaintainableValidationRulesTest" classname="Tests.Tenant.Maintainable.MaintainableValidationRulesTest" assertions="2" time="0.894582"/>
      <testcase name="it passes when purchase_cost has max 2 decimals and 7 digits" file="tests\Tenant\Maintainable\MaintainableValidationRulesTest.php::it passes when purchase_cost has max 2 decimals and 7 digits" class="Tests\Tenant\Maintainable\MaintainableValidationRulesTest" classname="Tests.Tenant.Maintainable.MaintainableValidationRulesTest" assertions="2" time="0.968059"/>
      <testcase name="it fails when purchase_cost is negative" file="tests\Tenant\Maintainable\MaintainableValidationRulesTest.php::it fails when purchase_cost is negative" class="Tests\Tenant\Maintainable\MaintainableValidationRulesTest" classname="Tests.Tenant.Maintainable.MaintainableValidationRulesTest" assertions="2" time="1.028702"/>
      <testcase name="it fails when purchase_cost has more than 2 decimals" file="tests\Tenant\Maintainable\MaintainableValidationRulesTest.php::it fails when purchase_cost has more than 2 decimals" class="Tests\Tenant\Maintainable\MaintainableValidationRulesTest" classname="Tests.Tenant.Maintainable.MaintainableValidationRulesTest" assertions="2" time="1.062938"/>
      <testcase name="it passes when purchase_date is equal today" file="tests\Tenant\Maintainable\MaintainableValidationRulesTest.php::it passes when purchase_date is equal today" class="Tests\Tenant\Maintainable\MaintainableValidationRulesTest" classname="Tests.Tenant.Maintainable.MaintainableValidationRulesTest" assertions="2" time="0.999865"/>
      <testcase name="it fails when purchase_date is after today" file="tests\Tenant\Maintainable\MaintainableValidationRulesTest.php::it fails when purchase_date is after today" class="Tests\Tenant\Maintainable\MaintainableValidationRulesTest" classname="Tests.Tenant.Maintainable.MaintainableValidationRulesTest" assertions="2" time="0.986444"/>
      <testcase name="it fails when end_warranty_date is before purchase_date" file="tests\Tenant\Maintainable\MaintainableValidationRulesTest.php::it fails when end_warranty_date is before purchase_date" class="Tests\Tenant\Maintainable\MaintainableValidationRulesTest" classname="Tests.Tenant.Maintainable.MaintainableValidationRulesTest" assertions="2" time="1.111579"/>
    </testsuite>
    <testsuite name="Tests\Tenant\Maintainable\MaintainableWarrantyTest" file="tests\Tenant\Maintainable\MaintainableWarrantyTest.php" tests="7" assertions="22" errors="0" failures="0" skipped="0" time="7.173542">
      <testcase name="it can create with under_warranty to true" file="tests\Tenant\Maintainable\MaintainableWarrantyTest.php::it can create with under_warranty to true" class="Tests\Tenant\Maintainable\MaintainableWarrantyTest" classname="Tests.Tenant.Maintainable.MaintainableWarrantyTest" assertions="3" time="1.155308"/>
      <testcase name="it can update end_warranty_date " file="tests\Tenant\Maintainable\MaintainableWarrantyTest.php::it can update end_warranty_date " class="Tests\Tenant\Maintainable\MaintainableWarrantyTest" classname="Tests.Tenant.Maintainable.MaintainableWarrantyTest" assertions="5" time="1.089024"/>
      <testcase name="it can update under_warranty from true to false" file="tests\Tenant\Maintainable\MaintainableWarrantyTest.php::it can update under_warranty from true to false" class="Tests\Tenant\Maintainable\MaintainableWarrantyTest" classname="Tests.Tenant.Maintainable.MaintainableWarrantyTest" assertions="5" time="1.071793"/>
      <testcase name="it can have a end_warranty_date before today if under_warranty is false" file="tests\Tenant\Maintainable\MaintainableWarrantyTest.php::it can have a end_warranty_date before today if under_warranty is false" class="Tests\Tenant\Maintainable\MaintainableWarrantyTest" classname="Tests.Tenant.Maintainable.MaintainableWarrantyTest" assertions="3" time="1.008119"/>
      <testcase name="it fails when end_warranty_date is before purchase_date" file="tests\Tenant\Maintainable\MaintainableWarrantyTest.php::it fails when end_warranty_date is before purchase_date" class="Tests\Tenant\Maintainable\MaintainableWarrantyTest" classname="Tests.Tenant.Maintainable.MaintainableWarrantyTest" assertions="2" time="0.884671"/>
      <testcase name="it passes when end_warranty_date is filled and under_warranty is true" file="tests\Tenant\Maintainable\MaintainableWarrantyTest.php::it passes when end_warranty_date is filled and under_warranty is true" class="Tests\Tenant\Maintainable\MaintainableWarrantyTest" classname="Tests.Tenant.Maintainable.MaintainableWarrantyTest" assertions="2" time="1.032817"/>
      <testcase name="it fails when end_warranty_date is missing and under_warranty is true" file="tests\Tenant\Maintainable\MaintainableWarrantyTest.php::it fails when end_warranty_date is missing and under_warranty is true" class="Tests\Tenant\Maintainable\MaintainableWarrantyTest" classname="Tests.Tenant.Maintainable.MaintainableWarrantyTest" assertions="2" time="0.931809"/>
    </testsuite>
    <testsuite name="Tests\Tenant\Maintainable\MaintenanceFrequencyTest" file="tests\Tenant\Maintainable\MaintenanceFrequencyTest.php" tests="3" assertions="3" errors="0" failures="1" skipped="0" time="3.155740">
      <testcase name="it can add maintenance frequency to asset without next_maintenance_date" file="tests\Tenant\Maintainable\MaintenanceFrequencyTest.php::it can add maintenance frequency to asset without next_maintenance_date" class="Tests\Tenant\Maintainable\MaintenanceFrequencyTest" classname="Tests.Tenant.Maintainable.MaintenanceFrequencyTest" assertions="1" time="1.072573"/>
      <testcase name="it can add maintenance frequency to asset with next_maintenance_date" file="tests\Tenant\Maintainable\MaintenanceFrequencyTest.php::it can add maintenance frequency to asset with next_maintenance_date" class="Tests\Tenant\Maintainable\MaintenanceFrequencyTest" classname="Tests.Tenant.Maintainable.MaintenanceFrequencyTest" assertions="1" time="1.007636">
        <failure type="PHPUnit\Framework\ExpectationFailedException">it can add maintenance frequency to asset with next_maintenance_dateFailed asserting that a row in the table [maintainables] matches the attributes {
    "maintenance_frequency": "monthly",
    "need_maintenance": true,
    "last_maintenance_date": "2025-05-05",
    "next_maintenance_date": "2025-10-10"
}.

Found: [
    {
        "maintenance_frequency": null,
        "need_maintenance": 0,
        "last_maintenance_date": null,
        "next_maintenance_date": null
    },
    {
        "maintenance_frequency": null,
        "need_maintenance": 0,
        "last_maintenance_date": null,
        "next_maintenance_date": null
    },
    {
        "maintenance_frequency": null,
        "need_maintenance": 0,
        "last_maintenance_date": null,
        "next_maintenance_date": null
    }
] and 1 others.&#13;
at vendor\laravel\framework\src\Illuminate\Foundation\Testing\Concerns\InteractsWithDatabase.php:43
at vendor\pestphp\pest-plugin-laravel\src\Database.php:18
at tests\Tenant\Maintainable\MaintenanceFrequencyTest.php:91</failure>
      </testcase>
      <testcase name="it can update maintenance frequency/date from asset" file="tests\Tenant\Maintainable\MaintenanceFrequencyTest.php::it can update maintenance frequency/date from asset" class="Tests\Tenant\Maintainable\MaintenanceFrequencyTest" classname="Tests.Tenant.Maintainable.MaintenanceFrequencyTest" assertions="1" time="1.075530"/>
    </testsuite>
    <testsuite name="Tests\Tenant\Maintainable\MaintenanceManagerTest" file="tests\Tenant\Maintainable\MaintenanceManagerTest.php" tests="10" assertions="40" errors="0" failures="0" skipped="0" time="10.699312">
      <testcase name="it can add a maintenance manager when creating asset" file="tests\Tenant\Maintainable\MaintenanceManagerTest.php::it can add a maintenance manager when creating asset" class="Tests\Tenant\Maintainable\MaintenanceManagerTest" classname="Tests.Tenant.Maintainable.MaintenanceManagerTest" assertions="4" time="1.103330"/>
      <testcase name="it can update a maintenance manager on existing asset" file="tests\Tenant\Maintainable\MaintenanceManagerTest.php::it can update a maintenance manager on existing asset" class="Tests\Tenant\Maintainable\MaintenanceManagerTest" classname="Tests.Tenant.Maintainable.MaintenanceManagerTest" assertions="4" time="1.145074"/>
      <testcase name="it can add a maintenance manager when creating site" file="tests\Tenant\Maintainable\MaintenanceManagerTest.php::it can add a maintenance manager when creating site" class="Tests\Tenant\Maintainable\MaintenanceManagerTest" classname="Tests.Tenant.Maintainable.MaintenanceManagerTest" assertions="4" time="1.167708"/>
      <testcase name="it can update a maintenance manager of an existing site" file="tests\Tenant\Maintainable\MaintenanceManagerTest.php::it can update a maintenance manager of an existing site" class="Tests\Tenant\Maintainable\MaintenanceManagerTest" classname="Tests.Tenant.Maintainable.MaintenanceManagerTest" assertions="4" time="1.061190"/>
      <testcase name="it can add a maintenance manager when creating building" file="tests\Tenant\Maintainable\MaintenanceManagerTest.php::it can add a maintenance manager when creating building" class="Tests\Tenant\Maintainable\MaintenanceManagerTest" classname="Tests.Tenant.Maintainable.MaintenanceManagerTest" assertions="4" time="1.014591"/>
      <testcase name="it can update a maintenance manager of existing building" file="tests\Tenant\Maintainable\MaintenanceManagerTest.php::it can update a maintenance manager of existing building" class="Tests\Tenant\Maintainable\MaintenanceManagerTest" classname="Tests.Tenant.Maintainable.MaintenanceManagerTest" assertions="4" time="1.201874"/>
      <testcase name="it can add a maintenance manager when creating floor" file="tests\Tenant\Maintainable\MaintenanceManagerTest.php::it can add a maintenance manager when creating floor" class="Tests\Tenant\Maintainable\MaintenanceManagerTest" classname="Tests.Tenant.Maintainable.MaintenanceManagerTest" assertions="4" time="1.000615"/>
      <testcase name="it can update a maintenance manager of existing floor" file="tests\Tenant\Maintainable\MaintenanceManagerTest.php::it can update a maintenance manager of existing floor" class="Tests\Tenant\Maintainable\MaintenanceManagerTest" classname="Tests.Tenant.Maintainable.MaintenanceManagerTest" assertions="4" time="1.035010"/>
      <testcase name="it can add a maintenance manager when creating room" file="tests\Tenant\Maintainable\MaintenanceManagerTest.php::it can add a maintenance manager when creating room" class="Tests\Tenant\Maintainable\MaintenanceManagerTest" classname="Tests.Tenant.Maintainable.MaintenanceManagerTest" assertions="4" time="1.021462"/>
      <testcase name="it can update a maintenance manager of existing room" file="tests\Tenant\Maintainable\MaintenanceManagerTest.php::it can update a maintenance manager of existing room" class="Tests\Tenant\Maintainable\MaintenanceManagerTest" classname="Tests.Tenant.Maintainable.MaintenanceManagerTest" assertions="4" time="0.948459"/>
    </testsuite>
    <testsuite name="Tests\Tenant\Notifications\Assets\AssetDepreciationNotificationsTest" file="tests\Tenant\Notifications\Assets\AssetDepreciationNotificationsTest.php" tests="8" assertions="34" errors="0" failures="0" skipped="0" time="10.273670">
      <testcase name="it creates depreciation notification for a new created asset" file="tests\Tenant\Notifications\Assets\AssetDepreciationNotificationsTest.php::it creates depreciation notification for a new created asset" class="Tests\Tenant\Notifications\Assets\AssetDepreciationNotificationsTest" classname="Tests.Tenant.Notifications.Assets.AssetDepreciationNotificationsTest" assertions="3" time="1.078952"/>
      <testcase name="it creates depreciation notification when depreciables passes from false to true" file="tests\Tenant\Notifications\Assets\AssetDepreciationNotificationsTest.php::it creates depreciation notification when depreciables passes from false to true" class="Tests\Tenant\Notifications\Assets\AssetDepreciationNotificationsTest" classname="Tests.Tenant.Notifications.Assets.AssetDepreciationNotificationsTest" assertions="6" time="1.072753"/>
      <testcase name="it updates depreciation notification when depreciable_end_date changes" file="tests\Tenant\Notifications\Assets\AssetDepreciationNotificationsTest.php::it updates depreciation notification when depreciable_end_date changes" class="Tests\Tenant\Notifications\Assets\AssetDepreciationNotificationsTest" classname="Tests.Tenant.Notifications.Assets.AssetDepreciationNotificationsTest" assertions="8" time="1.128071"/>
      <testcase name="it creates no notification if depreciation_end_date is in the past" file="tests\Tenant\Notifications\Assets\AssetDepreciationNotificationsTest.php::it creates no notification if depreciation_end_date is in the past" class="Tests\Tenant\Notifications\Assets\AssetDepreciationNotificationsTest" classname="Tests.Tenant.Notifications.Assets.AssetDepreciationNotificationsTest" assertions="1" time="1.139480"/>
      <testcase name="it deletes depreciation notification when depreciable passes from true to false" file="tests\Tenant\Notifications\Assets\AssetDepreciationNotificationsTest.php::it deletes depreciation notification when depreciable passes from true to false" class="Tests\Tenant\Notifications\Assets\AssetDepreciationNotificationsTest" classname="Tests.Tenant.Notifications.Assets.AssetDepreciationNotificationsTest" assertions="6" time="1.426790"/>
      <testcase name="it update notifications when notification preference depreciation_end_date of user changes" file="tests\Tenant\Notifications\Assets\AssetDepreciationNotificationsTest.php::it update notifications when notification preference depreciation_end_date of user changes" class="Tests\Tenant\Notifications\Assets\AssetDepreciationNotificationsTest" classname="Tests.Tenant.Notifications.Assets.AssetDepreciationNotificationsTest" assertions="4" time="1.457070"/>
      <testcase name="it deletes notifications when notification preference depreciation_end_date of user is disabled" file="tests\Tenant\Notifications\Assets\AssetDepreciationNotificationsTest.php::it deletes notifications when notification preference depreciation_end_date of user is disabled" class="Tests\Tenant\Notifications\Assets\AssetDepreciationNotificationsTest" classname="Tests.Tenant.Notifications.Assets.AssetDepreciationNotificationsTest" assertions="3" time="1.488030"/>
      <testcase name="it creates notifications when notification preference depreciation_end_date of user is enabled" file="tests\Tenant\Notifications\Assets\AssetDepreciationNotificationsTest.php::it creates notifications when notification preference depreciation_end_date of user is enabled" class="Tests\Tenant\Notifications\Assets\AssetDepreciationNotificationsTest" classname="Tests.Tenant.Notifications.Assets.AssetDepreciationNotificationsTest" assertions="3" time="1.482523"/>
    </testsuite>
    <testsuite name="Tests\Tenant\Notifications\Assets\AssetMaintenanceManagerNotificationsTest" file="tests\Tenant\Notifications\Assets\AssetMaintenanceManagerNotificationsTest.php" tests="3" assertions="20" errors="0" failures="0" skipped="0" time="3.859313">
      <testcase name="it creates notification when adding maintenance manager to existing asset without maintenance manager" file="tests\Tenant\Notifications\Assets\AssetMaintenanceManagerNotificationsTest.php::it creates notification when adding maintenance manager to existing asset without maintenance manager" class="Tests\Tenant\Notifications\Assets\AssetMaintenanceManagerNotificationsTest" classname="Tests.Tenant.Notifications.Assets.AssetMaintenanceManagerNotificationsTest" assertions="8" time="1.857772"/>
      <testcase name="it creates notification when replacing maintenance manager for the asset and removes notifications for old maintenance manager" file="tests\Tenant\Notifications\Assets\AssetMaintenanceManagerNotificationsTest.php::it creates notification when replacing maintenance manager for the asset and removes notifications for old maintenance manager" class="Tests\Tenant\Notifications\Assets\AssetMaintenanceManagerNotificationsTest" classname="Tests.Tenant.Notifications.Assets.AssetMaintenanceManagerNotificationsTest" assertions="4" time="0.960217"/>
      <testcase name="it deletes notification when removing maintenance_manager from existing asset" file="tests\Tenant\Notifications\Assets\AssetMaintenanceManagerNotificationsTest.php::it deletes notification when removing maintenance_manager from existing asset" class="Tests\Tenant\Notifications\Assets\AssetMaintenanceManagerNotificationsTest" classname="Tests.Tenant.Notifications.Assets.AssetMaintenanceManagerNotificationsTest" assertions="8" time="1.041324"/>
    </testsuite>
    <testsuite name="Tests\Tenant\Notifications\Assets\AssetMaintenanceNotificationsTest" file="tests\Tenant\Notifications\Assets\AssetMaintenanceNotificationsTest.php" tests="8" assertions="34" errors="0" failures="0" skipped="0" time="8.968711">
      <testcase name="it creates next maintenance date notification for a new created asset with maintenance manager" file="tests\Tenant\Notifications\Assets\AssetMaintenanceNotificationsTest.php::it creates next maintenance date notification for a new created asset with maintenance manager" class="Tests\Tenant\Notifications\Assets\AssetMaintenanceNotificationsTest" classname="Tests.Tenant.Notifications.Assets.AssetMaintenanceNotificationsTest" assertions="4" time="1.167882"/>
      <testcase name="it updates notification when updating next_maintenance_date of the asset" file="tests\Tenant\Notifications\Assets\AssetMaintenanceNotificationsTest.php::it updates notification when updating next_maintenance_date of the asset" class="Tests\Tenant\Notifications\Assets\AssetMaintenanceNotificationsTest" classname="Tests.Tenant.Notifications.Assets.AssetMaintenanceNotificationsTest" assertions="8" time="1.290973"/>
      <testcase name="it creates no notification if next_maintenance_date is in the past" file="tests\Tenant\Notifications\Assets\AssetMaintenanceNotificationsTest.php::it creates no notification if next_maintenance_date is in the past" class="Tests\Tenant\Notifications\Assets\AssetMaintenanceNotificationsTest" classname="Tests.Tenant.Notifications.Assets.AssetMaintenanceNotificationsTest" assertions="1" time="1.079091"/>
      <testcase name="it creates notification when need_maintenance passes from false to true" file="tests\Tenant\Notifications\Assets\AssetMaintenanceNotificationsTest.php::it creates notification when need_maintenance passes from false to true" class="Tests\Tenant\Notifications\Assets\AssetMaintenanceNotificationsTest" classname="Tests.Tenant.Notifications.Assets.AssetMaintenanceNotificationsTest" assertions="6" time="1.118782"/>
      <testcase name="it deletes notification when need_maintenance passes from true to false" file="tests\Tenant\Notifications\Assets\AssetMaintenanceNotificationsTest.php::it deletes notification when need_maintenance passes from true to false" class="Tests\Tenant\Notifications\Assets\AssetMaintenanceNotificationsTest" classname="Tests.Tenant.Notifications.Assets.AssetMaintenanceNotificationsTest" assertions="6" time="1.150880"/>
      <testcase name="it update notifications when notification preference next_maintenance_date of user changes" file="tests\Tenant\Notifications\Assets\AssetMaintenanceNotificationsTest.php::it update notifications when notification preference next_maintenance_date of user changes" class="Tests\Tenant\Notifications\Assets\AssetMaintenanceNotificationsTest" classname="Tests.Tenant.Notifications.Assets.AssetMaintenanceNotificationsTest" assertions="3" time="1.085005"/>
      <testcase name="it deletes notifications when notification preference next_maintenance_date of user is disabled" file="tests\Tenant\Notifications\Assets\AssetMaintenanceNotificationsTest.php::it deletes notifications when notification preference next_maintenance_date of user is disabled" class="Tests\Tenant\Notifications\Assets\AssetMaintenanceNotificationsTest" classname="Tests.Tenant.Notifications.Assets.AssetMaintenanceNotificationsTest" assertions="3" time="1.021691"/>
      <testcase name="it creates notifications when notification preference next_maintenance_date of user is enabled" file="tests\Tenant\Notifications\Assets\AssetMaintenanceNotificationsTest.php::it creates notifications when notification preference next_maintenance_date of user is enabled" class="Tests\Tenant\Notifications\Assets\AssetMaintenanceNotificationsTest" classname="Tests.Tenant.Notifications.Assets.AssetMaintenanceNotificationsTest" assertions="3" time="1.054407"/>
    </testsuite>
    <testsuite name="Tests\Tenant\Notifications\Assets\AssetNotificationsTest" file="tests\Tenant\Notifications\Assets\AssetNotificationsTest.php" tests="3" assertions="18" errors="0" failures="0" skipped="0" time="3.860009">
      <testcase name="it creates all notifications (warranty, depreciable, maintenance) for a new created asset" file="tests\Tenant\Notifications\Assets\AssetNotificationsTest.php::it creates all notifications (warranty, depreciable, maintenance) for a new created asset" class="Tests\Tenant\Notifications\Assets\AssetNotificationsTest" classname="Tests.Tenant.Notifications.Assets.AssetNotificationsTest" assertions="9" time="1.091277"/>
      <testcase name="it deletes notifications when asset is soft deleted" file="tests\Tenant\Notifications\Assets\AssetNotificationsTest.php::it deletes notifications when asset is soft deleted" class="Tests\Tenant\Notifications\Assets\AssetNotificationsTest" classname="Tests.Tenant.Notifications.Assets.AssetNotificationsTest" assertions="4" time="1.382181"/>
      <testcase name="it creates notifications when asset is restored" file="tests\Tenant\Notifications\Assets\AssetNotificationsTest.php::it creates notifications when asset is restored" class="Tests\Tenant\Notifications\Assets\AssetNotificationsTest" classname="Tests.Tenant.Notifications.Assets.AssetNotificationsTest" assertions="5" time="1.386552"/>
    </testsuite>
    <testsuite name="Tests\Tenant\Notifications\Assets\AssetWarrantyNotificationsTest" file="tests\Tenant\Notifications\Assets\AssetWarrantyNotificationsTest.php" tests="7" assertions="35" errors="0" failures="0" skipped="0" time="7.797130">
      <testcase name="it creates end of warranty notification for a new created asset" file="tests\Tenant\Notifications\Assets\AssetWarrantyNotificationsTest.php::it creates end of warranty notification for a new created asset" class="Tests\Tenant\Notifications\Assets\AssetWarrantyNotificationsTest" classname="Tests.Tenant.Notifications.Assets.AssetWarrantyNotificationsTest" assertions="4" time="1.198145"/>
      <testcase name="it updates end of warranty notification when end_warranty_date changes" file="tests\Tenant\Notifications\Assets\AssetWarrantyNotificationsTest.php::it updates end of warranty notification when end_warranty_date changes" class="Tests\Tenant\Notifications\Assets\AssetWarrantyNotificationsTest" classname="Tests.Tenant.Notifications.Assets.AssetWarrantyNotificationsTest" assertions="7" time="1.293089"/>
      <testcase name="it creates warranty notifications when under_warranty passes from false to true" file="tests\Tenant\Notifications\Assets\AssetWarrantyNotificationsTest.php::it creates warranty notifications when under_warranty passes from false to true" class="Tests\Tenant\Notifications\Assets\AssetWarrantyNotificationsTest" classname="Tests.Tenant.Notifications.Assets.AssetWarrantyNotificationsTest" assertions="7" time="1.140985"/>
      <testcase name="it deletes warranty notifications when under_warranty passes from true to false" file="tests\Tenant\Notifications\Assets\AssetWarrantyNotificationsTest.php::it deletes warranty notifications when under_warranty passes from true to false" class="Tests\Tenant\Notifications\Assets\AssetWarrantyNotificationsTest" classname="Tests.Tenant.Notifications.Assets.AssetWarrantyNotificationsTest" assertions="7" time="1.058539"/>
      <testcase name="it update notifications when notification preference end_warranty_date of user changes" file="tests\Tenant\Notifications\Assets\AssetWarrantyNotificationsTest.php::it update notifications when notification preference end_warranty_date of user changes" class="Tests\Tenant\Notifications\Assets\AssetWarrantyNotificationsTest" classname="Tests.Tenant.Notifications.Assets.AssetWarrantyNotificationsTest" assertions="4" time="1.014289"/>
      <testcase name="it deletes notifications when notification preference end_warranty_date of user is disabled" file="tests\Tenant\Notifications\Assets\AssetWarrantyNotificationsTest.php::it deletes notifications when notification preference end_warranty_date of user is disabled" class="Tests\Tenant\Notifications\Assets\AssetWarrantyNotificationsTest" classname="Tests.Tenant.Notifications.Assets.AssetWarrantyNotificationsTest" assertions="3" time="0.999871"/>
      <testcase name="it creates notifications when notification preference warranty_end_date of user is enabled" file="tests\Tenant\Notifications\Assets\AssetWarrantyNotificationsTest.php::it creates notifications when notification preference warranty_end_date of user is enabled" class="Tests\Tenant\Notifications\Assets\AssetWarrantyNotificationsTest" classname="Tests.Tenant.Notifications.Assets.AssetWarrantyNotificationsTest" assertions="3" time="1.092212"/>
    </testsuite>
    <testsuite name="Tests\Tenant\Notifications\Buildings\BuildingMaintenanceManagerNotificationsTest" file="tests\Tenant\Notifications\Buildings\BuildingMaintenanceManagerNotificationsTest.php" tests="3" assertions="20" errors="0" failures="0" skipped="0" time="2.945087">
      <testcase name="it creates notification when adding maintenance manager to existing building without maintenance manager" file="tests\Tenant\Notifications\Buildings\BuildingMaintenanceManagerNotificationsTest.php::it creates notification when adding maintenance manager to existing building without maintenance manager" class="Tests\Tenant\Notifications\Buildings\BuildingMaintenanceManagerNotificationsTest" classname="Tests.Tenant.Notifications.Buildings.BuildingMaintenanceManagerNotificationsTest" assertions="8" time="0.996192"/>
      <testcase name="it creates notification when replacing maintenance manager for the building and removes notifications for old maintenance manager" file="tests\Tenant\Notifications\Buildings\BuildingMaintenanceManagerNotificationsTest.php::it creates notification when replacing maintenance manager for the building and removes notifications for old maintenance manager" class="Tests\Tenant\Notifications\Buildings\BuildingMaintenanceManagerNotificationsTest" classname="Tests.Tenant.Notifications.Buildings.BuildingMaintenanceManagerNotificationsTest" assertions="4" time="0.965599"/>
      <testcase name="it deletes notification when removing maintenance_manager from existing site" file="tests\Tenant\Notifications\Buildings\BuildingMaintenanceManagerNotificationsTest.php::it deletes notification when removing maintenance_manager from existing site" class="Tests\Tenant\Notifications\Buildings\BuildingMaintenanceManagerNotificationsTest" classname="Tests.Tenant.Notifications.Buildings.BuildingMaintenanceManagerNotificationsTest" assertions="8" time="0.983296"/>
    </testsuite>
    <testsuite name="Tests\Tenant\Notifications\Buildings\BuildingMaintenanceNotificationsTest" file="tests\Tenant\Notifications\Buildings\BuildingMaintenanceNotificationsTest.php" tests="8" assertions="34" errors="0" failures="0" skipped="0" time="7.738316">
      <testcase name="it creates next maintenance date notification for a new created site with maintenance manager" file="tests\Tenant\Notifications\Buildings\BuildingMaintenanceNotificationsTest.php::it creates next maintenance date notification for a new created site with maintenance manager" class="Tests\Tenant\Notifications\Buildings\BuildingMaintenanceNotificationsTest" classname="Tests.Tenant.Notifications.Buildings.BuildingMaintenanceNotificationsTest" assertions="4" time="0.946835"/>
      <testcase name="it updates notification when updating next_maintenance_date of the asset" file="tests\Tenant\Notifications\Buildings\BuildingMaintenanceNotificationsTest.php::it updates notification when updating next_maintenance_date of the asset" class="Tests\Tenant\Notifications\Buildings\BuildingMaintenanceNotificationsTest" classname="Tests.Tenant.Notifications.Buildings.BuildingMaintenanceNotificationsTest" assertions="8" time="1.025918"/>
      <testcase name="it creates no notification if next_maintenance_date is in the past" file="tests\Tenant\Notifications\Buildings\BuildingMaintenanceNotificationsTest.php::it creates no notification if next_maintenance_date is in the past" class="Tests\Tenant\Notifications\Buildings\BuildingMaintenanceNotificationsTest" classname="Tests.Tenant.Notifications.Buildings.BuildingMaintenanceNotificationsTest" assertions="1" time="0.918832"/>
      <testcase name="it creates notification when need_maintenance passes from false to true" file="tests\Tenant\Notifications\Buildings\BuildingMaintenanceNotificationsTest.php::it creates notification when need_maintenance passes from false to true" class="Tests\Tenant\Notifications\Buildings\BuildingMaintenanceNotificationsTest" classname="Tests.Tenant.Notifications.Buildings.BuildingMaintenanceNotificationsTest" assertions="6" time="0.954017"/>
      <testcase name="it deletes notification when need_maintenance passes from true to false" file="tests\Tenant\Notifications\Buildings\BuildingMaintenanceNotificationsTest.php::it deletes notification when need_maintenance passes from true to false" class="Tests\Tenant\Notifications\Buildings\BuildingMaintenanceNotificationsTest" classname="Tests.Tenant.Notifications.Buildings.BuildingMaintenanceNotificationsTest" assertions="6" time="0.948895"/>
      <testcase name="it update notifications when notification preference next_maintenance_date of user changes" file="tests\Tenant\Notifications\Buildings\BuildingMaintenanceNotificationsTest.php::it update notifications when notification preference next_maintenance_date of user changes" class="Tests\Tenant\Notifications\Buildings\BuildingMaintenanceNotificationsTest" classname="Tests.Tenant.Notifications.Buildings.BuildingMaintenanceNotificationsTest" assertions="3" time="1.002985"/>
      <testcase name="it deletes notifications when notification preference next_maintenance_date of user is disabled" file="tests\Tenant\Notifications\Buildings\BuildingMaintenanceNotificationsTest.php::it deletes notifications when notification preference next_maintenance_date of user is disabled" class="Tests\Tenant\Notifications\Buildings\BuildingMaintenanceNotificationsTest" classname="Tests.Tenant.Notifications.Buildings.BuildingMaintenanceNotificationsTest" assertions="3" time="0.953062"/>
      <testcase name="it creates notifications when notification preference next_maintenance_date of user is enabled" file="tests\Tenant\Notifications\Buildings\BuildingMaintenanceNotificationsTest.php::it creates notifications when notification preference next_maintenance_date of user is enabled" class="Tests\Tenant\Notifications\Buildings\BuildingMaintenanceNotificationsTest" classname="Tests.Tenant.Notifications.Buildings.BuildingMaintenanceNotificationsTest" assertions="3" time="0.987770"/>
    </testsuite>
    <testsuite name="Tests\Tenant\Notifications\Buildings\BuildingNotificationTest" file="tests\Tenant\Notifications\Buildings\BuildingNotificationTest.php" tests="2" assertions="10" errors="0" failures="0" skipped="0" time="1.862368">
      <testcase name="it creates notifications (maintenance, warranty) for a new created building" file="tests\Tenant\Notifications\Buildings\BuildingNotificationTest.php::it creates notifications (maintenance, warranty) for a new created building" class="Tests\Tenant\Notifications\Buildings\BuildingNotificationTest" classname="Tests.Tenant.Notifications.Buildings.BuildingNotificationTest" assertions="5" time="0.963885"/>
      <testcase name="it deletes notifications when building is deleted" file="tests\Tenant\Notifications\Buildings\BuildingNotificationTest.php::it deletes notifications when building is deleted" class="Tests\Tenant\Notifications\Buildings\BuildingNotificationTest" classname="Tests.Tenant.Notifications.Buildings.BuildingNotificationTest" assertions="5" time="0.898483"/>
    </testsuite>
    <testsuite name="Tests\Tenant\Notifications\Buildings\BuildingWarrantyNotificationsTest" file="tests\Tenant\Notifications\Buildings\BuildingWarrantyNotificationsTest.php" tests="7" assertions="38" errors="0" failures="0" skipped="0" time="6.702853">
      <testcase name="it creates end of warranty notification for a new created building" file="tests\Tenant\Notifications\Buildings\BuildingWarrantyNotificationsTest.php::it creates end of warranty notification for a new created building" class="Tests\Tenant\Notifications\Buildings\BuildingWarrantyNotificationsTest" classname="Tests.Tenant.Notifications.Buildings.BuildingWarrantyNotificationsTest" assertions="4" time="0.957293"/>
      <testcase name="it updates end of warranty notification when end_warranty_date changes" file="tests\Tenant\Notifications\Buildings\BuildingWarrantyNotificationsTest.php::it updates end of warranty notification when end_warranty_date changes" class="Tests\Tenant\Notifications\Buildings\BuildingWarrantyNotificationsTest" classname="Tests.Tenant.Notifications.Buildings.BuildingWarrantyNotificationsTest" assertions="7" time="0.992784"/>
      <testcase name="it creates warranty notifications when under_warranty passes from false to true" file="tests\Tenant\Notifications\Buildings\BuildingWarrantyNotificationsTest.php::it creates warranty notifications when under_warranty passes from false to true" class="Tests\Tenant\Notifications\Buildings\BuildingWarrantyNotificationsTest" classname="Tests.Tenant.Notifications.Buildings.BuildingWarrantyNotificationsTest" assertions="7" time="0.874946"/>
      <testcase name="it deletes warranty notifications when under_warranty passes from true to false" file="tests\Tenant\Notifications\Buildings\BuildingWarrantyNotificationsTest.php::it deletes warranty notifications when under_warranty passes from true to false" class="Tests\Tenant\Notifications\Buildings\BuildingWarrantyNotificationsTest" classname="Tests.Tenant.Notifications.Buildings.BuildingWarrantyNotificationsTest" assertions="7" time="1.016837"/>
      <testcase name="it update notifications when notification preference end_warranty_date of user changes" file="tests\Tenant\Notifications\Buildings\BuildingWarrantyNotificationsTest.php::it update notifications when notification preference end_warranty_date of user changes" class="Tests\Tenant\Notifications\Buildings\BuildingWarrantyNotificationsTest" classname="Tests.Tenant.Notifications.Buildings.BuildingWarrantyNotificationsTest" assertions="7" time="0.941349"/>
      <testcase name="it deletes notifications when notification preference end_warranty_date of user is disabled" file="tests\Tenant\Notifications\Buildings\BuildingWarrantyNotificationsTest.php::it deletes notifications when notification preference end_warranty_date of user is disabled" class="Tests\Tenant\Notifications\Buildings\BuildingWarrantyNotificationsTest" classname="Tests.Tenant.Notifications.Buildings.BuildingWarrantyNotificationsTest" assertions="3" time="0.925956"/>
      <testcase name="it creates notifications when notification preference warranty_end_date of user is enabled" file="tests\Tenant\Notifications\Buildings\BuildingWarrantyNotificationsTest.php::it creates notifications when notification preference warranty_end_date of user is enabled" class="Tests\Tenant\Notifications\Buildings\BuildingWarrantyNotificationsTest" classname="Tests.Tenant.Notifications.Buildings.BuildingWarrantyNotificationsTest" assertions="3" time="0.993687"/>
    </testsuite>
    <testsuite name="Tests\Tenant\Notifications\Contracts\ContractEndDateNotificationsTest" file="tests\Tenant\Notifications\Contracts\ContractEndDateNotificationsTest.php" tests="5" assertions="20" errors="0" failures="0" skipped="0" time="5.283000">
      <testcase name="it creates the end_date notification for a new created contract" file="tests\Tenant\Notifications\Contracts\ContractEndDateNotificationsTest.php::it creates the end_date notification for a new created contract" class="Tests\Tenant\Notifications\Contracts\ContractEndDateNotificationsTest" classname="Tests.Tenant.Notifications.Contracts.ContractEndDateNotificationsTest" assertions="3" time="1.235716"/>
      <testcase name="it update notifications when notification_delay_days preference for end_date of user changes" file="tests\Tenant\Notifications\Contracts\ContractEndDateNotificationsTest.php::it update notifications when notification_delay_days preference for end_date of user changes" class="Tests\Tenant\Notifications\Contracts\ContractEndDateNotificationsTest" classname="Tests.Tenant.Notifications.Contracts.ContractEndDateNotificationsTest" assertions="5" time="1.030814"/>
      <testcase name="it deletes notifications when notification preference end_date of user is disabled" file="tests\Tenant\Notifications\Contracts\ContractEndDateNotificationsTest.php::it deletes notifications when notification preference end_date of user is disabled" class="Tests\Tenant\Notifications\Contracts\ContractEndDateNotificationsTest" classname="Tests.Tenant.Notifications.Contracts.ContractEndDateNotificationsTest" assertions="5" time="0.943020"/>
      <testcase name="it creates notifications when notification preference end_date of user is enabled" file="tests\Tenant\Notifications\Contracts\ContractEndDateNotificationsTest.php::it creates notifications when notification preference end_date of user is enabled" class="Tests\Tenant\Notifications\Contracts\ContractEndDateNotificationsTest" classname="Tests.Tenant.Notifications.Contracts.ContractEndDateNotificationsTest" assertions="4" time="1.030341"/>
      <testcase name="it updates notification for a specific contract when end_date changes" file="tests\Tenant\Notifications\Contracts\ContractEndDateNotificationsTest.php::it updates notification for a specific contract when end_date changes" class="Tests\Tenant\Notifications\Contracts\ContractEndDateNotificationsTest" classname="Tests.Tenant.Notifications.Contracts.ContractEndDateNotificationsTest" assertions="3" time="1.043109"/>
    </testsuite>
    <testsuite name="Tests\Tenant\Notifications\Contracts\ContractNoticePeriodNotificationsTest" file="tests\Tenant\Notifications\Contracts\ContractNoticePeriodNotificationsTest.php" tests="5" assertions="20" errors="0" failures="0" skipped="0" time="5.505897">
      <testcase name="it creates the notice_date notification for a new created contract" file="tests\Tenant\Notifications\Contracts\ContractNoticePeriodNotificationsTest.php::it creates the notice_date notification for a new created contract" class="Tests\Tenant\Notifications\Contracts\ContractNoticePeriodNotificationsTest" classname="Tests.Tenant.Notifications.Contracts.ContractNoticePeriodNotificationsTest" assertions="2" time="0.982070"/>
      <testcase name="it update notifications when notification_delay_days preference for notice_date of user changes" file="tests\Tenant\Notifications\Contracts\ContractNoticePeriodNotificationsTest.php::it update notifications when notification_delay_days preference for notice_date of user changes" class="Tests\Tenant\Notifications\Contracts\ContractNoticePeriodNotificationsTest" classname="Tests.Tenant.Notifications.Contracts.ContractNoticePeriodNotificationsTest" assertions="6" time="1.217019"/>
      <testcase name="it deletes notifications when notification preference notice_date of user is disabled" file="tests\Tenant\Notifications\Contracts\ContractNoticePeriodNotificationsTest.php::it deletes notifications when notification preference notice_date of user is disabled" class="Tests\Tenant\Notifications\Contracts\ContractNoticePeriodNotificationsTest" classname="Tests.Tenant.Notifications.Contracts.ContractNoticePeriodNotificationsTest" assertions="4" time="1.075213"/>
      <testcase name="it creates notifications when notification preference notice_date of user is enabled" file="tests\Tenant\Notifications\Contracts\ContractNoticePeriodNotificationsTest.php::it creates notifications when notification preference notice_date of user is enabled" class="Tests\Tenant\Notifications\Contracts\ContractNoticePeriodNotificationsTest" classname="Tests.Tenant.Notifications.Contracts.ContractNoticePeriodNotificationsTest" assertions="5" time="1.079149"/>
      <testcase name="it updates notification for a specific contract when notice_period changes" file="tests\Tenant\Notifications\Contracts\ContractNoticePeriodNotificationsTest.php::it updates notification for a specific contract when notice_period changes" class="Tests\Tenant\Notifications\Contracts\ContractNoticePeriodNotificationsTest" classname="Tests.Tenant.Notifications.Contracts.ContractNoticePeriodNotificationsTest" assertions="3" time="1.152446"/>
    </testsuite>
    <testsuite name="Tests\Tenant\Notifications\Floors\FloorMaintenanceManagerNotificationsTest" file="tests\Tenant\Notifications\Floors\FloorMaintenanceManagerNotificationsTest.php" tests="3" assertions="20" errors="0" failures="0" skipped="0" time="3.050106">
      <testcase name="it creates notification when adding maintenance manager to existing building without maintenance manager" file="tests\Tenant\Notifications\Floors\FloorMaintenanceManagerNotificationsTest.php::it creates notification when adding maintenance manager to existing building without maintenance manager" class="Tests\Tenant\Notifications\Floors\FloorMaintenanceManagerNotificationsTest" classname="Tests.Tenant.Notifications.Floors.FloorMaintenanceManagerNotificationsTest" assertions="8" time="1.054132"/>
      <testcase name="it creates notification when replacing maintenance manager for the building and removes notifications for old maintenance manager" file="tests\Tenant\Notifications\Floors\FloorMaintenanceManagerNotificationsTest.php::it creates notification when replacing maintenance manager for the building and removes notifications for old maintenance manager" class="Tests\Tenant\Notifications\Floors\FloorMaintenanceManagerNotificationsTest" classname="Tests.Tenant.Notifications.Floors.FloorMaintenanceManagerNotificationsTest" assertions="4" time="0.957845"/>
      <testcase name="it deletes notification when removing maintenance_manager from existing site" file="tests\Tenant\Notifications\Floors\FloorMaintenanceManagerNotificationsTest.php::it deletes notification when removing maintenance_manager from existing site" class="Tests\Tenant\Notifications\Floors\FloorMaintenanceManagerNotificationsTest" classname="Tests.Tenant.Notifications.Floors.FloorMaintenanceManagerNotificationsTest" assertions="8" time="1.038128"/>
    </testsuite>
    <testsuite name="Tests\Tenant\Notifications\Floors\FloorMaintenanceNotificationsTest" file="tests\Tenant\Notifications\Floors\FloorMaintenanceNotificationsTest.php" tests="8" assertions="34" errors="0" failures="0" skipped="0" time="9.266276">
      <testcase name="it creates next maintenance date notification for a new created site with maintenance manager" file="tests\Tenant\Notifications\Floors\FloorMaintenanceNotificationsTest.php::it creates next maintenance date notification for a new created site with maintenance manager" class="Tests\Tenant\Notifications\Floors\FloorMaintenanceNotificationsTest" classname="Tests.Tenant.Notifications.Floors.FloorMaintenanceNotificationsTest" assertions="4" time="1.050871"/>
      <testcase name="it updates notification when updating next_maintenance_date of the asset" file="tests\Tenant\Notifications\Floors\FloorMaintenanceNotificationsTest.php::it updates notification when updating next_maintenance_date of the asset" class="Tests\Tenant\Notifications\Floors\FloorMaintenanceNotificationsTest" classname="Tests.Tenant.Notifications.Floors.FloorMaintenanceNotificationsTest" assertions="8" time="1.266739"/>
      <testcase name="it creates no notification if next_maintenance_date is in the past" file="tests\Tenant\Notifications\Floors\FloorMaintenanceNotificationsTest.php::it creates no notification if next_maintenance_date is in the past" class="Tests\Tenant\Notifications\Floors\FloorMaintenanceNotificationsTest" classname="Tests.Tenant.Notifications.Floors.FloorMaintenanceNotificationsTest" assertions="1" time="1.102639"/>
      <testcase name="it creates notification when need_maintenance passes from false to true" file="tests\Tenant\Notifications\Floors\FloorMaintenanceNotificationsTest.php::it creates notification when need_maintenance passes from false to true" class="Tests\Tenant\Notifications\Floors\FloorMaintenanceNotificationsTest" classname="Tests.Tenant.Notifications.Floors.FloorMaintenanceNotificationsTest" assertions="6" time="1.298489"/>
      <testcase name="it deletes notification when need_maintenance passes from true to false" file="tests\Tenant\Notifications\Floors\FloorMaintenanceNotificationsTest.php::it deletes notification when need_maintenance passes from true to false" class="Tests\Tenant\Notifications\Floors\FloorMaintenanceNotificationsTest" classname="Tests.Tenant.Notifications.Floors.FloorMaintenanceNotificationsTest" assertions="6" time="1.265065"/>
      <testcase name="it update notifications when notification preference next_maintenance_date of user changes" file="tests\Tenant\Notifications\Floors\FloorMaintenanceNotificationsTest.php::it update notifications when notification preference next_maintenance_date of user changes" class="Tests\Tenant\Notifications\Floors\FloorMaintenanceNotificationsTest" classname="Tests.Tenant.Notifications.Floors.FloorMaintenanceNotificationsTest" assertions="3" time="1.150269"/>
      <testcase name="it deletes notifications when notification preference next_maintenance_date of user is disabled" file="tests\Tenant\Notifications\Floors\FloorMaintenanceNotificationsTest.php::it deletes notifications when notification preference next_maintenance_date of user is disabled" class="Tests\Tenant\Notifications\Floors\FloorMaintenanceNotificationsTest" classname="Tests.Tenant.Notifications.Floors.FloorMaintenanceNotificationsTest" assertions="3" time="1.073745"/>
      <testcase name="it creates notifications when notification preference next_maintenance_date of user is enabled" file="tests\Tenant\Notifications\Floors\FloorMaintenanceNotificationsTest.php::it creates notifications when notification preference next_maintenance_date of user is enabled" class="Tests\Tenant\Notifications\Floors\FloorMaintenanceNotificationsTest" classname="Tests.Tenant.Notifications.Floors.FloorMaintenanceNotificationsTest" assertions="3" time="1.058459"/>
    </testsuite>
    <testsuite name="Tests\Tenant\Notifications\Floors\FloorNotificationTest" file="tests\Tenant\Notifications\Floors\FloorNotificationTest.php" tests="2" assertions="10" errors="0" failures="0" skipped="0" time="2.097142">
      <testcase name="it creates notifications (maintenance, warranty) for a new created building" file="tests\Tenant\Notifications\Floors\FloorNotificationTest.php::it creates notifications (maintenance, warranty) for a new created building" class="Tests\Tenant\Notifications\Floors\FloorNotificationTest" classname="Tests.Tenant.Notifications.Floors.FloorNotificationTest" assertions="5" time="1.000928"/>
      <testcase name="it deletes notifications when building is deleted" file="tests\Tenant\Notifications\Floors\FloorNotificationTest.php::it deletes notifications when building is deleted" class="Tests\Tenant\Notifications\Floors\FloorNotificationTest" classname="Tests.Tenant.Notifications.Floors.FloorNotificationTest" assertions="5" time="1.096214"/>
    </testsuite>
    <testsuite name="Tests\Tenant\Notifications\Floors\FloorWarrantyNotificationsTest" file="tests\Tenant\Notifications\Floors\FloorWarrantyNotificationsTest.php" tests="7" assertions="38" errors="0" failures="0" skipped="0" time="7.525452">
      <testcase name="it creates end of warranty notification for a new created room" file="tests\Tenant\Notifications\Floors\FloorWarrantyNotificationsTest.php::it creates end of warranty notification for a new created room" class="Tests\Tenant\Notifications\Floors\FloorWarrantyNotificationsTest" classname="Tests.Tenant.Notifications.Floors.FloorWarrantyNotificationsTest" assertions="4" time="1.083695"/>
      <testcase name="it updates end of warranty notification when end_warranty_date changes" file="tests\Tenant\Notifications\Floors\FloorWarrantyNotificationsTest.php::it updates end of warranty notification when end_warranty_date changes" class="Tests\Tenant\Notifications\Floors\FloorWarrantyNotificationsTest" classname="Tests.Tenant.Notifications.Floors.FloorWarrantyNotificationsTest" assertions="7" time="1.071289"/>
      <testcase name="it creates warranty notifications when under_warranty passes from false to true" file="tests\Tenant\Notifications\Floors\FloorWarrantyNotificationsTest.php::it creates warranty notifications when under_warranty passes from false to true" class="Tests\Tenant\Notifications\Floors\FloorWarrantyNotificationsTest" classname="Tests.Tenant.Notifications.Floors.FloorWarrantyNotificationsTest" assertions="7" time="1.083909"/>
      <testcase name="it deletes warranty notifications when under_warranty passes from true to false" file="tests\Tenant\Notifications\Floors\FloorWarrantyNotificationsTest.php::it deletes warranty notifications when under_warranty passes from true to false" class="Tests\Tenant\Notifications\Floors\FloorWarrantyNotificationsTest" classname="Tests.Tenant.Notifications.Floors.FloorWarrantyNotificationsTest" assertions="7" time="1.042025"/>
      <testcase name="it update notifications when notification preference end_warranty_date of user changes" file="tests\Tenant\Notifications\Floors\FloorWarrantyNotificationsTest.php::it update notifications when notification preference end_warranty_date of user changes" class="Tests\Tenant\Notifications\Floors\FloorWarrantyNotificationsTest" classname="Tests.Tenant.Notifications.Floors.FloorWarrantyNotificationsTest" assertions="7" time="1.095714"/>
      <testcase name="it deletes notifications when notification preference end_warranty_date of user is disabled" file="tests\Tenant\Notifications\Floors\FloorWarrantyNotificationsTest.php::it deletes notifications when notification preference end_warranty_date of user is disabled" class="Tests\Tenant\Notifications\Floors\FloorWarrantyNotificationsTest" classname="Tests.Tenant.Notifications.Floors.FloorWarrantyNotificationsTest" assertions="3" time="1.092777"/>
      <testcase name="it creates notifications when notification preference warranty_end_date of user is enabled" file="tests\Tenant\Notifications\Floors\FloorWarrantyNotificationsTest.php::it creates notifications when notification preference warranty_end_date of user is enabled" class="Tests\Tenant\Notifications\Floors\FloorWarrantyNotificationsTest" classname="Tests.Tenant.Notifications.Floors.FloorWarrantyNotificationsTest" assertions="3" time="1.056041"/>
    </testsuite>
    <testsuite name="Tests\Tenant\Notifications\Interventions\InterventionPlannedAtNotificationsTest" file="tests\Tenant\Notifications\Interventions\InterventionPlannedAtNotificationsTest.php" tests="15" assertions="59" errors="0" failures="3" skipped="0" time="19.531924">
      <testcase name="it creates a user preference &quot;planned_at&quot; notification when user (admin) is created" file="tests\Tenant\Notifications\Interventions\InterventionPlannedAtNotificationsTest.php::it creates a user preference &quot;planned_at&quot; notification when user (admin) is created" class="Tests\Tenant\Notifications\Interventions\InterventionPlannedAtNotificationsTest" classname="Tests.Tenant.Notifications.Interventions.InterventionPlannedAtNotificationsTest" assertions="2" time="1.329714"/>
      <testcase name="it creates a user preference &quot;planned_at&quot; notification when user (maintenance manager) is created" file="tests\Tenant\Notifications\Interventions\InterventionPlannedAtNotificationsTest.php::it creates a user preference &quot;planned_at&quot; notification when user (maintenance manager) is created" class="Tests\Tenant\Notifications\Interventions\InterventionPlannedAtNotificationsTest" classname="Tests.Tenant.Notifications.Interventions.InterventionPlannedAtNotificationsTest" assertions="2" time="1.277232"/>
      <testcase name="it creates the planned_at notification for a new created intervention for an ASSET" file="tests\Tenant\Notifications\Interventions\InterventionPlannedAtNotificationsTest.php::it creates the planned_at notification for a new created intervention for an ASSET" class="Tests\Tenant\Notifications\Interventions\InterventionPlannedAtNotificationsTest" classname="Tests.Tenant.Notifications.Interventions.InterventionPlannedAtNotificationsTest" assertions="4" time="1.129140"/>
      <testcase name="it adds notification when maintenance_manager is linked to an ASSET" file="tests\Tenant\Notifications\Interventions\InterventionPlannedAtNotificationsTest.php::it adds notification when maintenance_manager is linked to an ASSET" class="Tests\Tenant\Notifications\Interventions\InterventionPlannedAtNotificationsTest" classname="Tests.Tenant.Notifications.Interventions.InterventionPlannedAtNotificationsTest" assertions="5" time="1.228682"/>
      <testcase name="it adds notification when maintenance_manager is linked to an asset and intervention already exists" file="tests\Tenant\Notifications\Interventions\InterventionPlannedAtNotificationsTest.php::it adds notification when maintenance_manager is linked to an asset and intervention already exists" class="Tests\Tenant\Notifications\Interventions\InterventionPlannedAtNotificationsTest" classname="Tests.Tenant.Notifications.Interventions.InterventionPlannedAtNotificationsTest" assertions="7" time="1.553827"/>
      <testcase name="it does not remove notification when maintenance_manager is removed from an ASSET but maintenance_manager is also admin" file="tests\Tenant\Notifications\Interventions\InterventionPlannedAtNotificationsTest.php::it does not remove notification when maintenance_manager is removed from an ASSET but maintenance_manager is also admin" class="Tests\Tenant\Notifications\Interventions\InterventionPlannedAtNotificationsTest" classname="Tests.Tenant.Notifications.Interventions.InterventionPlannedAtNotificationsTest" assertions="6" time="1.632045"/>
      <testcase name="it removes notification when maintenance_manager is removed from an ASSET" file="tests\Tenant\Notifications\Interventions\InterventionPlannedAtNotificationsTest.php::it removes notification when maintenance_manager is removed from an ASSET" class="Tests\Tenant\Notifications\Interventions\InterventionPlannedAtNotificationsTest" classname="Tests.Tenant.Notifications.Interventions.InterventionPlannedAtNotificationsTest" assertions="6" time="1.519029"/>
      <testcase name="it does not create a planned_at notification when planned_at is not defined for intervention" file="tests\Tenant\Notifications\Interventions\InterventionPlannedAtNotificationsTest.php::it does not create a planned_at notification when planned_at is not defined for intervention" class="Tests\Tenant\Notifications\Interventions\InterventionPlannedAtNotificationsTest" classname="Tests.Tenant.Notifications.Interventions.InterventionPlannedAtNotificationsTest" assertions="4" time="1.471963"/>
      <testcase name="it updates notification when planned_at changes for an intervention" file="tests\Tenant\Notifications\Interventions\InterventionPlannedAtNotificationsTest.php::it updates notification when planned_at changes for an intervention" class="Tests\Tenant\Notifications\Interventions\InterventionPlannedAtNotificationsTest" classname="Tests.Tenant.Notifications.Interventions.InterventionPlannedAtNotificationsTest" assertions="2" time="1.572987">
        <failure type="PHPUnit\Framework\ExpectationFailedException">it updates notification when planned_at changes for an interventionExpected response status code [200] but received 302.
Failed asserting that 302 is identical to 200.&#13;
&#13;
The following errors occurred during the last request:

The selected location type is invalid.&#13;
&#13;
at vendor\laravel\framework\src\Illuminate\Testing\TestResponseAssert.php:45
at vendor\laravel\framework\src\Illuminate\Testing\TestResponse.php:174
at tests\Tenant\Notifications\Interventions\InterventionPlannedAtNotificationsTest.php:491</failure>
      </testcase>
      <testcase name="it removes planned_at notification when intervention status changes to completed" file="tests\Tenant\Notifications\Interventions\InterventionPlannedAtNotificationsTest.php::it removes planned_at notification when intervention status changes to completed" class="Tests\Tenant\Notifications\Interventions\InterventionPlannedAtNotificationsTest" classname="Tests.Tenant.Notifications.Interventions.InterventionPlannedAtNotificationsTest" assertions="1" time="1.589602">
        <failure type="PHPUnit\Framework\ExpectationFailedException">it removes planned_at notification when intervention status changes to completedExpected response status code [200] but received 302.
Failed asserting that 302 is identical to 200.&#13;
&#13;
The following errors occurred during the last request:

The selected location type is invalid.&#13;
&#13;
at vendor\laravel\framework\src\Illuminate\Testing\TestResponseAssert.php:45
at vendor\laravel\framework\src\Illuminate\Testing\TestResponse.php:174
at tests\Tenant\Notifications\Interventions\InterventionPlannedAtNotificationsTest.php:530</failure>
      </testcase>
      <testcase name="it removes planned_at notification when intervention status changes to cancelled" file="tests\Tenant\Notifications\Interventions\InterventionPlannedAtNotificationsTest.php::it removes planned_at notification when intervention status changes to cancelled" class="Tests\Tenant\Notifications\Interventions\InterventionPlannedAtNotificationsTest" classname="Tests.Tenant.Notifications.Interventions.InterventionPlannedAtNotificationsTest" assertions="1" time="1.051895">
        <failure type="PHPUnit\Framework\ExpectationFailedException">it removes planned_at notification when intervention status changes to cancelledExpected response status code [200] but received 302.
Failed asserting that 302 is identical to 200.&#13;
&#13;
The following errors occurred during the last request:

The selected location type is invalid.&#13;
&#13;
at vendor\laravel\framework\src\Illuminate\Testing\TestResponseAssert.php:45
at vendor\laravel\framework\src\Illuminate\Testing\TestResponse.php:174
at tests\Tenant\Notifications\Interventions\InterventionPlannedAtNotificationsTest.php:557</failure>
      </testcase>
      <testcase name="it deletes notification when intervention is deleted" file="tests\Tenant\Notifications\Interventions\InterventionPlannedAtNotificationsTest.php::it deletes notification when intervention is deleted" class="Tests\Tenant\Notifications\Interventions\InterventionPlannedAtNotificationsTest" classname="Tests.Tenant.Notifications.Interventions.InterventionPlannedAtNotificationsTest" assertions="3" time="1.073599"/>
      <testcase name="it deletes notifcation when user_preference planned_at is disabled" file="tests\Tenant\Notifications\Interventions\InterventionPlannedAtNotificationsTest.php::it deletes notifcation when user_preference planned_at is disabled" class="Tests\Tenant\Notifications\Interventions\InterventionPlannedAtNotificationsTest" classname="Tests.Tenant.Notifications.Interventions.InterventionPlannedAtNotificationsTest" assertions="4" time="1.023294"/>
      <testcase name="it creates notification when user_preference planned_at is enabled" file="tests\Tenant\Notifications\Interventions\InterventionPlannedAtNotificationsTest.php::it creates notification when user_preference planned_at is enabled" class="Tests\Tenant\Notifications\Interventions\InterventionPlannedAtNotificationsTest" classname="Tests.Tenant.Notifications.Interventions.InterventionPlannedAtNotificationsTest" assertions="6" time="1.055613"/>
      <testcase name="it updates notification when user_preference notification_delay_days for planned_at changes" file="tests\Tenant\Notifications\Interventions\InterventionPlannedAtNotificationsTest.php::it updates notification when user_preference notification_delay_days for planned_at changes" class="Tests\Tenant\Notifications\Interventions\InterventionPlannedAtNotificationsTest" classname="Tests.Tenant.Notifications.Interventions.InterventionPlannedAtNotificationsTest" assertions="6" time="1.023302"/>
    </testsuite>
    <testsuite name="Tests\Tenant\Notifications\Rooms\RoomMaintenanceManagerNotificationsTest" file="tests\Tenant\Notifications\Rooms\RoomMaintenanceManagerNotificationsTest.php" tests="3" assertions="20" errors="0" failures="0" skipped="0" time="3.160510">
      <testcase name="it creates notification when adding maintenance manager to existing building without maintenance manager" file="tests\Tenant\Notifications\Rooms\RoomMaintenanceManagerNotificationsTest.php::it creates notification when adding maintenance manager to existing building without maintenance manager" class="Tests\Tenant\Notifications\Rooms\RoomMaintenanceManagerNotificationsTest" classname="Tests.Tenant.Notifications.Rooms.RoomMaintenanceManagerNotificationsTest" assertions="8" time="1.138891"/>
      <testcase name="it creates notification when replacing maintenance manager for the building and removes notifications for old maintenance manager" file="tests\Tenant\Notifications\Rooms\RoomMaintenanceManagerNotificationsTest.php::it creates notification when replacing maintenance manager for the building and removes notifications for old maintenance manager" class="Tests\Tenant\Notifications\Rooms\RoomMaintenanceManagerNotificationsTest" classname="Tests.Tenant.Notifications.Rooms.RoomMaintenanceManagerNotificationsTest" assertions="4" time="1.006085"/>
      <testcase name="it deletes notification when removing maintenance_manager from existing site" file="tests\Tenant\Notifications\Rooms\RoomMaintenanceManagerNotificationsTest.php::it deletes notification when removing maintenance_manager from existing site" class="Tests\Tenant\Notifications\Rooms\RoomMaintenanceManagerNotificationsTest" classname="Tests.Tenant.Notifications.Rooms.RoomMaintenanceManagerNotificationsTest" assertions="8" time="1.015534"/>
    </testsuite>
    <testsuite name="Tests\Tenant\Notifications\Rooms\RoomMaintenanceNotificationsTest" file="tests\Tenant\Notifications\Rooms\RoomMaintenanceNotificationsTest.php" tests="8" assertions="34" errors="0" failures="0" skipped="0" time="8.569543">
      <testcase name="it creates next maintenance date notification for a new created site with maintenance manager" file="tests\Tenant\Notifications\Rooms\RoomMaintenanceNotificationsTest.php::it creates next maintenance date notification for a new created site with maintenance manager" class="Tests\Tenant\Notifications\Rooms\RoomMaintenanceNotificationsTest" classname="Tests.Tenant.Notifications.Rooms.RoomMaintenanceNotificationsTest" assertions="4" time="0.953260"/>
      <testcase name="it updates notification when updating next_maintenance_date of the asset" file="tests\Tenant\Notifications\Rooms\RoomMaintenanceNotificationsTest.php::it updates notification when updating next_maintenance_date of the asset" class="Tests\Tenant\Notifications\Rooms\RoomMaintenanceNotificationsTest" classname="Tests.Tenant.Notifications.Rooms.RoomMaintenanceNotificationsTest" assertions="8" time="1.105560"/>
      <testcase name="it creates no notification if next_maintenance_date is in the past" file="tests\Tenant\Notifications\Rooms\RoomMaintenanceNotificationsTest.php::it creates no notification if next_maintenance_date is in the past" class="Tests\Tenant\Notifications\Rooms\RoomMaintenanceNotificationsTest" classname="Tests.Tenant.Notifications.Rooms.RoomMaintenanceNotificationsTest" assertions="1" time="0.936435"/>
      <testcase name="it creates notification when need_maintenance passes from false to true" file="tests\Tenant\Notifications\Rooms\RoomMaintenanceNotificationsTest.php::it creates notification when need_maintenance passes from false to true" class="Tests\Tenant\Notifications\Rooms\RoomMaintenanceNotificationsTest" classname="Tests.Tenant.Notifications.Rooms.RoomMaintenanceNotificationsTest" assertions="6" time="0.946200"/>
      <testcase name="it deletes notification when need_maintenance passes from true to false" file="tests\Tenant\Notifications\Rooms\RoomMaintenanceNotificationsTest.php::it deletes notification when need_maintenance passes from true to false" class="Tests\Tenant\Notifications\Rooms\RoomMaintenanceNotificationsTest" classname="Tests.Tenant.Notifications.Rooms.RoomMaintenanceNotificationsTest" assertions="6" time="1.028239"/>
      <testcase name="it update notifications when notification preference next_maintenance_date of user changes" file="tests\Tenant\Notifications\Rooms\RoomMaintenanceNotificationsTest.php::it update notifications when notification preference next_maintenance_date of user changes" class="Tests\Tenant\Notifications\Rooms\RoomMaintenanceNotificationsTest" classname="Tests.Tenant.Notifications.Rooms.RoomMaintenanceNotificationsTest" assertions="3" time="1.122352"/>
      <testcase name="it deletes notifications when notification preference next_maintenance_date of user is disabled" file="tests\Tenant\Notifications\Rooms\RoomMaintenanceNotificationsTest.php::it deletes notifications when notification preference next_maintenance_date of user is disabled" class="Tests\Tenant\Notifications\Rooms\RoomMaintenanceNotificationsTest" classname="Tests.Tenant.Notifications.Rooms.RoomMaintenanceNotificationsTest" assertions="3" time="1.298145"/>
      <testcase name="it creates notifications when notification preference next_maintenance_date of user is enabled" file="tests\Tenant\Notifications\Rooms\RoomMaintenanceNotificationsTest.php::it creates notifications when notification preference next_maintenance_date of user is enabled" class="Tests\Tenant\Notifications\Rooms\RoomMaintenanceNotificationsTest" classname="Tests.Tenant.Notifications.Rooms.RoomMaintenanceNotificationsTest" assertions="3" time="1.179353"/>
    </testsuite>
    <testsuite name="Tests\Tenant\Notifications\Rooms\RoomNotificationTest" file="tests\Tenant\Notifications\Rooms\RoomNotificationTest.php" tests="2" assertions="10" errors="0" failures="0" skipped="0" time="2.280001">
      <testcase name="it creates notifications (maintenance, warranty) for a new created building" file="tests\Tenant\Notifications\Rooms\RoomNotificationTest.php::it creates notifications (maintenance, warranty) for a new created building" class="Tests\Tenant\Notifications\Rooms\RoomNotificationTest" classname="Tests.Tenant.Notifications.Rooms.RoomNotificationTest" assertions="5" time="1.159814"/>
      <testcase name="it deletes notifications when building is deleted" file="tests\Tenant\Notifications\Rooms\RoomNotificationTest.php::it deletes notifications when building is deleted" class="Tests\Tenant\Notifications\Rooms\RoomNotificationTest" classname="Tests.Tenant.Notifications.Rooms.RoomNotificationTest" assertions="5" time="1.120187"/>
    </testsuite>
    <testsuite name="Tests\Tenant\Notifications\Rooms\RoomWarrantyNotificationsTest" file="tests\Tenant\Notifications\Rooms\RoomWarrantyNotificationsTest.php" tests="7" assertions="38" errors="0" failures="0" skipped="0" time="7.950450">
      <testcase name="it creates end of warranty notification for a new created room" file="tests\Tenant\Notifications\Rooms\RoomWarrantyNotificationsTest.php::it creates end of warranty notification for a new created room" class="Tests\Tenant\Notifications\Rooms\RoomWarrantyNotificationsTest" classname="Tests.Tenant.Notifications.Rooms.RoomWarrantyNotificationsTest" assertions="4" time="1.112821"/>
      <testcase name="it updates end of warranty notification when end_warranty_date changes" file="tests\Tenant\Notifications\Rooms\RoomWarrantyNotificationsTest.php::it updates end of warranty notification when end_warranty_date changes" class="Tests\Tenant\Notifications\Rooms\RoomWarrantyNotificationsTest" classname="Tests.Tenant.Notifications.Rooms.RoomWarrantyNotificationsTest" assertions="7" time="1.149223"/>
      <testcase name="it creates warranty notifications when under_warranty passes from false to true" file="tests\Tenant\Notifications\Rooms\RoomWarrantyNotificationsTest.php::it creates warranty notifications when under_warranty passes from false to true" class="Tests\Tenant\Notifications\Rooms\RoomWarrantyNotificationsTest" classname="Tests.Tenant.Notifications.Rooms.RoomWarrantyNotificationsTest" assertions="7" time="1.091249"/>
      <testcase name="it deletes warranty notifications when under_warranty passes from true to false" file="tests\Tenant\Notifications\Rooms\RoomWarrantyNotificationsTest.php::it deletes warranty notifications when under_warranty passes from true to false" class="Tests\Tenant\Notifications\Rooms\RoomWarrantyNotificationsTest" classname="Tests.Tenant.Notifications.Rooms.RoomWarrantyNotificationsTest" assertions="7" time="1.112513"/>
      <testcase name="it update notifications when notification preference end_warranty_date of user changes" file="tests\Tenant\Notifications\Rooms\RoomWarrantyNotificationsTest.php::it update notifications when notification preference end_warranty_date of user changes" class="Tests\Tenant\Notifications\Rooms\RoomWarrantyNotificationsTest" classname="Tests.Tenant.Notifications.Rooms.RoomWarrantyNotificationsTest" assertions="7" time="1.217862"/>
      <testcase name="it deletes notifications when notification preference end_warranty_date of user is disabled" file="tests\Tenant\Notifications\Rooms\RoomWarrantyNotificationsTest.php::it deletes notifications when notification preference end_warranty_date of user is disabled" class="Tests\Tenant\Notifications\Rooms\RoomWarrantyNotificationsTest" classname="Tests.Tenant.Notifications.Rooms.RoomWarrantyNotificationsTest" assertions="3" time="1.171836"/>
      <testcase name="it creates notifications when notification preference warranty_end_date of user is enabled" file="tests\Tenant\Notifications\Rooms\RoomWarrantyNotificationsTest.php::it creates notifications when notification preference warranty_end_date of user is enabled" class="Tests\Tenant\Notifications\Rooms\RoomWarrantyNotificationsTest" classname="Tests.Tenant.Notifications.Rooms.RoomWarrantyNotificationsTest" assertions="3" time="1.094945"/>
    </testsuite>
    <testsuite name="Tests\Tenant\Notifications\Sites\SiteMaintenanceManagerNotificationsTest" file="tests\Tenant\Notifications\Sites\SiteMaintenanceManagerNotificationsTest.php" tests="3" assertions="20" errors="0" failures="0" skipped="0" time="3.600982">
      <testcase name="it creates notification when adding maintenance manager to existing site without maintenance manager" file="tests\Tenant\Notifications\Sites\SiteMaintenanceManagerNotificationsTest.php::it creates notification when adding maintenance manager to existing site without maintenance manager" class="Tests\Tenant\Notifications\Sites\SiteMaintenanceManagerNotificationsTest" classname="Tests.Tenant.Notifications.Sites.SiteMaintenanceManagerNotificationsTest" assertions="8" time="1.126707"/>
      <testcase name="it creates notification when replacing maintenance manager for the site and removes notifications for old maintenance manager" file="tests\Tenant\Notifications\Sites\SiteMaintenanceManagerNotificationsTest.php::it creates notification when replacing maintenance manager for the site and removes notifications for old maintenance manager" class="Tests\Tenant\Notifications\Sites\SiteMaintenanceManagerNotificationsTest" classname="Tests.Tenant.Notifications.Sites.SiteMaintenanceManagerNotificationsTest" assertions="4" time="1.307987"/>
      <testcase name="it deletes notification when removing maintenance_manager from existing site" file="tests\Tenant\Notifications\Sites\SiteMaintenanceManagerNotificationsTest.php::it deletes notification when removing maintenance_manager from existing site" class="Tests\Tenant\Notifications\Sites\SiteMaintenanceManagerNotificationsTest" classname="Tests.Tenant.Notifications.Sites.SiteMaintenanceManagerNotificationsTest" assertions="8" time="1.166287"/>
    </testsuite>
    <testsuite name="Tests\Tenant\Notifications\Sites\SiteMaintenanceNotificationsTest" file="tests\Tenant\Notifications\Sites\SiteMaintenanceNotificationsTest.php" tests="8" assertions="34" errors="0" failures="0" skipped="0" time="11.390265">
      <testcase name="it creates next maintenance date notification for a new created site with maintenance manager" file="tests\Tenant\Notifications\Sites\SiteMaintenanceNotificationsTest.php::it creates next maintenance date notification for a new created site with maintenance manager" class="Tests\Tenant\Notifications\Sites\SiteMaintenanceNotificationsTest" classname="Tests.Tenant.Notifications.Sites.SiteMaintenanceNotificationsTest" assertions="4" time="1.364613"/>
      <testcase name="it updates notification when updating next_maintenance_date of the asset" file="tests\Tenant\Notifications\Sites\SiteMaintenanceNotificationsTest.php::it updates notification when updating next_maintenance_date of the asset" class="Tests\Tenant\Notifications\Sites\SiteMaintenanceNotificationsTest" classname="Tests.Tenant.Notifications.Sites.SiteMaintenanceNotificationsTest" assertions="8" time="1.476116"/>
      <testcase name="it creates no notification if next_maintenance_date is in the past" file="tests\Tenant\Notifications\Sites\SiteMaintenanceNotificationsTest.php::it creates no notification if next_maintenance_date is in the past" class="Tests\Tenant\Notifications\Sites\SiteMaintenanceNotificationsTest" classname="Tests.Tenant.Notifications.Sites.SiteMaintenanceNotificationsTest" assertions="1" time="1.459417"/>
      <testcase name="it creates notification when need_maintenance passes from false to true" file="tests\Tenant\Notifications\Sites\SiteMaintenanceNotificationsTest.php::it creates notification when need_maintenance passes from false to true" class="Tests\Tenant\Notifications\Sites\SiteMaintenanceNotificationsTest" classname="Tests.Tenant.Notifications.Sites.SiteMaintenanceNotificationsTest" assertions="6" time="1.414209"/>
      <testcase name="it deletes notification when need_maintenance passes from true to false" file="tests\Tenant\Notifications\Sites\SiteMaintenanceNotificationsTest.php::it deletes notification when need_maintenance passes from true to false" class="Tests\Tenant\Notifications\Sites\SiteMaintenanceNotificationsTest" classname="Tests.Tenant.Notifications.Sites.SiteMaintenanceNotificationsTest" assertions="6" time="1.325062"/>
      <testcase name="it update notifications when notification preference next_maintenance_date of user changes" file="tests\Tenant\Notifications\Sites\SiteMaintenanceNotificationsTest.php::it update notifications when notification preference next_maintenance_date of user changes" class="Tests\Tenant\Notifications\Sites\SiteMaintenanceNotificationsTest" classname="Tests.Tenant.Notifications.Sites.SiteMaintenanceNotificationsTest" assertions="3" time="1.251332"/>
      <testcase name="it deletes notifications when notification preference next_maintenance_date of user is disabled" file="tests\Tenant\Notifications\Sites\SiteMaintenanceNotificationsTest.php::it deletes notifications when notification preference next_maintenance_date of user is disabled" class="Tests\Tenant\Notifications\Sites\SiteMaintenanceNotificationsTest" classname="Tests.Tenant.Notifications.Sites.SiteMaintenanceNotificationsTest" assertions="3" time="1.564536"/>
      <testcase name="it creates notifications when notification preference next_maintenance_date of user is enabled" file="tests\Tenant\Notifications\Sites\SiteMaintenanceNotificationsTest.php::it creates notifications when notification preference next_maintenance_date of user is enabled" class="Tests\Tenant\Notifications\Sites\SiteMaintenanceNotificationsTest" classname="Tests.Tenant.Notifications.Sites.SiteMaintenanceNotificationsTest" assertions="3" time="1.534981"/>
    </testsuite>
    <testsuite name="Tests\Tenant\Notifications\Sites\SiteNotificationTest" file="tests\Tenant\Notifications\Sites\SiteNotificationTest.php" tests="2" assertions="9" errors="0" failures="0" skipped="0" time="2.949657">
      <testcase name="it creates notifications (maintenance, warranty) for a new created site" file="tests\Tenant\Notifications\Sites\SiteNotificationTest.php::it creates notifications (maintenance, warranty) for a new created site" class="Tests\Tenant\Notifications\Sites\SiteNotificationTest" classname="Tests.Tenant.Notifications.Sites.SiteNotificationTest" assertions="5" time="1.286349"/>
      <testcase name="it deletes notifications when site is deleted" file="tests\Tenant\Notifications\Sites\SiteNotificationTest.php::it deletes notifications when site is deleted" class="Tests\Tenant\Notifications\Sites\SiteNotificationTest" classname="Tests.Tenant.Notifications.Sites.SiteNotificationTest" assertions="4" time="1.663308"/>
    </testsuite>
    <testsuite name="Tests\Tenant\Notifications\Sites\SiteWarrantyNotificationsTest" file="tests\Tenant\Notifications\Sites\SiteWarrantyNotificationsTest.php" tests="7" assertions="35" errors="0" failures="0" skipped="0" time="9.233906">
      <testcase name="it creates end of warranty notification for a new created site" file="tests\Tenant\Notifications\Sites\SiteWarrantyNotificationsTest.php::it creates end of warranty notification for a new created site" class="Tests\Tenant\Notifications\Sites\SiteWarrantyNotificationsTest" classname="Tests.Tenant.Notifications.Sites.SiteWarrantyNotificationsTest" assertions="4" time="1.676472"/>
      <testcase name="it updates end of warranty notification when end_warranty_date changes" file="tests\Tenant\Notifications\Sites\SiteWarrantyNotificationsTest.php::it updates end of warranty notification when end_warranty_date changes" class="Tests\Tenant\Notifications\Sites\SiteWarrantyNotificationsTest" classname="Tests.Tenant.Notifications.Sites.SiteWarrantyNotificationsTest" assertions="7" time="1.655584"/>
      <testcase name="it creates warranty notifications when under_warranty passes from false to true" file="tests\Tenant\Notifications\Sites\SiteWarrantyNotificationsTest.php::it creates warranty notifications when under_warranty passes from false to true" class="Tests\Tenant\Notifications\Sites\SiteWarrantyNotificationsTest" classname="Tests.Tenant.Notifications.Sites.SiteWarrantyNotificationsTest" assertions="7" time="1.516116"/>
      <testcase name="it deletes warranty notifications when under_warranty passes from true to false" file="tests\Tenant\Notifications\Sites\SiteWarrantyNotificationsTest.php::it deletes warranty notifications when under_warranty passes from true to false" class="Tests\Tenant\Notifications\Sites\SiteWarrantyNotificationsTest" classname="Tests.Tenant.Notifications.Sites.SiteWarrantyNotificationsTest" assertions="7" time="1.365666"/>
      <testcase name="it update notifications when notification preference end_warranty_date of user changes" file="tests\Tenant\Notifications\Sites\SiteWarrantyNotificationsTest.php::it update notifications when notification preference end_warranty_date of user changes" class="Tests\Tenant\Notifications\Sites\SiteWarrantyNotificationsTest" classname="Tests.Tenant.Notifications.Sites.SiteWarrantyNotificationsTest" assertions="4" time="1.048301"/>
      <testcase name="it deletes notifications when notification preference end_warranty_date of user is disabled" file="tests\Tenant\Notifications\Sites\SiteWarrantyNotificationsTest.php::it deletes notifications when notification preference end_warranty_date of user is disabled" class="Tests\Tenant\Notifications\Sites\SiteWarrantyNotificationsTest" classname="Tests.Tenant.Notifications.Sites.SiteWarrantyNotificationsTest" assertions="3" time="1.026816"/>
      <testcase name="it creates notifications when notification preference warranty_end_date of user is enabled" file="tests\Tenant\Notifications\Sites\SiteWarrantyNotificationsTest.php::it creates notifications when notification preference warranty_end_date of user is enabled" class="Tests\Tenant\Notifications\Sites\SiteWarrantyNotificationsTest" classname="Tests.Tenant.Notifications.Sites.SiteWarrantyNotificationsTest" assertions="3" time="0.944951"/>
    </testsuite>
    <testsuite name="Tests\Tenant\Notifications\UserNotificationPreferencesTest" file="tests\Tenant\Notifications\UserNotificationPreferencesTest.php" tests="4" assertions="12" errors="0" failures="0" skipped="0" time="5.041834">
      <testcase name="it creates default notification preferences when admin is created" file="tests\Tenant\Notifications\UserNotificationPreferencesTest.php::it creates default notification preferences when admin is created" class="Tests\Tenant\Notifications\UserNotificationPreferencesTest" classname="Tests.Tenant.Notifications.UserNotificationPreferencesTest" assertions="4" time="1.382260"/>
      <testcase name="it creates default notification preferences when maintenance manager is created" file="tests\Tenant\Notifications\UserNotificationPreferencesTest.php::it creates default notification preferences when maintenance manager is created" class="Tests\Tenant\Notifications\UserNotificationPreferencesTest" classname="Tests.Tenant.Notifications.UserNotificationPreferencesTest" assertions="4" time="1.202777"/>
      <testcase name="it can create a new notification preference" file="tests\Tenant\Notifications\UserNotificationPreferencesTest.php::it can create a new notification preference" class="Tests\Tenant\Notifications\UserNotificationPreferencesTest" classname="Tests.Tenant.Notifications.UserNotificationPreferencesTest" assertions="2" time="1.225160"/>
      <testcase name="it can update notification preferences" file="tests\Tenant\Notifications\UserNotificationPreferencesTest.php::it can update notification preferences" class="Tests\Tenant\Notifications\UserNotificationPreferencesTest" classname="Tests.Tenant.Notifications.UserNotificationPreferencesTest" assertions="2" time="1.231637"/>
    </testsuite>
    <testsuite name="Tests\Tenant\Providers\ProviderTest" file="tests\Tenant\Providers\ProviderTest.php" tests="8" assertions="60" errors="0" failures="1" skipped="0" time="7.246121">
      <testcase name="it can factory a provider" file="tests\Tenant\Providers\ProviderTest.php::it can factory a provider" class="Tests\Tenant\Providers\ProviderTest" classname="Tests.Tenant.Providers.ProviderTest" assertions="1" time="0.798641"/>
      <testcase name="it can render the index providers page" file="tests\Tenant\Providers\ProviderTest.php::it can render the index providers page" class="Tests\Tenant\Providers\ProviderTest" classname="Tests.Tenant.Providers.ProviderTest" assertions="11" time="0.958193">
        <failure type="PHPUnit\Framework\ExpectationFailedException">it can render the index providers pageProperty [providers] does not exist.
Failed asserting that false is true.&#13;
at vendor\laravel\framework\src\Illuminate\Testing\Fluent\Concerns\Has.php:91
at tests\Tenant\Providers\ProviderTest.php:31
at vendor\inertiajs\inertia-laravel\src\Testing\TestResponseMacros.php:25
at vendor\laravel\framework\src\Illuminate\Macroable\Traits\Macroable.php:126
at vendor\laravel\framework\src\Illuminate\Testing\TestResponse.php:1974
at tests\Tenant\Providers\ProviderTest.php:28</failure>
      </testcase>
      <testcase name="it can render the show provider page" file="tests\Tenant\Providers\ProviderTest.php::it can render the show provider page" class="Tests\Tenant\Providers\ProviderTest" classname="Tests.Tenant.Providers.ProviderTest" assertions="13" time="1.016089"/>
      <testcase name="it can render the create provider page" file="tests\Tenant\Providers\ProviderTest.php::it can render the create provider page" class="Tests\Tenant\Providers\ProviderTest" classname="Tests.Tenant.Providers.ProviderTest" assertions="10" time="0.847994"/>
      <testcase name="it can render the edit provider page" file="tests\Tenant\Providers\ProviderTest.php::it can render the edit provider page" class="Tests\Tenant\Providers\ProviderTest" classname="Tests.Tenant.Providers.ProviderTest" assertions="13" time="0.830654"/>
      <testcase name="it can post a new provider" file="tests\Tenant\Providers\ProviderTest.php::it can post a new provider" class="Tests\Tenant\Providers\ProviderTest" classname="Tests.Tenant.Providers.ProviderTest" assertions="5" time="0.863653"/>
      <testcase name="it can update an existing provider" file="tests\Tenant\Providers\ProviderTest.php::it can update an existing provider" class="Tests\Tenant\Providers\ProviderTest" classname="Tests.Tenant.Providers.ProviderTest" assertions="4" time="0.941689"/>
      <testcase name="it can delete an existing provider" file="tests\Tenant\Providers\ProviderTest.php::it can delete an existing provider" class="Tests\Tenant\Providers\ProviderTest" classname="Tests.Tenant.Providers.ProviderTest" assertions="3" time="0.989208"/>
    </testsuite>
    <testsuite name="Tests\Tenant\QRCode\AssetQRTest" file="tests\Tenant\QRCode\AssetQRTest.php" tests="2" assertions="4" errors="0" failures="2" skipped="0" time="3.845127">
      <testcase name="it creates a QR Code when need_qr_code is true" file="tests\Tenant\QRCode\AssetQRTest.php::it creates a QR Code when need_qr_code is true" class="Tests\Tenant\QRCode\AssetQRTest" classname="Tests.Tenant.QRCode.AssetQRTest" assertions="2" time="1.901832">
        <failure type="PHPUnit\Framework\ExpectationFailedException">it creates a QR Code when need_qr_code is trueFailed asserting that a row in the table [assets] matches the attributes {
    "id": 1,
    "qr_hash": "837ed9e19346",
    "qr_code": "test\/assets\/1\/qrcode\/qr_837ed9e19346_202510211610.png"
}.

Found similar results: [
    {
        "id": 1,
        "qr_hash": "837ed9e19346",
        "qr_code": "test\/assets\/1\/qrcode\/qr_837ed9e19346_202510210445.png"
    }
].&#13;
at vendor\laravel\framework\src\Illuminate\Foundation\Testing\Concerns\InteractsWithDatabase.php:43
at vendor\pestphp\pest-plugin-laravel\src\Database.php:18
at tests\Tenant\QRCode\AssetQRTest.php:71</failure>
      </testcase>
      <testcase name="it can regenerate a QR Code" file="tests\Tenant\QRCode\AssetQRTest.php::it can regenerate a QR Code" class="Tests\Tenant\QRCode\AssetQRTest" classname="Tests.Tenant.QRCode.AssetQRTest" assertions="2" time="1.943295">
        <failure type="PHPUnit\Framework\ExpectationFailedException">it can regenerate a QR CodeFailed asserting that a row in the table [assets] matches the attributes {
    "id": 1,
    "qr_hash": "e0d74c6f31d9",
    "qr_code": "test\/assets\/1\/qrcode\/qr_e0d74c6f31d9_202510211610.png"
}.

Found similar results: [
    {
        "id": 1,
        "qr_hash": "e0d74c6f31d9",
        "qr_code": "test\/assets\/1\/qrcode\/qr_e0d74c6f31d9_202510210445.png"
    }
].&#13;
at vendor\laravel\framework\src\Illuminate\Foundation\Testing\Concerns\InteractsWithDatabase.php:43
at vendor\pestphp\pest-plugin-laravel\src\Database.php:18
at tests\Tenant\QRCode\AssetQRTest.php:95</failure>
      </testcase>
    </testsuite>
    <testsuite name="Tests\Tenant\QRCode\BuildingQRTest" file="tests\Tenant\QRCode\BuildingQRTest.php" tests="2" assertions="4" errors="0" failures="2" skipped="0" time="3.721344">
      <testcase name="it creates a QR Code when need_qr_code is true at building's creation" file="tests\Tenant\QRCode\BuildingQRTest.php::it creates a QR Code when need_qr_code is true at building's creation" class="Tests\Tenant\QRCode\BuildingQRTest" classname="Tests.Tenant.QRCode.BuildingQRTest" assertions="2" time="2.096653">
        <failure type="PHPUnit\Framework\ExpectationFailedException">it creates a QR Code when need_qr_code is true at building's creationFailed asserting that a row in the table [buildings] matches the attributes {
    "id": 1,
    "qr_hash": "b5a584c3c7ce",
    "qr_code": "test\/buildings\/1\/qrcode\/qr_b5a584c3c7ce_202510211610.png"
}.

Found similar results: [
    {
        "id": 1,
        "qr_hash": "b5a584c3c7ce",
        "qr_code": "test\/buildings\/1\/qrcode\/qr_b5a584c3c7ce_202510210445.png"
    }
].&#13;
at vendor\laravel\framework\src\Illuminate\Foundation\Testing\Concerns\InteractsWithDatabase.php:43
at vendor\pestphp\pest-plugin-laravel\src\Database.php:18
at tests\Tenant\QRCode\BuildingQRTest.php:55</failure>
      </testcase>
      <testcase name="it can regenerate a QR Code for a building" file="tests\Tenant\QRCode\BuildingQRTest.php::it can regenerate a QR Code for a building" class="Tests\Tenant\QRCode\BuildingQRTest" classname="Tests.Tenant.QRCode.BuildingQRTest" assertions="2" time="1.624691">
        <failure type="PHPUnit\Framework\ExpectationFailedException">it can regenerate a QR Code for a buildingFailed asserting that a row in the table [buildings] matches the attributes {
    "id": 1,
    "qr_hash": "61ff67495df3",
    "qr_code": "test\/buildings\/1\/qrcode\/qr_61ff67495df3_202510211610.png"
}.

Found similar results: [
    {
        "id": 1,
        "qr_hash": "61ff67495df3",
        "qr_code": "test\/buildings\/1\/qrcode\/qr_61ff67495df3_202510210445.png"
    }
].&#13;
at vendor\laravel\framework\src\Illuminate\Foundation\Testing\Concerns\InteractsWithDatabase.php:43
at vendor\pestphp\pest-plugin-laravel\src\Database.php:18
at tests\Tenant\QRCode\BuildingQRTest.php:79</failure>
      </testcase>
    </testsuite>
    <testsuite name="Tests\Tenant\QRCode\FloorQRTest" file="tests\Tenant\QRCode\FloorQRTest.php" tests="2" assertions="4" errors="0" failures="2" skipped="0" time="3.626851">
      <testcase name="it creates a QR Code when need_qr_code is true at floor's creation" file="tests\Tenant\QRCode\FloorQRTest.php::it creates a QR Code when need_qr_code is true at floor's creation" class="Tests\Tenant\QRCode\FloorQRTest" classname="Tests.Tenant.QRCode.FloorQRTest" assertions="2" time="1.718427">
        <failure type="PHPUnit\Framework\ExpectationFailedException">it creates a QR Code when need_qr_code is true at floor's creationFailed asserting that a row in the table [floors] matches the attributes {
    "id": 1,
    "qr_hash": "98cdb0ec367f",
    "qr_code": "test\/floors\/1\/qrcode\/qr_98cdb0ec367f_202510211610.png"
}.

Found similar results: [
    {
        "id": 1,
        "qr_hash": "98cdb0ec367f",
        "qr_code": "test\/floors\/1\/qrcode\/qr_98cdb0ec367f_202510210445.png"
    }
].&#13;
at vendor\laravel\framework\src\Illuminate\Foundation\Testing\Concerns\InteractsWithDatabase.php:43
at vendor\pestphp\pest-plugin-laravel\src\Database.php:18
at tests\Tenant\QRCode\FloorQRTest.php:56</failure>
      </testcase>
      <testcase name="it can regenerate a QR Code for a floor" file="tests\Tenant\QRCode\FloorQRTest.php::it can regenerate a QR Code for a floor" class="Tests\Tenant\QRCode\FloorQRTest" classname="Tests.Tenant.QRCode.FloorQRTest" assertions="2" time="1.908424">
        <failure type="PHPUnit\Framework\ExpectationFailedException">it can regenerate a QR Code for a floorFailed asserting that a row in the table [floors] matches the attributes {
    "id": 1,
    "qr_hash": "00e0a5970b95",
    "qr_code": "test\/floors\/1\/qrcode\/qr_00e0a5970b95_202510211610.png"
}.

Found similar results: [
    {
        "id": 1,
        "qr_hash": "00e0a5970b95",
        "qr_code": "test\/floors\/1\/qrcode\/qr_00e0a5970b95_202510210445.png"
    }
].&#13;
at vendor\laravel\framework\src\Illuminate\Foundation\Testing\Concerns\InteractsWithDatabase.php:43
at vendor\pestphp\pest-plugin-laravel\src\Database.php:18
at tests\Tenant\QRCode\FloorQRTest.php:80</failure>
      </testcase>
    </testsuite>
    <testsuite name="Tests\Tenant\QRCode\RoomQRTest" file="tests\Tenant\QRCode\RoomQRTest.php" tests="2" assertions="4" errors="0" failures="2" skipped="0" time="3.575934">
      <testcase name="it creates a QR Code when need_qr_code is true at room's creation" file="tests\Tenant\QRCode\RoomQRTest.php::it creates a QR Code when need_qr_code is true at room's creation" class="Tests\Tenant\QRCode\RoomQRTest" classname="Tests.Tenant.QRCode.RoomQRTest" assertions="2" time="1.779761">
        <failure type="PHPUnit\Framework\ExpectationFailedException">it creates a QR Code when need_qr_code is true at room's creationFailed asserting that a row in the table [rooms] matches the attributes {
    "id": 1,
    "qr_hash": "827d6850a009",
    "qr_code": "test\/rooms\/1\/qrcode\/qr_827d6850a009_202510211610.png"
}.

Found similar results: [
    {
        "id": 1,
        "qr_hash": "827d6850a009",
        "qr_code": "test\/rooms\/1\/qrcode\/qr_827d6850a009_202510210445.png"
    }
].&#13;
at vendor\laravel\framework\src\Illuminate\Foundation\Testing\Concerns\InteractsWithDatabase.php:43
at vendor\pestphp\pest-plugin-laravel\src\Database.php:18
at tests\Tenant\QRCode\RoomQRTest.php:62</failure>
      </testcase>
      <testcase name="it can regenerate a QR Code for a room" file="tests\Tenant\QRCode\RoomQRTest.php::it can regenerate a QR Code for a room" class="Tests\Tenant\QRCode\RoomQRTest" classname="Tests.Tenant.QRCode.RoomQRTest" assertions="2" time="1.796174">
        <failure type="PHPUnit\Framework\ExpectationFailedException">it can regenerate a QR Code for a roomFailed asserting that a row in the table [rooms] matches the attributes {
    "id": 1,
    "qr_hash": "f350f9a3177e",
    "qr_code": "test\/rooms\/1\/qrcode\/qr_f350f9a3177e_202510211610.png"
}.

Found similar results: [
    {
        "id": 1,
        "qr_hash": "f350f9a3177e",
        "qr_code": "test\/rooms\/1\/qrcode\/qr_f350f9a3177e_202510210445.png"
    }
].&#13;
at vendor\laravel\framework\src\Illuminate\Foundation\Testing\Concerns\InteractsWithDatabase.php:43
at vendor\pestphp\pest-plugin-laravel\src\Database.php:18
at tests\Tenant\QRCode\RoomQRTest.php:86</failure>
      </testcase>
    </testsuite>
    <testsuite name="Tests\Tenant\QRCode\SiteQRTest" file="tests\Tenant\QRCode\SiteQRTest.php" tests="2" assertions="4" errors="0" failures="2" skipped="0" time="3.499566">
      <testcase name="it creates a QR Code when need_qr_code is true at site's creation" file="tests\Tenant\QRCode\SiteQRTest.php::it creates a QR Code when need_qr_code is true at site's creation" class="Tests\Tenant\QRCode\SiteQRTest" classname="Tests.Tenant.QRCode.SiteQRTest" assertions="2" time="1.864496">
        <failure type="PHPUnit\Framework\ExpectationFailedException">it creates a QR Code when need_qr_code is true at site's creationFailed asserting that a row in the table [sites] matches the attributes {
    "id": 1,
    "qr_hash": "a80962c7b4e6",
    "qr_code": "test\/sites\/1\/qrcode\/qr_a80962c7b4e6_202510211610.png"
}.

Found similar results: [
    {
        "id": 1,
        "qr_hash": "a80962c7b4e6",
        "qr_code": "test\/sites\/1\/qrcode\/qr_a80962c7b4e6_202510210445.png"
    }
].&#13;
at vendor\laravel\framework\src\Illuminate\Foundation\Testing\Concerns\InteractsWithDatabase.php:43
at vendor\pestphp\pest-plugin-laravel\src\Database.php:18
at tests\Tenant\QRCode\SiteQRTest.php:53</failure>
      </testcase>
      <testcase name="it can regenerate a QR Code for a site" file="tests\Tenant\QRCode\SiteQRTest.php::it can regenerate a QR Code for a site" class="Tests\Tenant\QRCode\SiteQRTest" classname="Tests.Tenant.QRCode.SiteQRTest" assertions="2" time="1.635070">
        <failure type="PHPUnit\Framework\ExpectationFailedException">it can regenerate a QR Code for a siteFailed asserting that a row in the table [sites] matches the attributes {
    "id": 1,
    "qr_hash": "554c08201715",
    "qr_code": "test\/sites\/1\/qrcode\/qr_554c08201715_202510211610.png"
}.

Found similar results: [
    {
        "id": 1,
        "qr_hash": "554c08201715",
        "qr_code": "test\/sites\/1\/qrcode\/qr_554c08201715_202510210445.png"
    }
].&#13;
at vendor\laravel\framework\src\Illuminate\Foundation\Testing\Concerns\InteractsWithDatabase.php:43
at vendor\pestphp\pest-plugin-laravel\src\Database.php:18
at tests\Tenant\QRCode\SiteQRTest.php:78</failure>
      </testcase>
    </testsuite>
    <testsuite name="Tests\Tenant\Tickets\APITicketTest" file="tests\Tenant\Tickets\APITicketTest.php" tests="5" assertions="15" errors="0" failures="0" skipped="0" time="5.732143">
      <testcase name="it can retrieve all tickets " file="tests\Tenant\Tickets\APITicketTest.php::it can retrieve all tickets " class="Tests\Tenant\Tickets\APITicketTest" classname="Tests.Tenant.Tickets.APITicketTest" assertions="3" time="1.088855"/>
      <testcase name="it can retrieve all tickets from a site" file="tests\Tenant\Tickets\APITicketTest.php::it can retrieve all tickets from a site" class="Tests\Tenant\Tickets\APITicketTest" classname="Tests.Tenant.Tickets.APITicketTest" assertions="3" time="1.108877"/>
      <testcase name="it can retrieve all tickets from a building" file="tests\Tenant\Tickets\APITicketTest.php::it can retrieve all tickets from a building" class="Tests\Tenant\Tickets\APITicketTest" classname="Tests.Tenant.Tickets.APITicketTest" assertions="3" time="1.169685"/>
      <testcase name="it can retrieve all tickets from a floor" file="tests\Tenant\Tickets\APITicketTest.php::it can retrieve all tickets from a floor" class="Tests\Tenant\Tickets\APITicketTest" classname="Tests.Tenant.Tickets.APITicketTest" assertions="3" time="1.242375"/>
      <testcase name="it can retrieve all tickets from a room" file="tests\Tenant\Tickets\APITicketTest.php::it can retrieve all tickets from a room" class="Tests\Tenant\Tickets\APITicketTest" classname="Tests.Tenant.Tickets.APITicketTest" assertions="3" time="1.122352"/>
    </testsuite>
    <testsuite name="Tests\Tenant\Tickets\TicketAsAnonymousTest" file="tests\Tenant\Tickets\TicketAsAnonymousTest.php" tests="10" assertions="100" errors="0" failures="0" skipped="0" time="11.413949">
      <testsuite name="it can render a new ticket page for a guest" tests="5" assertions="75" errors="0" failures="0" skipped="0" time="5.227698">
        <testcase name="it can render a new ticket page for a guest with data set &quot;('asset', 'assets')&quot;" file="tests\Tenant\Tickets\TicketAsAnonymousTest.php::it can render a new ticket page for a guest with data set &quot;('asset', 'assets')&quot;" class="Tests\Tenant\Tickets\TicketAsAnonymousTest" classname="Tests.Tenant.Tickets.TicketAsAnonymousTest" assertions="15" time="1.047590"/>
        <testcase name="it can render a new ticket page for a guest with data set &quot;('site', 'sites')&quot;" file="tests\Tenant\Tickets\TicketAsAnonymousTest.php::it can render a new ticket page for a guest with data set &quot;('site', 'sites')&quot;" class="Tests\Tenant\Tickets\TicketAsAnonymousTest" classname="Tests.Tenant.Tickets.TicketAsAnonymousTest" assertions="15" time="1.114718"/>
        <testcase name="it can render a new ticket page for a guest with data set &quot;('building', 'buildings')&quot;" file="tests\Tenant\Tickets\TicketAsAnonymousTest.php::it can render a new ticket page for a guest with data set &quot;('building', 'buildings')&quot;" class="Tests\Tenant\Tickets\TicketAsAnonymousTest" classname="Tests.Tenant.Tickets.TicketAsAnonymousTest" assertions="15" time="1.004120"/>
        <testcase name="it can render a new ticket page for a guest with data set &quot;('floor', 'floors')&quot;" file="tests\Tenant\Tickets\TicketAsAnonymousTest.php::it can render a new ticket page for a guest with data set &quot;('floor', 'floors')&quot;" class="Tests\Tenant\Tickets\TicketAsAnonymousTest" classname="Tests.Tenant.Tickets.TicketAsAnonymousTest" assertions="15" time="1.031154"/>
        <testcase name="it can render a new ticket page for a guest with data set &quot;('room', 'rooms')&quot;" file="tests\Tenant\Tickets\TicketAsAnonymousTest.php::it can render a new ticket page for a guest with data set &quot;('room', 'rooms')&quot;" class="Tests\Tenant\Tickets\TicketAsAnonymousTest" classname="Tests.Tenant.Tickets.TicketAsAnonymousTest" assertions="15" time="1.030115"/>
      </testsuite>
      <testsuite name="it can create a new ticket with pictures has &quot;anonymous&quot; user" tests="5" assertions="25" errors="0" failures="0" skipped="0" time="6.186251">
        <testcase name="it can create a new ticket with pictures has &quot;anonymous&quot; user with data set &quot;('asset', 'assets')&quot;" file="tests\Tenant\Tickets\TicketAsAnonymousTest.php::it can create a new ticket with pictures has &quot;anonymous&quot; user with data set &quot;('asset', 'assets')&quot;" class="Tests\Tenant\Tickets\TicketAsAnonymousTest" classname="Tests.Tenant.Tickets.TicketAsAnonymousTest" assertions="5" time="1.059797"/>
        <testcase name="it can create a new ticket with pictures has &quot;anonymous&quot; user with data set &quot;('site', 'sites')&quot;" file="tests\Tenant\Tickets\TicketAsAnonymousTest.php::it can create a new ticket with pictures has &quot;anonymous&quot; user with data set &quot;('site', 'sites')&quot;" class="Tests\Tenant\Tickets\TicketAsAnonymousTest" classname="Tests.Tenant.Tickets.TicketAsAnonymousTest" assertions="5" time="1.052936"/>
        <testcase name="it can create a new ticket with pictures has &quot;anonymous&quot; user with data set &quot;('building', 'buildings')&quot;" file="tests\Tenant\Tickets\TicketAsAnonymousTest.php::it can create a new ticket with pictures has &quot;anonymous&quot; user with data set &quot;('building', 'buildings')&quot;" class="Tests\Tenant\Tickets\TicketAsAnonymousTest" classname="Tests.Tenant.Tickets.TicketAsAnonymousTest" assertions="5" time="1.350917"/>
        <testcase name="it can create a new ticket with pictures has &quot;anonymous&quot; user with data set &quot;('floor', 'floors')&quot;" file="tests\Tenant\Tickets\TicketAsAnonymousTest.php::it can create a new ticket with pictures has &quot;anonymous&quot; user with data set &quot;('floor', 'floors')&quot;" class="Tests\Tenant\Tickets\TicketAsAnonymousTest" classname="Tests.Tenant.Tickets.TicketAsAnonymousTest" assertions="5" time="1.371685"/>
        <testcase name="it can create a new ticket with pictures has &quot;anonymous&quot; user with data set &quot;('room', 'rooms')&quot;" file="tests\Tenant\Tickets\TicketAsAnonymousTest.php::it can create a new ticket with pictures has &quot;anonymous&quot; user with data set &quot;('room', 'rooms')&quot;" class="Tests\Tenant\Tickets\TicketAsAnonymousTest" classname="Tests.Tenant.Tickets.TicketAsAnonymousTest" assertions="5" time="1.350916"/>
      </testsuite>
    </testsuite>
    <testsuite name="Tests\Tenant\Tickets\TicketMailTest" file="tests\Tenant\Tickets\TicketMailTest.php" tests="3" assertions="7" errors="0" failures="0" skipped="0" time="3.774677">
      <testcase name="it sends an email when a new ticket is created for location without maintenance manager" file="tests\Tenant\Tickets\TicketMailTest.php::it sends an email when a new ticket is created for location without maintenance manager" class="Tests\Tenant\Tickets\TicketMailTest" classname="Tests.Tenant.Tickets.TicketMailTest" assertions="2" time="1.135258"/>
      <testcase name="it sends an email when a new ticket is created for location with maintenance manager" file="tests\Tenant\Tickets\TicketMailTest.php::it sends an email when a new ticket is created for location with maintenance manager" class="Tests\Tenant\Tickets\TicketMailTest" classname="Tests.Tenant.Tickets.TicketMailTest" assertions="3" time="1.271407"/>
      <testcase name="it send an email to the notifier when a ticket is closed and the notifier wanted to be notified" file="tests\Tenant\Tickets\TicketMailTest.php::it send an email to the notifier when a ticket is closed and the notifier wanted to be notified" class="Tests\Tenant\Tickets\TicketMailTest" classname="Tests.Tenant.Tickets.TicketMailTest" assertions="2" time="1.368012"/>
    </testsuite>
    <testsuite name="Tests\Tenant\Tickets\TicketTest" file="tests\Tenant\Tickets\TicketTest.php" tests="14" assertions="70" errors="0" failures="0" skipped="0" time="16.570722">
      <testcase name="it can render the index tickets page" file="tests\Tenant\Tickets\TicketTest.php::it can render the index tickets page" class="Tests\Tenant\Tickets\TicketTest" classname="Tests.Tenant.Tickets.TicketTest" assertions="10" time="1.206941"/>
      <testcase name="it can render the show ticket page" file="tests\Tenant\Tickets\TicketTest.php::it can render the show ticket page" class="Tests\Tenant\Tickets\TicketTest" classname="Tests.Tenant.Tickets.TicketTest" assertions="14" time="1.062078"/>
      <testcase name="it can render interventions in the ticket page" file="tests\Tenant\Tickets\TicketTest.php::it can render interventions in the ticket page" class="Tests\Tenant\Tickets\TicketTest" classname="Tests.Tenant.Tickets.TicketTest" assertions="15" time="1.166750"/>
      <testcase name="it can create a new ticket to an ASSET with the logged user" file="tests\Tenant\Tickets\TicketTest.php::it can create a new ticket to an ASSET with the logged user" class="Tests\Tenant\Tickets\TicketTest" classname="Tests.Tenant.Tickets.TicketTest" assertions="3" time="1.072614"/>
      <testcase name="it can create a ticket with uploaded pictures" file="tests\Tenant\Tickets\TicketTest.php::it can create a ticket with uploaded pictures" class="Tests\Tenant\Tickets\TicketTest" classname="Tests.Tenant.Tickets.TicketTest" assertions="3" time="1.112867"/>
      <testcase name="it can create several tickets with correct incremental code" file="tests\Tenant\Tickets\TicketTest.php::it can create several tickets with correct incremental code" class="Tests\Tenant\Tickets\TicketTest" classname="Tests.Tenant.Tickets.TicketTest" assertions="4" time="1.227315"/>
      <testcase name="it can create a new ticket to a ROOM" file="tests\Tenant\Tickets\TicketTest.php::it can create a new ticket to a ROOM" class="Tests\Tenant\Tickets\TicketTest" classname="Tests.Tenant.Tickets.TicketTest" assertions="3" time="1.094282"/>
      <testcase name="it can create a new ticket to a FLOOR" file="tests\Tenant\Tickets\TicketTest.php::it can create a new ticket to a FLOOR" class="Tests\Tenant\Tickets\TicketTest" classname="Tests.Tenant.Tickets.TicketTest" assertions="3" time="1.059667"/>
      <testcase name="it can create a new ticket to a BUILDING" file="tests\Tenant\Tickets\TicketTest.php::it can create a new ticket to a BUILDING" class="Tests\Tenant\Tickets\TicketTest" classname="Tests.Tenant.Tickets.TicketTest" assertions="3" time="1.024032"/>
      <testcase name="it can create a new ticket to a SITE" file="tests\Tenant\Tickets\TicketTest.php::it can create a new ticket to a SITE" class="Tests\Tenant\Tickets\TicketTest" classname="Tests.Tenant.Tickets.TicketTest" assertions="3" time="1.040072"/>
      <testcase name="it can update an existing ticket" file="tests\Tenant\Tickets\TicketTest.php::it can update an existing ticket" class="Tests\Tenant\Tickets\TicketTest" classname="Tests.Tenant.Tickets.TicketTest" assertions="2" time="1.226420"/>
      <testcase name="it can update the status of an existing ticket" file="tests\Tenant\Tickets\TicketTest.php::it can update the status of an existing ticket" class="Tests\Tenant\Tickets\TicketTest" classname="Tests.Tenant.Tickets.TicketTest" assertions="2" time="1.051044"/>
      <testcase name="it can close an existing ticket" file="tests\Tenant\Tickets\TicketTest.php::it can close an existing ticket" class="Tests\Tenant\Tickets\TicketTest" classname="Tests.Tenant.Tickets.TicketTest" assertions="3" time="2.102873"/>
      <testcase name="it can delete an existing ticket" file="tests\Tenant\Tickets\TicketTest.php::it can delete an existing ticket" class="Tests\Tenant\Tickets\TicketTest" classname="Tests.Tenant.Tickets.TicketTest" assertions="2" time="1.123766"/>
    </testsuite>
    <testsuite name="Tests\Tenant\Tickets\ValidationTicketTest" file="tests\Tenant\Tickets\ValidationTicketTest.php" tests="7" assertions="19" errors="0" failures="0" skipped="0" time="9.200275">
      <testcase name="it fails when creating a new ticket with a wrong asset code" file="tests\Tenant\Tickets\ValidationTicketTest.php::it fails when creating a new ticket with a wrong asset code" class="Tests\Tenant\Tickets\ValidationTicketTest" classname="Tests.Tenant.Tickets.ValidationTicketTest" assertions="3" time="1.049917"/>
      <testcase name="it fails when creating a new ticket with a wrong location type" file="tests\Tenant\Tickets\ValidationTicketTest.php::it fails when creating a new ticket with a wrong location type" class="Tests\Tenant\Tickets\ValidationTicketTest" classname="Tests.Tenant.Tickets.ValidationTicketTest" assertions="3" time="1.033846"/>
      <testcase name="it fails when creating a new ticket with a wrong status" file="tests\Tenant\Tickets\ValidationTicketTest.php::it fails when creating a new ticket with a wrong status" class="Tests\Tenant\Tickets\ValidationTicketTest" classname="Tests.Tenant.Tickets.ValidationTicketTest" assertions="3" time="1.202270"/>
      <testcase name="it fails when not uploading an image" file="tests\Tenant\Tickets\ValidationTicketTest.php::it fails when not uploading an image" class="Tests\Tenant\Tickets\ValidationTicketTest" classname="Tests.Tenant.Tickets.ValidationTicketTest" assertions="3" time="1.484408"/>
      <testcase name="it fails when uploading more than 3 pictures" file="tests\Tenant\Tickets\ValidationTicketTest.php::it fails when uploading more than 3 pictures" class="Tests\Tenant\Tickets\ValidationTicketTest" classname="Tests.Tenant.Tickets.ValidationTicketTest" assertions="3" time="1.410022"/>
      <testcase name="it fails when uploading a picture &gt; Max MB" file="tests\Tenant\Tickets\ValidationTicketTest.php::it fails when uploading a picture &gt; Max MB" class="Tests\Tenant\Tickets\ValidationTicketTest" classname="Tests.Tenant.Tickets.ValidationTicketTest" assertions="2" time="1.453515"/>
      <testcase name="it fails when creating ticket with description less than 10 characters" file="tests\Tenant\Tickets\ValidationTicketTest.php::it fails when creating ticket with description less than 10 characters" class="Tests\Tenant\Tickets\ValidationTicketTest" classname="Tests.Tenant.Tickets.ValidationTicketTest" assertions="2" time="1.566297"/>
    </testsuite>
    <testsuite name="Tests\Tenant\Users\ProfileTest" file="tests\Tenant\Users\ProfileTest.php" tests="3" assertions="12" errors="0" failures="0" skipped="0" time="3.588692">
      <testcase name="it can, as a logged user, upload an avatar" file="tests\Tenant\Users\ProfileTest.php::it can, as a logged user, upload an avatar" class="Tests\Tenant\Users\ProfileTest" classname="Tests.Tenant.Users.ProfileTest" assertions="3" time="1.220359"/>
      <testcase name="it can, as a logged user, delete his avatar" file="tests\Tenant\Users\ProfileTest.php::it can, as a logged user, delete his avatar" class="Tests\Tenant\Users\ProfileTest" classname="Tests.Tenant.Users.ProfileTest" assertions="6" time="1.289618"/>
      <testcase name="it can update the first name and last name" file="tests\Tenant\Users\ProfileTest.php::it can update the first name and last name" class="Tests\Tenant\Users\ProfileTest" classname="Tests.Tenant.Users.ProfileTest" assertions="3" time="1.078714"/>
    </testsuite>
    <testsuite name="Tests\Tenant\Users\UserTest" file="tests\Tenant\Users\UserTest.php" tests="10" assertions="65" errors="0" failures="2" skipped="0" time="9.882101">
      <testcase name="it can factory a user" file="tests\Tenant\Users\UserTest.php::it can factory a user" class="Tests\Tenant\Users\UserTest" classname="Tests.Tenant.Users.UserTest" assertions="1" time="1.109022"/>
      <testcase name="it can render the index users page" file="tests\Tenant\Users\UserTest.php::it can render the index users page" class="Tests\Tenant\Users\UserTest" classname="Tests.Tenant.Users.UserTest" assertions="11" time="1.422278">
        <failure type="PHPUnit\Framework\ExpectationFailedException">it can render the index users pageProperty [users] does not exist.
Failed asserting that false is true.&#13;
at vendor\laravel\framework\src\Illuminate\Testing\Fluent\Concerns\Has.php:91
at tests\Tenant\Users\UserTest.php:36
at vendor\inertiajs\inertia-laravel\src\Testing\TestResponseMacros.php:25
at vendor\laravel\framework\src\Illuminate\Macroable\Traits\Macroable.php:126
at vendor\laravel\framework\src\Illuminate\Testing\TestResponse.php:1974
at tests\Tenant\Users\UserTest.php:33</failure>
      </testcase>
      <testcase name="it can render the show user page" file="tests\Tenant\Users\UserTest.php::it can render the show user page" class="Tests\Tenant\Users\UserTest" classname="Tests.Tenant.Users.UserTest" assertions="13" time="1.104935"/>
      <testcase name="it can render the create user page" file="tests\Tenant\Users\UserTest.php::it can render the create user page" class="Tests\Tenant\Users\UserTest" classname="Tests.Tenant.Users.UserTest" assertions="10" time="0.731987"/>
      <testcase name="it can render the edit user page" file="tests\Tenant\Users\UserTest.php::it can render the edit user page" class="Tests\Tenant\Users\UserTest" classname="Tests.Tenant.Users.UserTest" assertions="13" time="0.789173"/>
      <testcase name="it can post a new &quot;loginable&quot; user" file="tests\Tenant\Users\UserTest.php::it can post a new &quot;loginable&quot; user" class="Tests\Tenant\Users\UserTest" classname="Tests.Tenant.Users.UserTest" assertions="1" time="1.513856">
        <failure type="PHPUnit\Framework\ExpectationFailedException">it can post a new "loginable" userExpected response status code [200] but received 500.
Failed asserting that 500 is identical to 200.&#13;
&#13;
The following exception occurred during the last request:

Error: Cannot use object of type Illuminate\Http\Testing\File as array in F:\laragon\www\sme-facility-mysql\app\Services\UserService.php:53
Stack trace:
#0 F:\laragon\www\sme-facility-mysql\app\Services\UserService.php(33): App\Services\UserService-&gt;uploadAndAttachAvatar(Object(App\Models\Tenants\User), Object(Illuminate\Http\Testing\File), 'Jane Doe')
#1 F:\laragon\www\sme-facility-mysql\app\Http\Controllers\API\V1\APIUserController.php(47): App\Services\UserService-&gt;create(Array)
#2 F:\laragon\www\sme-facility-mysql\vendor\laravel\framework\src\Illuminate\Routing\ControllerDispatcher.php(46): App\Http\Controllers\API\V1\APIUserController-&gt;store(Object(App\Http\Requests\Tenant\UserRequest))
#3 F:\laragon\www\sme-facility-mysql\vendor\laravel\framework\src\Illuminate\Routing\Route.php(265): Illuminate\Routing\ControllerDispatcher-&gt;dispatch(Object(Illuminate\Routing\Route), Object(App\Http\Controllers\API\V1\APIUserController), 'store')
#4 F:\laragon\www\sme-facility-mysql\vendor\laravel\framework\src\Illuminate\Routing\Route.php(211): Illuminate\Routing\Route-&gt;runController()
#5 F:\laragon\www\sme-facility-mysql\vendor\laravel\framework\src\Illuminate\Routing\Router.php(822): Illuminate\Routing\Route-&gt;run()
#6 F:\laragon\www\sme-facility-mysql\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(180): Illuminate\Routing\Router-&gt;Illuminate\Routing\{closure}(Object(Illuminate\Http\Request))
#7 F:\laragon\www\sme-facility-mysql\vendor\stancl\tenancy\src\Middleware\ScopeSessions.php(29): Illuminate\Pipeline\Pipeline-&gt;Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#8 F:\laragon\www\sme-facility-mysql\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(219): Stancl\Tenancy\Middleware\ScopeSessions-&gt;handle(Object(Illuminate\Http\Request), Object(Closure))
#9 F:\laragon\www\sme-facility-mysql\vendor\barryvdh\laravel-debugbar\src\Middleware\InjectDebugbar.php(59): Illuminate\Pipeline\Pipeline-&gt;Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#10 F:\laragon\www\sme-facility-mysql\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(219): Barryvdh\Debugbar\Middleware\InjectDebugbar-&gt;handle(Object(Illuminate\Http\Request), Object(Closure))
#11 F:\laragon\www\sme-facility-mysql\vendor\laravel\framework\src\Illuminate\Http\Middleware\HandleCors.php(61): Illuminate\Pipeline\Pipeline-&gt;Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#12 F:\laragon\www\sme-facility-mysql\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(219): Illuminate\Http\Middleware\HandleCors-&gt;handle(Object(Illuminate\Http\Request), Object(Closure))
#13 F:\laragon\www\sme-facility-mysql\app\Http\Middleware\AddUserContextToLogs.php(33): Illuminate\Pipeline\Pipeline-&gt;Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#14 F:\laragon\www\sme-facility-mysql\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(219): App\Http\Middleware\AddUserContextToLogs-&gt;handle(Object(Illuminate\Http\Request), Object(Closure))
#15 F:\laragon\www\sme-facility-mysql\vendor\laravel\framework\src\Illuminate\Http\Middleware\AddLinkHeadersForPreloadedAssets.php(32): Illuminate\Pipeline\Pipeline-&gt;Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#16 F:\laragon\www\sme-facility-mysql\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(219): Illuminate\Http\Middleware\AddLinkHeadersForPreloadedAssets-&gt;handle(Object(Illuminate\Http\Request), Object(Closure))
#17 F:\laragon\www\sme-facility-mysql\vendor\inertiajs\inertia-laravel\src\Middleware.php(96): Illuminate\Pipeline\Pipeline-&gt;Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#18 F:\laragon\www\sme-facility-mysql\app\Http\Middleware\HandleInertiaRequests.php(38): Inertia\Middleware-&gt;handle(Object(Illuminate\Http\Request), Object(Closure))
#19 F:\laragon\www\sme-facility-mysql\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(219): App\Http\Middleware\HandleInertiaRequests-&gt;handle(Object(Illuminate\Http\Request), Object(Closure))
#20 F:\laragon\www\sme-facility-mysql\app\Http\Middleware\HandleAppearance.php(21): Illuminate\Pipeline\Pipeline-&gt;Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#21 F:\laragon\www\sme-facility-mysql\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(219): App\Http\Middleware\HandleAppearance-&gt;handle(Object(Illuminate\Http\Request), Object(Closure))
#22 F:\laragon\www\sme-facility-mysql\vendor\laravel\framework\src\Illuminate\Routing\Middleware\SubstituteBindings.php(50): Illuminate\Pipeline\Pipeline-&gt;Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#23 F:\laragon\www\sme-facility-mysql\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(219): Illuminate\Routing\Middleware\SubstituteBindings-&gt;handle(Object(Illuminate\Http\Request), Object(Closure))
#24 F:\laragon\www\sme-facility-mysql\vendor\laravel\framework\src\Illuminate\Auth\Middleware\Authenticate.php(63): Illuminate\Pipeline\Pipeline-&gt;Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#25 F:\laragon\www\sme-facility-mysql\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(219): Illuminate\Auth\Middleware\Authenticate-&gt;handle(Object(Illuminate\Http\Request), Object(Closure), 'tenant')
#26 F:\laragon\www\sme-facility-mysql\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\VerifyCsrfToken.php(87): Illuminate\Pipeline\Pipeline-&gt;Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#27 F:\laragon\www\sme-facility-mysql\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(219): Illuminate\Foundation\Http\Middleware\VerifyCsrfToken-&gt;handle(Object(Illuminate\Http\Request), Object(Closure))
#28 F:\laragon\www\sme-facility-mysql\vendor\laravel\framework\src\Illuminate\View\Middleware\ShareErrorsFromSession.php(48): Illuminate\Pipeline\Pipeline-&gt;Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#29 F:\laragon\www\sme-facility-mysql\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(219): Illuminate\View\Middleware\ShareErrorsFromSession-&gt;handle(Object(Illuminate\Http\Request), Object(Closure))
#30 F:\laragon\www\sme-facility-mysql\vendor\laravel\framework\src\Illuminate\Session\Middleware\StartSession.php(120): Illuminate\Pipeline\Pipeline-&gt;Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#31 F:\laragon\www\sme-facility-mysql\vendor\laravel\framework\src\Illuminate\Session\Middleware\StartSession.php(63): Illuminate\Session\Middleware\StartSession-&gt;handleStatefulRequest(Object(Illuminate\Http\Request), Object(Illuminate\Session\Store), Object(Closure))
#32 F:\laragon\www\sme-facility-mysql\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(219): Illuminate\Session\Middleware\StartSession-&gt;handle(Object(Illuminate\Http\Request), Object(Closure))
#33 F:\laragon\www\sme-facility-mysql\vendor\laravel\framework\src\Illuminate\Cookie\Middleware\AddQueuedCookiesToResponse.php(36): Illuminate\Pipeline\Pipeline-&gt;Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#34 F:\laragon\www\sme-facility-mysql\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(219): Illuminate\Cookie\Middleware\AddQueuedCookiesToResponse-&gt;handle(Object(Illuminate\Http\Request), Object(Closure))
#35 F:\laragon\www\sme-facility-mysql\vendor\laravel\framework\src\Illuminate\Cookie\Middleware\EncryptCookies.php(74): Illuminate\Pipeline\Pipeline-&gt;Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#36 F:\laragon\www\sme-facility-mysql\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(219): Illuminate\Cookie\Middleware\EncryptCookies-&gt;handle(Object(Illuminate\Http\Request), Object(Closure))
#37 F:\laragon\www\sme-facility-mysql\vendor\stancl\tenancy\src\Middleware\IdentificationMiddleware.php(36): Illuminate\Pipeline\Pipeline-&gt;Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#38 F:\laragon\www\sme-facility-mysql\vendor\stancl\tenancy\src\Middleware\InitializeTenancyBySubdomain.php(51): Stancl\Tenancy\Middleware\IdentificationMiddleware-&gt;initializeTenancy(Object(Illuminate\Http\Request), Object(Closure), 'test')
#39 F:\laragon\www\sme-facility-mysql\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(219): Stancl\Tenancy\Middleware\InitializeTenancyBySubdomain-&gt;handle(Object(Illuminate\Http\Request), Object(Closure))
#40 F:\laragon\www\sme-facility-mysql\vendor\stancl\tenancy\src\Middleware\PreventAccessFromCentralDomains.php(29): Illuminate\Pipeline\Pipeline-&gt;Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#41 F:\laragon\www\sme-facility-mysql\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(219): Stancl\Tenancy\Middleware\PreventAccessFromCentralDomains-&gt;handle(Object(Illuminate\Http\Request), Object(Closure))
#42 F:\laragon\www\sme-facility-mysql\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(137): Illuminate\Pipeline\Pipeline-&gt;Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#43 F:\laragon\www\sme-facility-mysql\vendor\laravel\framework\src\Illuminate\Routing\Router.php(821): Illuminate\Pipeline\Pipeline-&gt;then(Object(Closure))
#44 F:\laragon\www\sme-facility-mysql\vendor\laravel\framework\src\Illuminate\Routing\Router.php(800): Illuminate\Routing\Router-&gt;runRouteWithinStack(Object(Illuminate\Routing\Route), Object(Illuminate\Http\Request))
#45 F:\laragon\www\sme-facility-mysql\vendor\laravel\framework\src\Illuminate\Routing\Router.php(764): Illuminate\Routing\Router-&gt;runRoute(Object(Illuminate\Http\Request), Object(Illuminate\Routing\Route))
#46 F:\laragon\www\sme-facility-mysql\vendor\laravel\framework\src\Illuminate\Routing\Router.php(753): Illuminate\Routing\Router-&gt;dispatchToRoute(Object(Illuminate\Http\Request))
#47 F:\laragon\www\sme-facility-mysql\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(200): Illuminate\Routing\Router-&gt;dispatch(Object(Illuminate\Http\Request))
#48 F:\laragon\www\sme-facility-mysql\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(180): Illuminate\Foundation\Http\Kernel-&gt;Illuminate\Foundation\Http\{closure}(Object(Illuminate\Http\Request))
#49 F:\laragon\www\sme-facility-mysql\vendor\barryvdh\laravel-debugbar\src\Middleware\InjectDebugbar.php(59): Illuminate\Pipeline\Pipeline-&gt;Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#50 F:\laragon\www\sme-facility-mysql\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(219): Barryvdh\Debugbar\Middleware\InjectDebugbar-&gt;handle(Object(Illuminate\Http\Request), Object(Closure))
#51 F:\laragon\www\sme-facility-mysql\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\TransformsRequest.php(21): Illuminate\Pipeline\Pipeline-&gt;Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#52 F:\laragon\www\sme-facility-mysql\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\ConvertEmptyStringsToNull.php(31): Illuminate\Foundation\Http\Middleware\TransformsRequest-&gt;handle(Object(Illuminate\Http\Request), Object(Closure))
#53 F:\laragon\www\sme-facility-mysql\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(219): Illuminate\Foundation\Http\Middleware\ConvertEmptyStringsToNull-&gt;handle(Object(Illuminate\Http\Request), Object(Closure))
#54 F:\laragon\www\sme-facility-mysql\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\TransformsRequest.php(21): Illuminate\Pipeline\Pipeline-&gt;Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#55 F:\laragon\www\sme-facility-mysql\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\TrimStrings.php(51): Illuminate\Foundation\Http\Middleware\TransformsRequest-&gt;handle(Object(Illuminate\Http\Request), Object(Closure))
#56 F:\laragon\www\sme-facility-mysql\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(219): Illuminate\Foundation\Http\Middleware\TrimStrings-&gt;handle(Object(Illuminate\Http\Request), Object(Closure))
#57 F:\laragon\www\sme-facility-mysql\vendor\laravel\framework\src\Illuminate\Http\Middleware\ValidatePostSize.php(27): Illuminate\Pipeline\Pipeline-&gt;Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#58 F:\laragon\www\sme-facility-mysql\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(219): Illuminate\Http\Middleware\ValidatePostSize-&gt;handle(Object(Illuminate\Http\Request), Object(Closure))
#59 F:\laragon\www\sme-facility-mysql\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\PreventRequestsDuringMaintenance.php(109): Illuminate\Pipeline\Pipeline-&gt;Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#60 F:\laragon\www\sme-facility-mysql\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(219): Illuminate\Foundation\Http\Middleware\PreventRequestsDuringMaintenance-&gt;handle(Object(Illuminate\Http\Request), Object(Closure))
#61 F:\laragon\www\sme-facility-mysql\vendor\laravel\framework\src\Illuminate\Http\Middleware\HandleCors.php(61): Illuminate\Pipeline\Pipeline-&gt;Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#62 F:\laragon\www\sme-facility-mysql\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(219): Illuminate\Http\Middleware\HandleCors-&gt;handle(Object(Illuminate\Http\Request), Object(Closure))
#63 F:\laragon\www\sme-facility-mysql\vendor\laravel\framework\src\Illuminate\Http\Middleware\TrustProxies.php(58): Illuminate\Pipeline\Pipeline-&gt;Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#64 F:\laragon\www\sme-facility-mysql\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(219): Illuminate\Http\Middleware\TrustProxies-&gt;handle(Object(Illuminate\Http\Request), Object(Closure))
#65 F:\laragon\www\sme-facility-mysql\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\InvokeDeferredCallbacks.php(22): Illuminate\Pipeline\Pipeline-&gt;Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#66 F:\laragon\www\sme-facility-mysql\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(219): Illuminate\Foundation\Http\Middleware\InvokeDeferredCallbacks-&gt;handle(Object(Illuminate\Http\Request), Object(Closure))
#67 F:\laragon\www\sme-facility-mysql\vendor\laravel\framework\src\Illuminate\Http\Middleware\ValidatePathEncoding.php(26): Illuminate\Pipeline\Pipeline-&gt;Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#68 F:\laragon\www\sme-facility-mysql\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(219): Illuminate\Http\Middleware\ValidatePathEncoding-&gt;handle(Object(Illuminate\Http\Request), Object(Closure))
#69 F:\laragon\www\sme-facility-mysql\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php(137): Illuminate\Pipeline\Pipeline-&gt;Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#70 F:\laragon\www\sme-facility-mysql\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(175): Illuminate\Pipeline\Pipeline-&gt;then(Object(Closure))
#71 F:\laragon\www\sme-facility-mysql\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php(144): Illuminate\Foundation\Http\Kernel-&gt;sendRequestThroughRouter(Object(Illuminate\Http\Request))
#72 F:\laragon\www\sme-facility-mysql\vendor\laravel\framework\src\Illuminate\Foundation\Testing\Concerns\MakesHttpRequests.php(607): Illuminate\Foundation\Http\Kernel-&gt;handle(Object(Illuminate\Http\Request))
#73 F:\laragon\www\sme-facility-mysql\vendor\laravel\framework\src\Illuminate\Foundation\Testing\Concerns\MakesHttpRequests.php(397): Illuminate\Foundation\Testing\TestCase-&gt;call('POST', 'http://test.loc...', Array, Array, Array, Array)
#74 F:\laragon\www\sme-facility-mysql\tests\TenantTestCase.php(102): Illuminate\Foundation\Testing\TestCase-&gt;post('http://test.loc...', Array, Array)
#75 F:\laragon\www\sme-facility-mysql\tests\Tenant\Users\UserTest.php(88): Tests\TenantTestCase-&gt;postToTenant('api.users.store', Array)
#76 F:\laragon\www\sme-facility-mysql\vendor\pestphp\pest\src\Factories\TestCaseMethodFactory.php(168): P\Tests\Tenant\Users\UserTest-&gt;{closure}()
#77 [internal function]: P\Tests\Tenant\Users\UserTest-&gt;Pest\Factories\{closure}()
#78 F:\laragon\www\sme-facility-mysql\vendor\pestphp\pest\src\Concerns\Testable.php(419): call_user_func_array(Object(Closure), Array)
#79 F:\laragon\www\sme-facility-mysql\vendor\pestphp\pest\src\Support\ExceptionTrace.php(26): P\Tests\Tenant\Users\UserTest-&gt;Pest\Concerns\{closure}()
#80 F:\laragon\www\sme-facility-mysql\vendor\pestphp\pest\src\Concerns\Testable.php(419): Pest\Support\ExceptionTrace::ensure(Object(Closure))
#81 F:\laragon\www\sme-facility-mysql\vendor\pestphp\pest\src\Concerns\Testable.php(321): P\Tests\Tenant\Users\UserTest-&gt;__callClosure(Object(Closure), Array)
#82 F:\laragon\www\sme-facility-mysql\vendor\pestphp\pest\src\Factories\TestCaseFactory.php(169) : eval()'d code(62): P\Tests\Tenant\Users\UserTest-&gt;__runTest(Object(Closure))
#83 F:\laragon\www\sme-facility-mysql\vendor\phpunit\phpunit\src\Framework\TestCase.php(1656): P\Tests\Tenant\Users\UserTest-&gt;__pest_evaluable_it_can_post_a_new__loginable__user()
#84 F:\laragon\www\sme-facility-mysql\vendor\phpunit\phpunit\src\Framework\TestCase.php(514): PHPUnit\Framework\TestCase-&gt;runTest()
#85 F:\laragon\www\sme-facility-mysql\vendor\phpunit\phpunit\src\Framework\TestRunner\TestRunner.php(87): PHPUnit\Framework\TestCase-&gt;runBare()
#86 F:\laragon\www\sme-facility-mysql\vendor\phpunit\phpunit\src\Framework\TestCase.php(361): PHPUnit\Framework\TestRunner-&gt;run(Object(P\Tests\Tenant\Users\UserTest))
#87 F:\laragon\www\sme-facility-mysql\vendor\phpunit\phpunit\src\Framework\TestSuite.php(369): PHPUnit\Framework\TestCase-&gt;run()
#88 F:\laragon\www\sme-facility-mysql\vendor\phpunit\phpunit\src\Framework\TestSuite.php(369): PHPUnit\Framework\TestSuite-&gt;run()
#89 F:\laragon\www\sme-facility-mysql\vendor\phpunit\phpunit\src\TextUI\TestRunner.php(64): PHPUnit\Framework\TestSuite-&gt;run()
#90 F:\laragon\www\sme-facility-mysql\vendor\phpunit\phpunit\src\TextUI\Application.php(211): PHPUnit\TextUI\TestRunner-&gt;run(Object(PHPUnit\TextUI\Configuration\Configuration), Object(PHPUnit\Runner\ResultCache\DefaultResultCache), Object(PHPUnit\Framework\TestSuite))
#91 F:\laragon\www\sme-facility-mysql\vendor\pestphp\pest\src\Kernel.php(103): PHPUnit\TextUI\Application-&gt;run(Array)
#92 F:\laragon\www\sme-facility-mysql\vendor\pestphp\pest\bin\pest(184): Pest\Kernel-&gt;handle(Array, Array)
#93 F:\laragon\www\sme-facility-mysql\vendor\pestphp\pest\bin\pest(192): {closure}()
#94 {main}

----------------------------------------------------------------------------------

Cannot use object of type Illuminate\Http\Testing\File as array&#13;
&#13;
at vendor\laravel\framework\src\Illuminate\Testing\TestResponseAssert.php:45
at vendor\laravel\framework\src\Illuminate\Testing\TestResponse.php:174
at tests\Tenant\Users\UserTest.php:89</failure>
      </testcase>
      <testcase name="it can post a new &quot;non loginable&quot; user and attach a provider" file="tests\Tenant\Users\UserTest.php::it can post a new &quot;non loginable&quot; user and attach a provider" class="Tests\Tenant\Users\UserTest" classname="Tests.Tenant.Users.UserTest" assertions="4" time="0.836173"/>
      <testcase name="it can update an existing user" file="tests\Tenant\Users\UserTest.php::it can update an existing user" class="Tests\Tenant\Users\UserTest" classname="Tests.Tenant.Users.UserTest" assertions="4" time="0.824160"/>
      <testcase name="it can update the role of an existing user" file="tests\Tenant\Users\UserTest.php::it can update the role of an existing user" class="Tests\Tenant\Users\UserTest" classname="Tests.Tenant.Users.UserTest" assertions="5" time="0.768924"/>
      <testcase name="it can delete an existing user" file="tests\Tenant\Users\UserTest.php::it can delete an existing user" class="Tests\Tenant\Users\UserTest" classname="Tests.Tenant.Users.UserTest" assertions="3" time="0.781594"/>
    </testsuite>
  </testsuite>
</testsuites>
